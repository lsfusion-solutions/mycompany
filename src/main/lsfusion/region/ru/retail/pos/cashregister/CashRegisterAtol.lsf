MODULE CashRegisterAtol;

REQUIRE PosDashboardRu, ServiceP, Debt;

PRIORITY Retail;

NAMESPACE Atol;

EXTEND CLASS CashDriver {
    atol10 'Драйвер ККТ АТОЛ v.10'
}

// atol options
dataIdPaymentAtol 'Код платежа Атол' = DATA STRING[20] (PaymentMethod);
idPaymentAtol 'Код платежа Атол' (PaymentMethod p) = OVERRIDE dataIdPaymentAtol(p), IF isCash(p) THEN 'cash' ELSE 'electronically';

EXTEND FORM paymentMethod PROPERTIES dataIdPaymentAtol(pm); 

GROUP request;
GROUP operator : request;
GROUP clientInfo : request;

url (Pos p) = 'http://' + hostname(p) + ':' + (OVERRIDE port(p), 16732);
urlRequests(p) = url(p) + '/requests';

headers = DATA LOCAL STRING (STRING);
headers (Pos p, STRING h) = CASE 
    WHEN h = r'Authorization' THEN r'Basic ' + encodeBase64(login(p) + ':' + password(p)); 

requestResult = DATA LOCAL FILE ();

request (Pos p, FILE f) {
    headers(STRING h) <- headers(p, h);
    EXTERNAL HTTP CLIENT urlRequests(p) HEADERS headers PARAMS f TO requestResult;
}

// request with response
requestResponseNumberAttempts 'Кол-во попыток чтения ответа от драйвера АТОЛ' = DATA INTEGER ();
EXTEND FORM options PROPERTIES() requestResponseNumberAttempts;
DESIGN options { commons { MOVE PROPERTY(requestResponseNumberAttempts()); } }

GROUP error;
GROUP result;
GROUP fiscalParams : result;

fiscalDocumentNumber = DATA LOCAL NUMERIC(INTEGER);
code = DATA LOCAL NUMERIC(INTEGER);
description = DATA LOCAL STRING(INTEGER);
status = DATA LOCAL STRING(INTEGER);

FORM requestResponse
    OBJECTS results = INTEGER

    PROPERTIES(results) IN error code, description
    PROPERTIES(results) status
    
    PROPERTIES(results) IN fiscalParams fiscalDocumentNumber
    FILTERS imported(results)
;

requestWithResponse (Pos p, FILE f) {
    headers(STRING h) <- headers(p, h);

    EXTERNAL HTTP CLIENT POST urlRequests(p) HEADERS headers PARAMS f TO requestResult;

    // get answer
    FOR iterate(INTEGER i, 1, requestResponseNumberAttempts()) DO {
        sleep(1000);

        EXTERNAL HTTP CLIENT GET urlRequests(p) + '/' + generatedUUID() HEADERS headers TO requestResult;
        IMPORT requestResponse JSON FROM requestResult();
        IF NOT (status(0) = 'wait' OR status(0) = 'inProgress') THEN BREAK;
    }
    
    IF NOT status(0) = 'ready' THEN {
        fileToString(requestResult());
        MESSAGE 'Ошибка при обработке запроса со статусом ' + (OVERRIDE status(0), 'unknown') + ' : ' + (OVERRIDE resultString(), '');
    }
}

// report X
FORM reportX
    PROPERTIES uuid = generatedUUID()
    PROPERTIES IN request type = r'reportX'
    PROPERTIES IN operator currentUserName() EXTID 'name' 
;
reportX(Pos p) {
    generateUUID();
    EXPORT reportX JSON CHARSET 'UTF-8';
    request(p, exportFile());
}
reportX(Pos p) + WHEN driver(p) = CashDriver.atol10 THEN { reportX(p);}

// continue print
FORM continuePrint
    PROPERTIES uuid = generatedUUID()
    PROPERTIES IN request type = r'continuePrint'
    PROPERTIES IN operator currentUserName() EXTID 'name'
;
continuePrint(Pos p) {
    generateUUID();
    EXPORT continuePrint JSON CHARSET 'UTF-8';
    request(p, exportFile());
}
continuePrint(Pos p) + WHEN driver(p) = CashDriver.atol10 THEN {continuePrint(p);}

// open shift
FORM openShift
    PROPERTIES uuid = generatedUUID()
    PROPERTIES IN request type = r'openShift'
    PROPERTIES IN operator currentUserName() EXTID 'name'
;
openShift(Session s) {
    generateUUID();
    EXPORT openShift JSON CHARSET 'UTF-8';
    TRY {
        requestWithResponse(pos(s), exportFile());
        IF status(0) = 'ready' THEN
            NEWSESSION { fiscalOpenSession(s) <- TRUE; APPLY; }
    } CATCH {
        fileToString(requestResult());
        MESSAGE 'Ошибка при отправке открытия смены : ' + OVERRIDE messageCaughtException(), '';
    }
}
openShift(Session s) + WHEN driver(pos(s)) = CashDriver.atol10 THEN { openShift(s); }

// close shift
FORM closeShift
    PROPERTIES uuid = generatedUUID()
    PROPERTIES IN request type = r'closeShift'
    PROPERTIES IN operator currentUserName() EXTID 'name'
;
closeShift(Session s) {
    generateUUID();
    EXPORT closeShift JSON CHARSET 'UTF-8';
    TRY {
        requestWithResponse(pos(s), exportFile());
        IF status(0) = 'ready' THEN
            NEWSESSION { fiscalCloseSession(s) <- TRUE; APPLY; }
    } CATCH {
        fileToString(requestResult());
        MESSAGE 'Ошибка при отправке закрытия смены : ' + OVERRIDE messageCaughtException(), '';
    }
}
closeShift(Session s) + WHEN driver(pos(s)) = CashDriver.atol10 THEN {closeShift(s);}

// cash in
FORM cashIn
    PROPERTIES uuid = generatedUUID()

    OBJECTS i = IncomingPayment  
    PROPERTIES IN request type = r'cashIn'
    PROPERTIES IN operator currentUserName() EXTID 'name'
    PROPERTIES IN request cashSum = amount(i)
;
cashIn(IncomingPayment i) {
    generateUUID();
    EXPORT cashIn OBJECTS i = i JSON CHARSET 'UTF-8';
    TRY {
        requestWithResponse(pos(session(i)), exportFile());
        IF status(0) = 'ready' THEN
            NEWSESSION { fiscal(i) <- TRUE; APPLY; }
    } CATCH {
        fileToString(requestResult());
        MESSAGE 'Ошибка при отправке внесения наличных : ' + OVERRIDE messageCaughtException(), '';
    }
}
cashIn(IncomingPayment i) + WHEN driver(pos(session(i))) = CashDriver.atol10 AND i IS IncomingPayment THEN { cashIn(i); }

// cash out
FORM cashOut
    PROPERTIES uuid = generatedUUID()
    
    OBJECTS o = OutgoingPayment  
    PROPERTIES IN request type = r'cashOut'
    PROPERTIES IN operator currentUserName() EXTID 'name'
    PROPERTIES IN request cashSum = amount(o)
;
cashOut(OutgoingPayment o) {
    generateUUID();
    EXPORT cashOut OBJECTS o = o JSON CHARSET 'UTF-8';
    TRY {
        requestWithResponse(pos(session(o)), exportFile());
        IF status(0) = 'ready' THEN
            NEWSESSION { fiscal(o) <- TRUE; APPLY; }
    } CATCH {
        fileToString(requestResult());
        MESSAGE 'Ошибка при отправке изъятия наличных : ' + OVERRIDE messageCaughtException(), '';
    }
}
cashOut(OutgoingPayment o) + WHEN driver(pos(session(o))) = CashDriver.atol10 THEN { cashOut(o); }

//buy
typeLine = ABSTRACT STRING (InvoiceLine);
typeLine(InvoiceLine l) += r'position';
 
paymentObject = ABSTRACT CASE STRING (InvoiceLine);
paymentObject (InvoiceLine l) += WHEN item(l) IS Product THEN r'commodity';
paymentObject (InvoiceLine l) += WHEN item(l) IS Service THEN r'service';

paymentType (IncomingPayment p, Invoice i) = idPaymentAtol(paymentMethod(p, i));
 
GROUP tax;

FORM sell
    PROPERTIES uuid = generatedUUID()
    
    OBJECTS i = Invoice
    PROPERTIES IN request type = 'sell'
    PROPERTIES IN operator currentUserName() EXTID 'name'
    PROPERTIES IN clientInfo emailOrPhone(i)
    
    OBJECTS l = InvoiceLine IN request EXTID 'items'
    PROPERTIES(l) typeLine EXTID 'type', nameItem EXTID 'name', resultPrice EXTID 'price', quantity,
                  nameUom EXTID 'measurementUnit', paymentObject, untaxedAmount EXTID 'amount', discountAmount EXTID 'infoDiscountAmount' 

    FILTERS i = invoice(l)
    
    PROPERTIES taxType = IF countTaxes(l) THEN 'vat'  + trim(toChar((OVERRIDE taxPercent(l), 0), '99')) ELSE 'none' EXTID 'type' IN tax
    
    OBJECTS d = Debt IN request EXTID 'payments'
    PROPERTIES (d, i) paymentType EXTID 'type', paid EXTID 'sum'
    FILTERS paid(d, i), active(d)
;

sell(Invoice i) {
    generateUUID();
    EXPORT sell OBJECTS i = i JSON CHARSET 'UTF-8';
    TRY {
        requestWithResponse(pos(session(i)), exportFile());
        IF status(0) = 'ready' THEN
            NEWSESSION NESTED (fiscalDocumentNumber) { 
                fiscal(i) <- TRUE; 
                fiscalNumber(i) <- fiscalDocumentNumber(0);
                APPLY; 
            }
    } CATCH {
        fileToString(requestResult());
        MESSAGE 'Ошибка при отправке чека : ' + OVERRIDE messageCaughtException(), '';
    }
}
sell(Invoice i) + WHEN driver(pos(session(i))) = CashDriver.atol10 THEN { sell(i); }