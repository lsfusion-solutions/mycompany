MODULE ProjectTask;

REQUIRE Project, Task;

NAMESPACE ProjectManagement;

project = DATA Project (Task) INDEXED;
numberProject 'Project' (Task e) = number(project(e));
nameProject 'Project' (Task e) = name(project(e)) IN id;

prefixName (Task t) += nameProject(t);

countOpenedTask '{Tasks}' (Project p) = GROUP SUM 1 IF project(Task t) = p AND opened(t);

EXTEND FORM task
    PROPERTIES(t) nameProject
;

DESIGN task {
    params {
        MOVE PROPERTY(nameProject(t));
    }
}

EXTEND FORM tasks
    PROPERTIES(t) READONLY nameProject AFTER name(t)
;

newTask 'Add' (Project p) {
    NEWSESSION {
        NEW t = Task {
            project(t) <- p;
            SHOW task OBJECTS t = t DOCKED;
        }
    }
} IMAGE 'add.png' CHANGEKEY 'INSERT' HIDE;

EXTEND FORM project
    OBJECTS t = Task
    PROPERTIES(t) READONLY id, name, nameAuthor, nameAssignedTo, deadline, closed
    PROPERTIES(p) newTask DRAW t TOOLBAR SHOWIF PREV(p IS Project)
    PROPERTIES(t) NEWSESSION EDIT, DELETE
    FILTERS project(t) = p

    FILTERGROUP active
        FILTER 'Opened' opened(t) 'F8' DEFAULT
        FILTER 'Closed' closed(t) 'F7'
;

DESIGN project {
    details {
        NEW tasks {
            caption = badged('{Tasks}', countOpenedTask(p));
            MOVE BOX(t) { caption = ''; }
        }
    }
}

EXTEND FORM projects
    PROPERTIES(p) READONLY countOpenedTask
;

@defineHistoryProperty(task, project, 'Project', nameProject);
@defineDocFilter(task, Project, project, t, 'Project');