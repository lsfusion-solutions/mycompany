MODULE ProjectSalesOrder;

REQUIRE Project, SalesOrder;

NAMESPACE ProjectSales;

// type
orderType = DATA OrderType (ProjectType);
nameOrderType 'Sales order type' (ProjectType t) = name(orderType(t));
EXTEND FORM projectType PROPERTIES salesOrderType = nameOrderType(o);

project = DATA Project (Order) INDEXED;
nameProject 'Project' (Order i) = name(project(i));
@definePropertyValue(order, project, 'Project', nameProject);

countOrders 'Sales orders' (Project p) = GROUP SUM 1 IF project(Order i) = p;

EXTEND FORM order
    PROPERTIES(o) READONLYIF readonly(o) nameProject
;

DESIGN order {
    headerRight {
        MOVE PROPERTY(nameProject(o));
    }
}

EXTEND FORM orders
    PROPERTIES(o) READONLY nameProject
;

EXTEND FORM project
    OBJECTS so = Order
    PROPERTIES(so) READONLY number, dateTime,
                            imagedNameStatus BACKGROUND colorStatus(so), nameType,
                            scheduledDateTime, nameLocation, amount
    FILTERS project(so) = p
;

DESIGN project {
    details  {
        MOVE BOX(so) {
            caption = badged('Sales orders', countOrders(p));
        }
    }
}

fill ABSTRACT LIST (Order, Project);

create (Order o, Project p) {
    project(o) <- p;

    type(o) <- orderType(type(p));

    company(o) <- company(p);
    customer(o) <- partner(p);

    fill(o, p);
}

createOrder 'Create Sales Order' (Project p) {
    APPLY;
    IF canceled() THEN RETURN;

    NEWSESSION {
        NEW o = Order {
            create(o, p);

            SHOW order OBJECTS o = o DOCKED;
        }
    }
} IMAGE 'add.png' CHANGEKEY 'INSERT' HIDE;

EXTEND FORM project
    PROPERTIES(p) createSalesOrder 'Add' = createOrder DRAW so TOOLBAR
    PROPERTIES(so) NEWSESSION EDIT, DELETE
;

@defineHistoryProperty(order, project, 'Project', nameProject);