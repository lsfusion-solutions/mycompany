MODULE Timesheet;

REQUIRE ProjectAssignment, ProjectTimeEntry, TimeEntryHours, Time;

NAMESPACE ProjectManagement;

autoSaveTimesheetHours 'Auto save timesheet hours' = DATA BOOLEAN ();
EXTEND FORM options PROPERTIES() autoSaveTimesheetHours;

DESIGN options {
    commons {
        MOVE PROPERTY(autoSaveTimesheetHours());
    }
}

timesheetProject = DATA LOCAL NESTED Project ();
nameTimesheetProject 'Project' = name(timesheetProject());

// there is filter for the form dialogProjects
//CONSTRAINT timesheetProject() AND countAssignments(currentUser()) AND NOT assigned(timesheetProject(), currentUser())
//    CHECKED BY timesheetProject[] MESSAGE '';

matchesProject (TimeEntry t) = project(t) = timesheetProject() OR (NOT timesheetProject() AND NOT project(t));

timesheetTimeEntryType = DATA LOCAL TimeEntryType ();
nameTimesheetTimeEntryType 'Time entry type' = name(timesheetTimeEntryType());

timesheetTimeEntryHours = DATA LOCAL TimeEntryHours ();
nameTimesheetTimeEntryHours 'Hours' = nameHours(timesheetTimeEntryHours());
CONSTRAINT timesheetTimeEntryHours() AND NOT type(timesheetTimeEntryHours()) = timesheetTimeEntryType()
    CHECKED BY timesheetTimeEntryHours[] MESSAGE '';

rolesTimesheet 'Roles' (Employee e) = roles(timesheetProject(), e);

hoursTimesheet 'Hours' (DATE d, Employee e)=
    IF timesheetProject() THEN hours(d, e, timesheetProject())
    ELSE hours(d, e);

hoursTimesheet 'Hours' (INTERVAL[DATE] i) = hours(timesheetProject(), i);

backgroundHoursTimesheet 'Hours' (DATE d, Employee e)=
    IF countTimeEntryType(d, e) > 1 THEN RGB(255,192,0) ELSE
        OVERRIDE
            IF timesheetProject() THEN rgbColorHoursTimeEntry(timeEntry(d, e, timesheetProject()))
            ELSE rgbColorHoursTimeEntry(timeEntry(d, e)),
            RGB(255,224,224) IF extractDOWNumber(d) = 0 OR extractDOWNumber(d) = 6;

changeTimesheetHours (DATE d, Employee e, TimeEntryType et, NUMERIC[8,2] n, TimeEntryHours h) {
    IF n THEN {
        IF timesheetProject() THEN {
            FOR TimeEntry t = timeEntry(d, e, timesheetProject(), et) DO {
                IF hours(t) = n AND h THEN
                    DELETE t;
                ELSE {
                    hours(t) <- n;
                    timeEntryHours(t) <- h;
                }
            } ELSE {
                DELETE TimeEntry te WHERE project(te) = timesheetProject() AND employee(te) = e AND date(te) = d;
                NEW t = TimeEntry {
                    project(t) <- timesheetProject();
                    type(t) <- et;
                    employee(t) <- e;
                    date(t) <- d;
                    hours(t) <- n;
                    timeEntryHours(t) <- h;
                }
            }
        } ELSE {
            FOR TimeEntry t = timeEntry(d, e, et) DO {
                IF hours(t) = n AND h THEN
                    DELETE t;
                ELSE {
                    hours(t) <- n;
                    timeEntryHours(t) <- h;
                }
            } ELSE {
                DELETE TimeEntry te WHERE NOT project(te) AND employee(te) = e AND date(te) = d;
                NEW t = TimeEntry {
                    type(t) <- et;
                    employee(t) <- e;
                    date(t) <- d;
                    hours(t) <- n;
                    timeEntryHours(t) <- h;
                }
            }
        }
    } ELSE
        DELETE TimeEntry t WHERE matchesProject(t) AND employee(t) = e AND date(t) = d;
}

changeSaveTimesheetHours (DATE d, Employee e, TimeEntryType et, NUMERIC[8,2] n, TimeEntryHours h, BOOLEAN autoSave) {
    IF NOT autoSave THEN {
        changeTimesheetHours(d, e, et, n, h);
    } ELSE 
        NEWSESSION APPLY {
            changeTimesheetHours(d, e, et, n, h);
        }
}

countTimeEntryProject (DATE d) = GROUP SUM 1 IF date(TimeEntry t) = d AND matchesProject(t);

clear 'Clear' (DATE d) {
    DELETE TimeEntry t WHERE date(t) = d AND matchesProject(t);
}

overCopy ABSTRACT LIST (TimeEntry, TimeEntry);
maxDate (DATE to) = GROUP MAX date(TimeEntry t) IF date(t) < to AND matchesProject(t);
copy 'Copy' (DATE d) {
    clear(d);
    FOR date(TimeEntry t) = maxDate(d) AND matchesProject(t) INLINE DO NEW tn = TimeEntry {
        date(tn) <- d;
        hours(tn) <- hours(t);
        employee(tn) <- employee(t);
        project(tn) <- project(t);
        type(tn) <- type(t);
        overCopy(tn, t);
    }
}

copyApply 'Copy' (DATE d) {
    ASK 'Copying will delete all time entries for the selected day. Continue ?' IF countTimeEntryProject(d) DO
        NEWSESSION APPLY { copy(d); }
}

clearApply 'Clear' (DATE d) {
    ASK 'This action cannot be undone. Continue ?' DO
        NEWSESSION APPLY { clear(d); }
};

copyHours 'Copy' (DATE d) {
    IF NOT autoSaveTimesheetHours() THEN
        copy(d);
    ELSE
        copyApply(d);
}

clearHours 'Clear' (DATE d) {
    IF NOT autoSaveTimesheetHours() THEN
        clear(d);
    ELSE
        clearApply(d);
}

FORM timesheetSupervisorDateEmployee 'Time entries'
    OBJECTS i = INTERVAL[DATE] PANEL
    OBJECTS e = Employee PANEL

    OBJECTS t = TimeEntry
    PROPERTIES(t) READONLY nameProject SHOWIF NOT timesheetProject(), date SHOWIF from(i) != to(i), hours, nameType, description, nameTimeEntryHours
    PROPERTIES(t) EDIT, DELETE
    ORDERS date(t)
    FILTERS date(t) >= from(i) AND date(t) <= to(i),
            employee(t) = e,
            project(t) = timesheetProject() OR NOT timesheetProject()
;