MODULE ProjectShipment;

REQUIRE Project, ShipmentDone;

NAMESPACE ProjectManagement;

// type
shipmentType = DATA ShipmentType (ProjectType);
nameShipmentType 'Shipment type' (ProjectType t) = name(shipmentType(t));
EXTEND FORM projectType PROPERTIES nameShipmentType(o);

project = DATA Project (Shipment) INDEXED;
nameProject 'Project' (Shipment i) = name(project(i));

countShipments 'Shipments' (Project p) = GROUP SUM 1 IF project(Shipment i) = p;

EXTEND FORM shipment
    PROPERTIES(s) READONLYIF readonly(s) nameProject
;

DESIGN shipment {
    headerRight {
        MOVE PROPERTY(nameProject(s));
    }
}

EXTEND FORM shipments
    PROPERTIES(s) READONLY nameProject
;

EXTEND FORM project
    OBJECTS s = Shipment
    PROPERTIES(s) READONLY number, scheduledDateTime, 
                           imagedNameStatus BACKGROUND colorStatus(s), nameType, 
                           executionDateTime, nameLocation
    
    FILTERS project(s) = p   
;

DESIGN project {
    details  {
        MOVE BOX(s) {
            caption = badged('Shipments', countShipments(p));
        }
    }
}

fill ABSTRACT LIST (Shipment, Project);

create (Shipment i, Project p) {
    project(i) <- p;

    type(i) <- shipmentType(type(p));    

    customer(i) <- partner(p);
    
    fill(i, p);
}

createShipment 'Create Shipment' (Project p) {
    APPLY;
    IF canceled() THEN RETURN;
               
    NEWSESSION {
        NEW s = Shipment {
            create(s, p);
            
            SHOW shipment OBJECTS s = s DOCKED;
        }
    }
}

EXTEND FORM project
    PROPERTIES(p) 'Add' = createShipment DRAW s TOOLBAR
    PROPERTIES(s) NEWSESSION EDIT, DELETE
;