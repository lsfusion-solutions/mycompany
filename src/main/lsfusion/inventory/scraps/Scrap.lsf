MODULE Scrap;

REQUIRE InventorySettings, Product, DateUtils, 
        LocationEmployee, InvLedger, 
        BarCode, Doc, ScrapType;

NAMESPACE Inventory;

CLASS Scrap 'Scrap';

@defineDocStatus(scrap, 'Scrap status');

// type
type 'Type' = DATA ScrapType (Scrap) NONULL;
nameType 'Type' (Scrap r) = name(type(r));

WHEN LOCAL SET(Scrap r IS Scrap) AND NOT CHANGED(type(r)) DO type(r) <- defaultScrapType(); 

dateTime 'Date' = DATA DATETIME (Scrap) NONULL IN id;
dateTime(Scrap s) <- currentDateTime() WHEN SET(s IS Scrap);
@defineDateTimeAggregation(Scrap);

@defineNumberType(scrap);

numberDate 'Description' (Scrap s) = number(s) + ' (' + dateTime(s) + ')' IN id;

location 'Location' = DATA Location (Scrap) NONULL;
nameLocation 'Location' (Scrap s) = name(location(s));
CONSTRAINT SETCHANGED(location(Scrap o)) AND internalUse(location(o)) CHECKED BY location[Scrap]
    MESSAGE 'The selected location is for internal use';

company 'Company' (Scrap s) = company(location(s));

note 'Note' = DATA ISTRING (Scrap) CHARWIDTH 30;

// lines
CLASS ScrapLine 'Scrap line';

scrap 'Scrap' = DATA Scrap (ScrapLine) NONULL DELETE;

index 'â„–' = PARTITION SUM 1 ORDER ScrapLine l BY scrap(l) IN id MATERIALIZED CHARWIDTH 3;

product 'Product' = DATA Product (ScrapLine);
nameProduct 'Product' (ScrapLine l) = name(product(l));
idBarCodeProduct 'Barcode' (ScrapLine l) = idBarCode(product(l));
idProduct '{ID}' (ScrapLine l) = id(product(l));
referenceProduct 'Reference' (ScrapLine l) = reference(product(l));

uom (ScrapLine l) = uom(product(l));
nameUom 'UoM' (ScrapLine l) = name(uom(l));

quantity 'Qty' = DATA NUMERIC[16,3] (ScrapLine);

FORM scrap 'Scrap'
    OBJECTS s = Scrap PANEL 
    PROPERTIES(s) READONLYIF readonly(s) nameType, dateTime, number, nameLocation, note
    
    OBJECTS l = ScrapLine
    PROPERTIES(l) READONLYIF readonly(s)
                  index, nameProduct, nameUom, idBarCodeProduct, idProduct, referenceProduct, quantity, NEW, DELETE
    FILTERS scrap(l) = s
    
    EDIT Scrap OBJECT s
;

DESIGN scrap {
    caption = badged('Scrap', number(s) + '(' + dateTime(s) + ')');
    OBJECTS {
        PROPERTY(nameType(s)) { notNull = TRUE; }
        NEW details {
            fill = 1;
            tabbed = TRUE;
            NEW lines {
                caption = 'Lines';
                horizontal = TRUE;
                MOVE BOX(l) { caption = ''; }
                NEW linesTab {
                    fill = 0.3;
                    tabbed = TRUE;
                }    
            }
        }
    }
    TOOLBARBOX {
        NEW footer FIRST {
            horizontal = TRUE;
        }
    }
}

edit (ScrapLine l) + { SHOW scrap OBJECTS s = scrap(l), l = l DOCKED; }

FORM scraps 'Scraps'
    OBJECTS s = Scrap 
    PROPERTIES(s) READONLY number, dateTime, nameType, nameLocation, note
    PROPERTIES(s) NEWSESSION NEW, EDIT, DELETE
    
    LIST Scrap OBJECT s
;

DESIGN scraps {
    OBJECTS {
        NEW filters FIRST { 
            caption = 'Filters';
            horizontal = TRUE;
        }
    }
}

@defineDocHistory(scrap, s, product);
@defineDocHistoryLineProperty(scrap, ScrapLine, quantity, 'Qty', nameProduct);

@defineDocStatusForm(scrap, s);
@defineDocLinesCount(scrap, s);
@defineDocLocationAccess(scrap, s);
@defineDateFilterForm(scraps, s);

@defineObjectComments(scrap, s, details);

NAVIGATOR {
    operations {
        NEW scraps;
    }
}


// copy
copy 'Copy' (Scrap s) {
    NEWSESSION {
        NEW ns = Scrap {
            dateTime(ns) <- dateTime(s);
            location(ns) <- location(s);
            FOR scrap(ScrapLine l) = s INLINE NEW nl = ScrapLine DO {
                scrap(nl) <- ns;
                product(nl) <- product(l);
                quantity(nl) <- quantity(l);
            }
            SHOW scrap OBJECTS s = ns DOCKED;
        }
    }
}

EXTEND FORM scrap
    PROPERTIES(s) copy
;

DESIGN scrap {
    secondaryActions {
        MOVE PROPERTY(copy(s)) { valueClass = 'btn-secondary'; }
    }
}