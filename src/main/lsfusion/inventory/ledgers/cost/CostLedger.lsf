MODULE CostLedger;

REQUIRE Location, Product, Utils, CostProduct, ItemCost;

NAMESPACE Inventory;

CLASS CostLedger 'Cost ledger';
class 'Type' (CostLedger l) = objectClassName(l) IF l IS CostLedger CHARWIDTH 15;

type 'Type' = ABSTRACT ISTRING[100] (CostLedger) CHARWIDTH 20 MATERIALIZED;

number 'Number' = ABSTRACT STRING[50] (CostLedger) CHARWIDTH 10 MATERIALIZED;

// in
CLASS InCostLedger 'Cost ledger (income)' : CostLedger;

dateTime 'Time' = ABSTRACT DATETIME (InCostLedger) MATERIALIZED;

location 'Location' = ABSTRACT Location (InCostLedger) MATERIALIZED;

product 'Product' = ABSTRACT Product (InCostLedger) MATERIALIZED;

quantity '{Quantity}' = ABSTRACT NUMERIC[16,3] (InCostLedger) MATERIALIZED;

dataAmount 'Amount (primary)' = DATA NUMERIC[14,2] (InCostLedger);
calcAmount 'Amount (calculated)' = ABSTRACT NUMERIC[14,2] (InCostLedger);
amount '{Amount}' (InCostLedger l) = OVERRIDE dataAmount(l), calcAmount(l) MATERIALIZED;

price 'Price' (InCostLedger il) = amount(il) / quantity(il);

INDEX location(InCostLedger l), product(l), dateTime(l), l;

// out
CLASS OutCostLedger 'Cost ledger (outcome)' : CostLedger;

dateTime 'Time' = ABSTRACT DATETIME (OutCostLedger);

location 'Location' = ABSTRACT Location (OutCostLedger);

product 'Product' = ABSTRACT Product (OutCostLedger);

quantity '{Quantity}' = ABSTRACT NUMERIC[16,3] (OutCostLedger);

amount '{Amount}' = DATA NUMERIC[14,2] (OutCostLedger);

// cost
dateTime 'Time' (CostLedger l) = MULTI dateTime[InCostLedger](l), dateTime[OutCostLedger](l) MATERIALIZED;
date 'Date' (CostLedger l) = DATE(dateTime(l));

location 'Location' (CostLedger l) = MULTI location[InCostLedger](l), location[OutCostLedger](l) MATERIALIZED;
nameLocation 'Location' (CostLedger l) = name(location(l));

product 'Time' (CostLedger l) = MULTI product[InCostLedger](l), product[OutCostLedger](l) MATERIALIZED;
nameProduct 'Product' (CostLedger l) = name(product(l));

INDEX location(CostLedger l), product(l), dateTime(l), l;

signedQuantity '{Quantity}' (CostLedger l) = MULTI quantity[InCostLedger](l), -quantity[OutCostLedger](l) MATERIALIZED;
signedAmount '{Amount}' (CostLedger l) = MULTI amount[InCostLedger](l), -amount[OutCostLedger](l) MATERIALIZED;

negSignedQuantity '{Quantity}' (CostLedger l) = -signedQuantity(l);

price 'Price' (CostLedger l) = signedAmount(l) / signedQuantity(l);
price 'Price' (OutCostLedger ol) = amount(ol) / negSignedQuantity(ol);

countLedger (Location l, Product p) =
    GROUP SUM 1 IF location(CostLedger cl) = l AND product(cl) = p MATERIALIZED;
    
costQuantity '{Quantity}' (Location l, Product p) = 
    GROUP SUM signedQuantity(CostLedger cl) IF location(cl) = l AND product(cl) = p MATERIALIZED;
costAmount 'Cost' (Location l, Product p) = 
    GROUP SUM signedAmount(CostLedger cl) IF location(cl) = l AND product(cl) = p MATERIALIZED;
costPrice 'Unit cost' (Location l, Product p) = costAmount(l, p) / costQuantity(l, p);

costQuantity '{Quantity}' (Location l, Product p, DATETIME dt) = 
    costQuantity(l, p) (-) (GROUP SUM signedQuantity(CostLedger cl) IF location(cl) = l AND product(cl) = p AND dateTime(cl) >= dt);
costAmount 'Cost' (Location l, Product p, DATETIME dt) = 
    costAmount(l, p) (-) (GROUP SUM signedAmount(CostLedger cl) IF location(cl) = l AND product(cl) = p AND dateTime(cl) >= dt);
costPrice 'Unit cost' (Location l, Product p, DATETIME dt) = costAmount(l, p, dt) / costQuantity(l, p, dt);
prevCostPrice 'Unit cost' (Location l, Product p, DATETIME dt) = PREV(costPrice(l, p, dt));

costQuantity '{Quantity}' (Product p) = GROUP SUM costQuantity(Location l, p);
costAmount 'Cost' (Product p) = GROUP SUM costAmount(Location l, p);
costPrice 'Unit cost' (Product p) = costAmount(p) / costQuantity(p);

costQuantity '{Quantity}' (Product p, DATETIME dt) = GROUP SUM costQuantity(Location l, p, dt);
costAmount 'Cost' (Product p, DATETIME dt) = GROUP SUM costAmount(Location l, p, dt);
costPrice 'Unit cost' (Product p, DATETIME dt) = costAmount(p, dt) / costQuantity(p, dt);

overCost 'Cost' (Item i, DATETIME dt) = NUMERIC[14,2](OVERRIDE costPrice(i, dt), cost(i, DATE(dt)));

quantity 'Spent' = DATA NUMERIC[16,3] (OutCostLedger, InCostLedger);
costed 'Spent' (InCostLedger il) = GROUP SUM quantity(OutCostLedger ol, il) MATERIALIZED;
toCost (InCostLedger il) = OVERRIDE quantity(il) (-) costed(il), 0.0 IF il IS InCostLedger MATERIALIZED;

costed 'Spent' (OutCostLedger ol) = GROUP SUM quantity(ol, InCostLedger il) MATERIALIZED;

calcCost = DATA LOCAL NESTED BOOLEAN (CostLedger);

calculateCost () {
    // standard price
    amount (OutCostLedger ol) <- NUMERIC[14,2](negSignedQuantity(ol) * cost(product[CostLedger](ol), date(ol))) 
        WHERE calcCost(ol) AND costingMethod(product[CostLedger](ol)) = CostingMethod.standardPrice;

    dataAmount (InCostLedger il) <- NUMERIC[14,2](signedQuantity(il) * cost(product(il), date(il))) IF costingMethod(product(il)) = CostingMethod.standardPrice
        WHERE calcCost(il);

    // fifo / average
    quantity(OutCostLedger out, InCostLedger in) <- NULL WHERE calcCost(out);

    LOCAL ordered = INTEGER (OutCostLedger); 
    ordered(OutCostLedger ledger) <- PARTITION SUM 1 IF calcCost(ledger) 
                                               ORDER dateTime[CostLedger](ledger), ledger 
                                               BY product[CostLedger](ledger);

    FOR iterate(INTEGER i, 1, (GROUP MAX ordered(OutCostLedger ledger))) DO {
        LOCAL iterationN = BOOLEAN (OutCostLedger);
        iterationN(OutCostLedger l) <- ordered(l) = i AND signedQuantity(l) <= 0;
        
        quantity(OutCostLedger ol, InCostLedger il) <- (PARTITION UNGROUP negSignedQuantity
                                                                  LIMIT STRICT toCost(il) IF location[CostLedger](ol) = location(il) 
                                                                                     AND product[CostLedger](ol) = product(il)
                                                                                     AND iterationN(ol)
//                                                                                     AND dateTime(il) <= dateTime(ol) 
                                                                  ORDER dateTime(il), il
                                                                  BY ol)
                                                       WHERE iterationN(ol);

        LOCAL iterationP = BOOLEAN (OutCostLedger);
        iterationP(OutCostLedger l) <- ordered(l) = i AND signedQuantity(l) > 0;
        
        IF GROUP SUM 1 IF iterationP(OutCostLedger ol) THEN 
            quantity(OutCostLedger ol, InCostLedger il) <- -(PARTITION UNGROUP signedQuantity
                                                                       LIMIT STRICT toCost(il) IF location[CostLedger](ol) = location(il) 
                                                                                         AND product[CostLedger](ol) = product(il)
                                                                                         AND iterationP(ol)
    //                                                                                     AND dateTime(il) <= dateTime(ol)
                                                                       ORDER DESC dateTime(il), il
                                                                       BY ol)
                                                           WHERE iterationP(ol);

        IF GROUP SUM 1 IF (iterationN(OutCostLedger ol) OR iterationP(ol)) AND costingMethod(product[CostLedger](ol)) = CostingMethod.avco THEN { 
            amount (OutCostLedger ol) <- NUMERIC[14,2](negSignedQuantity(ol) * costPrice(location[CostLedger](ol), product[CostLedger](ol), dateTime[CostLedger](ol)))
                WHERE (iterationN(ol) OR iterationP(ol)) AND costingMethod(product[CostLedger](ol)) = CostingMethod.avco;
        }
    }

    IF GROUP SUM 1 IF calcCost(OutCostLedger ol) AND costingMethod(product[CostLedger](ol)) = CostingMethod.fifo THEN {
        amount (OutCostLedger ol) <- NUMERIC[14,2](GROUP SUM quantity(ol, InCostLedger il) * price(il))
            WHERE calcCost(ol) AND costingMethod(product[CostLedger](ol)) = CostingMethod.fifo;
    }
}

ON {
    calcCost (CostLedger l) <- CHANGED(location(l)) OR CHANGED(product(l)) OR CHANGED(signedQuantity(l));
    IF GROUP SUM 1 IF calcCost(CostLedger l) THEN 
        NEWSESSION SINGLE {
            calculateCost();
        }
}

FORM dialogCost 'Costing parameters'
    OBJECTS d = DATE PANEL
    PROPERTIES 'Date from which to recalculate' = VALUE(d)
;

toRecalculateCost = DATA LOCAL BOOLEAN (Location);
toRecalculateCost = DATA LOCAL BOOLEAN (Product);

recalculateCost 'Recalculate cost' (DATE d) {
    NEWSESSION NESTED (toRecalculateCost[Location], toRecalculateCost[Product]) {
        calcCost(CostLedger l) <- dateTime(l) >= DATETIME(d) AND
            (toRecalculateCost(location(l)) OR NOT GROUP SUM 1 IF toRecalculateCost(Location lc)) AND
            (toRecalculateCost(product(l)) OR NOT GROUP SUM 1 IF toRecalculateCost(Product p));
        calculateCost();
        APPLY;
    }
}

recalculateCost 'Recalculate cost' () {
    DIALOG dialogCost OBJECTS d INPUT DO {
        recalculateCost(d);
    }
}

recalculateCost 'Recalculate cost' (Location l, Product p) {
    toRecalculateCost(Location ll) <- ll = l;
    toRecalculateCost(Product pp) <- pp = p;
    DIALOG dialogCost OBJECTS d INPUT DO {
        recalculateCost(d);
    }
}