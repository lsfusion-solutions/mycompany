MODULE ReceiptImport;

REQUIRE ReceiptDone, InvLedger, ReceiptCost, ItemPurchase;

NAMESPACE Inventory;

receiptExport 'Экспорт остатков' () {
    LOCAL f = EXCELFILE ();
    
    IF GROUP SUM 1 IF onHand(Location l, Product p) THEN
        EXPORT XLSX HEADER FROM 'Код места хранения' = id(Location l), 'Код продукта' = id(Product p), 
                                'Кол-во' = onHand(l, p), 'Себестоимость' = costSum(l,p) WHERE onHand(l, p) TO f;   
    ELSE 
        EXPORT XLSX HEADER FROM 'Код места хранения' = '111', 'Код продукта' = '222', 
                                'Кол-во' = '1', 'Себестоимость' = 1.43 TO f;
    open(f());
}

receiptImport 'Импорт остатков' () {
    LOCAL idLocation = STRING[50] (INTEGER);
    LOCAL idProduct = ISTRING[50] (INTEGER);
    LOCAL quantity = NUMERIC[16,3] (INTEGER);
    LOCAL cost = NUMERIC[14,2] (INTEGER);
    
    INPUT f = EXCELFILE DO {
        NEWSESSION {
            IMPORT XLS HEADER FROM f TO idLocation = A, idProduct = B, quantity = C, cost = D;
            
            FOR [GROUP SUM 1 BY idLocation(INTEGER i)](num) AND NOT location[STRING](num) DO {
                MESSAGE 'Отсутствует место хранения в базе данных с кодом ' + num + '. Импорт отменен';
                RETURN;
            }
            
            FOR [GROUP SUM 1 BY idProduct(INTEGER i)](num) AND NOT item[STRING](num) DO {
                MESSAGE 'Отсутствует товар в базе данных с кодом ' + num + '. Импорт отменен';
                RETURN;
            }
            
            IF NOT (GROUP SUM 1 IF ReceiptType t AND t IS ReceiptType) THEN {
                MESSAGE 'Отсутствуют типы поступлений в базе данных. Импорт отменен';
                RETURN;
            }
            
            FOR [GROUP SUM 1 BY idLocation(INTEGER i)](num) AND NOT receipt('INIT_' + num) DO NEW nr = Receipt {
                number(nr) <- 'INIT_' + num;
            }
            
            FOR INTEGER i = [GROUP MIN INTEGER ii BY idLocation(ii)](num) AND number(Receipt r) = 'INIT_' + num DO {
                scheduledDateTime(r) <- currentDateTime();
                location(r) <- location(idLocation(i));
                type(r) <- receiptType('initial');
                done(r) <- TRUE;
            }
            
            FOR idProduct(INTEGER i) DO NEW l = ReceiptLine {
                receipt(l) <- receipt('INIT_' + idLocation(i));
                product(l) <- item(idProduct(i));
                initialDemand(l) <- quantity(i);
                done(l) <- quantity(i);
                dataCost(l) <- cost(i);
            }
                        
            APPLY;
            MESSAGE 'Импорт завершен';
        }
    }
}

EXTEND FORM MasterData.options 
    PROPERTIES receiptImport(), receiptExport()
;

DESIGN MasterData.options {
    import {
        NEW receipt {
            type = CONTAINERH;
            caption = 'Остатки';
            MOVE PROPERTY(receiptImport());
            MOVE PROPERTY(receiptExport());
        }
    }
}


