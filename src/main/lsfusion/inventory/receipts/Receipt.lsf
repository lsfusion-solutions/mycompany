MODULE Receipt;

REQUIRE System, Time, DateUtils, FileUtils,
        InventorySettings, Location, Partner, Product, LocationEmployee,
        ReceiptType, ItemPurchase, PartnerPurchase, BarCode, Doc, ResLedger;

NAMESPACE Inventory;

CLASS Receipt 'Receipt';

@defineDocStatus(receipt, 'Receipt status');

immediate 'Unplanned' = DATA BOOLEAN (Receipt);

// type
type 'Type' = DATA ReceiptType (Receipt) NONULL;
nameType 'Type' (Receipt r) = name(type(r));

WHEN LOCAL SET(Receipt r IS Receipt) AND NOT CHANGED(type(r)) DO type(r) <- defaultReceiptType(); 

scheduledDateTime 'Scheduled date' = DATA DATETIME (Receipt) NONULL IN id;
scheduledDateTime(Receipt r) <- currentDateTime() WHEN (r IS Receipt); 
@defineDateTimeAggregation(Receipt, scheduled, 'Scheduled ');

@defineNumberType(receipt);

numberDate 'Description' (Receipt r) = number(r) + ' (' + scheduledDateTime(r) + ')' IN id;

// location
location 'Location' = DATA Location (Receipt) NONULL INDEXED;
nameLocation 'Location' (Receipt r) = name(location(r));
WHEN LOCAL SETCHANGED(type(Receipt r)) AND defaultLocation(type(r)) AND NOT CHANGED(location(r)) DO location(r) <- defaultLocation(type(r));
CONSTRAINT SETCHANGED(location(Receipt o)) AND internalUse(location(o)) CHECKED BY location[Receipt]
    MESSAGE 'The selected location is for internal use';

company 'Company' (Receipt r) = company(location(r));

// partner
vendor = DATA Partner (Receipt) INDEXED;
nameVendor 'Vendor' (Receipt r) = name(vendor(r));

isVendor = ABSTRACT VALUE BOOLEAN (Receipt);
isVendor(Receipt r) += isVendor(vendor(r));
CONSTRAINT vendor(Receipt r) AND NOT isVendor(r) 
                CHECKED BY vendor[Receipt]
                MESSAGE 'The partner must be a vendor';

vendorReference 'Vendor reference' = DATA STRING[30] (Receipt) INDEXED;
note 'Note' = DATA ISTRING (Receipt) CHARWIDTH 20;

// lines
CLASS ReceiptLine 'Receipt line';

receipt 'Document' = DATA Receipt (ReceiptLine) NONULL DELETE INDEXED;

countLines 'Number of lines' (Receipt r) = GROUP SUM 1 IF receipt(ReceiptLine l) = r MATERIALIZED;
index 'â„–' = PARTITION SUM 1 ORDER ReceiptLine l BY receipt(l) IN id MATERIALIZED CHARWIDTH 3;

product 'Product' = DATA Product (ReceiptLine) NONULL INDEXED;
nameProduct 'Product' (ReceiptLine l) = name(product(l)) IN id;
idBarCodeProduct 'Barcode' (ReceiptLine l) = idBarCode(product(l));
idProduct '{ID}' (ReceiptLine l) = id(product(l));
referenceProduct 'Reference' (ReceiptLine l) = reference(product(l));

nameCategoryProduct 'Category' (ReceiptLine l) = nameCategory(product(l));
level1Product 'Category 1' (ReceiptLine l) = level1(product(l));
level2Product 'Category 2' (ReceiptLine l) = level2(product(l));
level3Product 'Category 3' (ReceiptLine l) = level3(product(l));
level4Product 'Category 4' (ReceiptLine l) = level4(product(l));

CONSTRAINT product(ReceiptLine l) AND NOT canBePurchased(product(l))
            CHECKED BY product[ReceiptLine]
            MESSAGE 'The product is not intended for purchase';

@defineDocSingleLineForItem(receipt, product);

uom (ReceiptLine l) = uom(product(l));
nameUom 'UoM' (ReceiptLine l) = name(uom(l));

initialDemand 'Initial demand' = DATA NUMERIC[16,3] (ReceiptLine);

CONSTRAINT initialDemand(ReceiptLine l) < 0 OR initialDemand(l) > maxQuantity(type(receipt(l))) AND maxQuantity(type(receipt(l))) 
    MESSAGE 'The initial demand should be between 0 and the maximum allowed';

initialDemand 'Initial demand' (Receipt r) = GROUP SUM initialDemand(ReceiptLine l) IF receipt(l) = r MATERIALIZED;

// Line properties
type 'Type' (ReceiptLine l) = type(receipt(l));
imagedNameStatus 'Status' (ReceiptLine l) = imagedNameStatus(receipt(l));
number 'Number' (ReceiptLine l) = number(receipt(l)) IN id;
numberDate 'Description' (ReceiptLine l) = numberDate(receipt(l));
scheduledDateTime 'Scheduled date' (ReceiptLine l) = scheduledDateTime(receipt(l)) IN id;
vendor (ReceiptLine l) = vendor(receipt(l));
nameVendor 'Vendor' (ReceiptLine l) = nameVendor(receipt(l));
nameLocation 'Location' (ReceiptLine l) = nameLocation(receipt(l));

FORM receiptLines 'Receipt lines'
    OBJECTS l = ReceiptLine
    PROPERTIES(l) READONLY scheduledDateTime, number, index, nameProduct

    LIST ReceiptLine OBJECT l
;

FORM receipt 'Receipt'
    OBJECTS r = Receipt PANEL
    PROPERTIES(r) READONLYIF readonly(r)
                  nameType, scheduledDateTime, number, 
                  nameVendor, nameLocation,
                  vendorReference, note

    OBJECTS l = ReceiptLine
    PROPERTIES(l) READONLYIF readonly(r)
                  index READONLY, nameProduct, nameUom, idBarCodeProduct, idProduct, referenceProduct,
                  initialDemand SHOWIF NOT immediate(r) BACKGROUND IF status(receipt(l)) = ReceiptStatus.draft THEN RGB(198,230,247),
                  NEW, DELETE        
    FILTERS receipt(l) = r
   
    EDIT Receipt OBJECT r
;

DESIGN receipt {
    caption = badged('Receipt', number(r) + '(' + scheduledDateTime(r) + ')');
    OBJECTS {       
        NEW header {
            NEW headerCenter {
                alignment = STRETCH;
                horizontal = TRUE;
                NEW headerLeft {
                    MOVE PROPERTY(nameType(r)) { notNull = TRUE; }
                    MOVE PROPERTY(scheduledDateTime(r));
                    MOVE PROPERTY(number(r));
                }
                NEW headerRight {
                    MOVE PROPERTY(nameVendor(r));
                    MOVE PROPERTY(nameLocation(r)) { notNull = TRUE; }
                    MOVE PROPERTY(vendorReference(r));
                }
            }
            NEW headerBottom {
                alignment = STRETCH;
                MOVE PROPERTY(note(r));           
            }
        }
        NEW details {
            fill = 5;
            tabbed = TRUE;
            NEW lines {
                caption = 'Lines';
                horizontal = TRUE;
                MOVE BOX(l) {
                    caption = '';
                    PROPERTY(nameProduct(l)) { notNull = TRUE; }
                    PROPERTY(initialDemand(l)) { notNull = TRUE; }
                }
                NEW linesTab {
                    fill = 0.3;
                    tabbed = TRUE;
                }
            }                  
        }
    }
    TOOLBARBOX {
        NEW footer FIRST {
            horizontal = TRUE;
        }
    }
}

edit (ReceiptLine l) + { SHOW receipt OBJECTS r = receipt(l), l = l DOCKED; }

// receipts
background = ABSTRACT CASE COLOR (Receipt);

FORM receipts 'Receipts'
    OBJECTS r = Receipt BACKGROUND background(r)
    PROPERTIES(r) READONLYIF isReadonly()
                           number, scheduledDateTime, nameVendor,
                           nameType, 
                           nameLocation,
                           vendorReference, note, countLines
    PROPERTIES(r) NEWSESSION NEW, EDIT, DELETE
;

@extendFormEditable(receipts);

@defineDocHistory(receipt, r, product, scheduledDateTime);
@defineDocHistoryLineProperty(receipt, ReceiptLine, initialDemand, 'Initial demand', nameProduct);

@defineDocObjectsForm(receipts, r, 'Receipts');
@defineDocStatusForm(receipt, r);
@defineDocLocationAccess(receipt, r);

@defineObjectComments(receipt, r, details);

@defineObjectFiles(receipt, r, 'Receipt file');

NAVIGATOR {
    operations {
        NEW receipts;
    }
}

// immediate
immediateReceipt 'Immediate receipt' () {
    NEWSESSION {
        NEW r = Receipt {
            immediate(r) <- TRUE;
            DIALOG receipt OBJECTS r = r DOCKED DO seek(r);
        }
    }
} IMAGE 'add.png';

EXTEND FORM receipts 
    PROPERTIES immediateReceipt() DRAW r TOOLBAR
;

// copy
clone(Receipt to, Receipt from) {
    type(to) <- type(from);
    location(to) <- location(from);
    vendor(to) <- vendor(from);
    note(to) <- note(from);
    immediate(to) <- immediate(from);
    FOR receipt(ReceiptLine l) = from INLINE NEW nl = ReceiptLine DO {
        receipt(nl) <- to;
        product(nl) <- product(l);
        initialDemand(nl) <- initialDemand(l);
    }
}

copy 'Copy' (Receipt from) { 
    NEWSESSION {
        NEW to = Receipt {
            clone(to, from);
            SHOW receipt OBJECTS r = to DOCKED;
        }
    }
}

EXTEND FORM receipt
    PROPERTIES(r) copy 
;

DESIGN receipt {
    secondaryActions {
        MOVE PROPERTY(copy(r)) { valueClass = 'btn-secondary'; }
    }
}
