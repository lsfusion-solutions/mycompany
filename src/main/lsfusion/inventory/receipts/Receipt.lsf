MODULE Receipt;

REQUIRE System, Time,
        InventorySettings, Location, Partner, Product,
        ReceiptType, ItemPurchase, PartnerPurchase, BarCode, Doc, ResLedger;

NAMESPACE Inventory;

CLASS Receipt 'Поступление';

@defineStatus(receipt, 'поступления');

immediate 'Незапланированное' = DATA BOOLEAN (Receipt);

// type
type 'Тип' = DATA ReceiptType (Receipt) NONULL;
nameType 'Тип' (Receipt r) = name(type(r));

WHEN LOCAL SET(Receipt r IS Receipt) AND NOT CHANGED(type(r)) DO type(r) <- defaultReceiptType(); 

scheduledDateTime 'Планируемая дата' = DATA DATETIME (Receipt) NONULL IN id;
scheduledDateTime(Receipt r) <- currentDateTime() WHEN (r IS Receipt); 

@defineNumberType(receipt);
receipt (STRING[31] number) = GROUP LAST Receipt r BY number(r);

numberDate 'Описание' (Receipt r) = number(r) + ' от ' + scheduledDateTime(r) IN id;

// location
location 'Место хранения' = DATA Location (Receipt) NONULL INDEXED;
nameLocation 'Место хранения' (Receipt r) = name(location(r));
WHEN LOCAL SETCHANGED(type(Receipt r)) AND defaultLocation(type(r)) AND NOT CHANGED(location(r)) DO location(r) <- defaultLocation(type(r));

// partner
vendor = DATA Partner (Receipt) INDEXED;
nameVendor 'Поставщик' (Receipt r) = name(vendor(r));

CONSTRAINT vendor(Receipt r) AND NOT isVendor(vendor(r)) 
                CHECKED BY vendor[Receipt]
                MESSAGE 'Контрагент должен быть поставщиком';

note 'Примечание' = DATA ISTRING[50] (Receipt);

// lines
CLASS ReceiptLine 'Строка поступления';

receipt 'Документ' = DATA Receipt (ReceiptLine) NONULL DELETE INDEXED;

countLines 'Кол-во строк' (Receipt r) = GROUP SUM 1 IF receipt(ReceiptLine l) = r MATERIALIZED;
index '№' = PARTITION SUM 1 ORDER ReceiptLine l BY receipt(l) IN id MATERIALIZED CHARWIDTH 3;

product 'Товар' = DATA Product (ReceiptLine) NONULL INDEXED;
nameProduct 'Товар' (ReceiptLine l) = name(product(l)) IN id;
idBarCodeProduct 'Штрихкод' (ReceiptLine l) = idBarCode(product(l));
idProduct 'Код' (ReceiptLine l) = id(product(l));

CONSTRAINT product(ReceiptLine l) AND NOT canBePurchased(product(l))
            CHECKED BY product[ReceiptLine]
            MESSAGE 'Товар не предназначен для закупки';

uom = DATA Uom (ReceiptLine);
nameUom 'Ед. изм.' (ReceiptLine l) = name(uom(l));
WHEN LOCAL CHANGED(product(ReceiptLine l)) DO uom(l) <- uom(product(l)); 

initialDemand 'Планируемое количество' = DATA NUMERIC[16,3] (ReceiptLine);

CONSTRAINT initialDemand(ReceiptLine l) < 0 OR initialDemand(l) > maxQuantity(type(receipt(l))) AND maxQuantity(type(receipt(l))) 
    MESSAGE 'Планируемое количество должно быть от 0 до максимально разрешенного';
    
// Line properties
nameStatus 'Статус' (ReceiptLine l) = nameStatus(receipt(l));
number 'Номер' (ReceiptLine l) = number(receipt(l));
scheduledDateTime 'Планируемая дата' (ReceiptLine l) = scheduledDateTime(receipt(l));
vendor (ReceiptLine l) = vendor(receipt(l));
nameVendor 'Поставщик' (ReceiptLine l) = nameVendor(receipt(l));
nameLocation 'Место хранения' (ReceiptLine l) = nameLocation(receipt(l));

edit (ReceiptLine l) + { edit(receipt(l)); } 
           
FORM receipt 'Поступление'
    OBJECTS r = Receipt PANEL
    PROPERTIES(r) nameType, scheduledDateTime, number, 
                  nameVendor, nameLocation,
                  note

    OBJECTS l = ReceiptLine
    PROPERTIES(l) index READONLY, nameProduct, nameUom, idBarCodeProduct, idProduct,
                  initialDemand SHOWIF NOT immediate(r) BACKGROUND IF isDraft(receipt(l)) THEN RGB(198,230,247)
    PROPERTIES(l) NEW, DELETE        
    FILTERS receipt(l) = r
   
    EDIT Receipt OBJECT r
;

DESIGN receipt {
    OBJECTS {       
        NEW header {
            NEW headerCenter {
                alignment = STRETCH;
                type = CONTAINERH;
                NEW headerLeft {
                    MOVE PROPERTY(nameType(r)) { notNull = TRUE; }
                    MOVE PROPERTY(scheduledDateTime(r));
                    MOVE PROPERTY(number(r));
                }
                NEW headerRight {
                    MOVE PROPERTY(nameVendor(r));
                    MOVE PROPERTY(nameLocation(r)) { notNull = TRUE; }           
                }
            }
            NEW headerBottom {
                alignment = STRETCH;
                MOVE PROPERTY(note(r));           
            }
        }
        NEW details {
            fill = 5;
            type = TABBED;
            NEW lines {
                caption = 'Строки';
                MOVE BOX(l) {
                    PROPERTY(nameProduct(l)) { notNull = TRUE; }
                    PROPERTY(initialDemand(l)) { notNull = TRUE; }
                }
            }                  
        }
    }
    TOOLBARBOX {
        NEW footer FIRST {
            type = CONTAINERH;
        }
    }
}

@defineDocHistory(receipt, r, product, initialDemand);

// receipts
FORM receipts 'Поступления'
    OBJECTS r = Receipt
    PROPERTIES(r) READONLY nameType, scheduledDateTime, number, 
                           nameVendor, nameLocation,
                           note, countLines
    PROPERTIES(r) NEWSESSION NEW, EDIT, DELETE
;

@defineStatusForm(receipt, r);

NAVIGATOR {
    operations {
        NEW receipts;
    }
}

// immediate
immediateReceipt 'Незапланированное поступление' () {
    NEWSESSION {
        NEW r = Receipt {
            immediate(r) <- TRUE;
            SHOW receipt OBJECTS r = r DOCKED;
        }
    }
} IMAGE 'add.png';

EXTEND FORM receipts 
    PROPERTIES immediateReceipt() DRAW r TOOLBAR
;

// copy
copy 'Копировать' (Receipt r) { 
    NEWSESSION {
        NEW nr = Receipt {
            type(nr) <- type(r);
            location(nr) <- location(r);
            vendor(nr) <- vendor(r);
            note(nr) <- note(r);
            immediate(nr) <- immediate(r);
            FOR receipt(ReceiptLine l) = r INLINE NEW nl = ReceiptLine DO {
                receipt(nl) <- nr;
                product(nl) <- product(l);
                initialDemand(nl) <- initialDemand(l);
            }
            SHOW receipt OBJECTS r = nr DOCKED;
        }
    }
}

EXTEND FORM receipt
    PROPERTIES(r) copy 
;

DESIGN receipt {
    secondaryActions {
        MOVE PROPERTY(copy(r));
    }
}
