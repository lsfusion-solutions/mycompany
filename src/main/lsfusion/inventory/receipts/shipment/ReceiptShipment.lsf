MODULE ReceiptShipment;

REQUIRE ReceiptCanceled, ShipmentCanceled;

NAMESPACE Inventory;

// types
isReturn 'Return' = DATA BOOLEAN (ShipmentType);
EXTEND FORM shipmentType PROPERTIES(o) isReturn;

isReturn (Shipment s) = isReturn(type(s));
isCustomer(Shipment s) += isReturn(s) AND isVendor(customer(s));

shipmentType = DATA ShipmentType (ReceiptType);
nameShipmentType 'Return type' (ReceiptType t) = name(shipmentType(t));
EXTEND FORM receiptType PROPERTIES(o) nameShipmentType;

// line
@defineDocLineRelation (receipt, shipment, 'Receipt', 'Shipment', r, s);

CONSTRAINT receiptLine(ShipmentLine l) AND NOT 
                (vendor(receiptLine(l)) = customer(l) AND 
                 product(receiptLine(l)) = product(l))
    CHECKED BY receiptLine
    MESSAGE 'The partner and the goods received must match the partner and the returned goods';
    
EXTEND FORM shipment
    PROPERTIES(l) READONLYIF readonly(s) numberDateReceiptLine SHOWIF isReturn(s)
;

// Shipment
return 'Return' (Receipt r) {    
    NEWSESSION {
        NEW ns = Shipment {
            type(ns) <- shipmentType(type(r));
        
            location(ns) <- location(r);
            customer(ns) <- vendor(r);
            FOR receipt(ReceiptLine l) = r INLINE NEW nl = ShipmentLine DO {
                receiptLine(nl) <- l;
                shipment(nl) <- ns;
                product(nl) <- product(l);
                initialDemand(nl) <- done(l);
            }
            SHOW shipment OBJECTS s = ns DOCKED;
        }
    }
}

EXTEND FORM receipt
    PROPERTIES(r) return SHOWIF active(r)
;

DESIGN receipt {
    secondaryActions {
        MOVE PROPERTY(return(r)) { valueClass = 'btn-warning'; }
    }             
}

// auto set
WHEN LOCAL (SETCHANGED(product(ShipmentLine l)) OR SETCHANGED(customer(l))) AND isReturn(shipment(l)) AND product(l) AND customer(l) DO {
    receiptLine(l) <- GROUP LAST ReceiptLine rl IF 
                                    vendor(rl) = customer(l) AND 
                                    product(rl) = product(l) AND 
                                    active(receipt(rl)) 
                             ORDER executionDateTime(receipt(rl)), rl;
}

// returned quantity
checkReturnedQuantity 'Check returned quantity' = DATA BOOLEAN (ReceiptType);
EXTEND FORM receiptType PROPERTIES(o) checkReturnedQuantity;

returned 'Returned' (ReceiptLine rl) = 
    GROUP SUM done(ShipmentLine sl) IF receiptLine(sl) = rl AND active(shipment(sl));

CONSTRAINT SET(returned(ReceiptLine rl) > OVERRIDE done(rl), 0.0) AND checkReturnedQuantity(type(rl))
    MESSAGE 'The returned quantity on the receipt line exceeds the original quantity';

FORM receiptShipmentShow 'Refunds'
    OBJECTS rl = ReceiptLine

    OBJECTS sl = ShipmentLine
    PROPERTIES(sl) READONLY number, executionDateTime, imagedNameStatus, done
    FILTERS receiptLine(sl) = rl,
            active(shipment(sl))
;

EXTEND FORM receipt
    PROPERTIES(l) returned ON CHANGE { SHOW receiptShipmentShow OBJECTS rl = l; } SHOWIF countShipmentLine(r)
;