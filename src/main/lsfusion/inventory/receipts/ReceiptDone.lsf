MODULE ReceiptDone;

REQUIRE ReceiptReady;

NAMESPACE Inventory;

EXTEND CLASS ReceiptStatus {
    done 'Done'
}
done 'Done' = DATA BOOLEAN (Receipt);

status (Receipt r) += WHEN done(r) THEN ReceiptStatus.done;

executionDateTime 'Execution Date' = DATA DATETIME (Receipt);
WHEN SET(done(Receipt r)) AND NOT CHANGED(executionDateTime(r)) DO executionDateTime(r) <- currentDateTime();
@defineDateTimeAggregation(Receipt, execution, 'Execution ');

executionDate 'Execution Date' (ReceiptLine l) = executionDate(receipt(l));
executionDateTime 'Execution Date' (ReceiptLine l) = executionDateTime(receipt(l));

doNotCheckDone 'Do not check received quantity' = DATA BOOLEAN (ReceiptType);
EXTEND FORM receiptType PROPERTIES(o) doNotCheckDone;

done '{Received}' = DATA NUMERIC[16,3] (ReceiptLine);

CONSTRAINT (done(ReceiptLine l) < 0 OR done(l) > initialDemand(l)) AND NOT doNotCheckDone(type(l)) 
    MESSAGE 'Received quantity must be between 0 and initial demand';

setDone 'Fill done' (Receipt r) {
    done(ReceiptLine l) <- initialDemand(l) WHERE receipt(l) = r;    
}

validate 'Mark as Done' (Receipt r) {        
    APPLY;
    IF canceled() THEN RETURN;
        
    NEWSESSION {
        IF NOT immediate(r) THEN {
            IF NOT GROUP SUM 1 IF done(ReceiptLine l) AND receipt(l) = r THEN
                ASK 'Done quantities not filled' + ' ' + number(r) + '.' + 'Fill quantities with initial demand ?' DO {
                    done(ReceiptLine l) <- initialDemand(l) WHERE receipt(l) = r;
                } ELSE RETURN;
        }
        
        done(r) <- TRUE;
        APPLY;
    }
}

toValidate (Receipt r) = status(r) = ReceiptStatus.ready OR (immediate(r) AND status(r) = ReceiptStatus.draft);

EXTEND FORM receipt
    PROPERTIES(r) validate SHOWIF toValidate(r), 
                  done,
                  setDone DRAW l TOOLBAR SHOWIF status(r) = ReceiptStatus.ready DISABLEIF readonly(r),
                  executionDateTime SHOWIF done(r) READONLYIF readonly(r)
    
    PROPERTIES(l) READONLYIF readonly(r) done BACKGROUND RGB(198,230,247) IF toValidate(r)
;

DESIGN receipt {
    primaryActions {
        MOVE PROPERTY(validate(r)) { valueClass = 'btn-primary'; }
    }
    statusGroup {
        MOVE PROPERTY(done(r))  {
            valueClass = 'btn-check';
            captionClass = 'btn btn-outline-primary btn-arrow-right';
        }                              
    } 
    headerLeft {
        MOVE PROPERTY(executionDateTime(r));
    }                  
}

@defineHistoryProperty(receipt, executionDateTime, 'Execution Date');
@defineDocHistoryLineProperty(receipt, ReceiptLine, done, '{Received}', nameProduct);

EXTEND FORM receipts 
    PROPERTIES(r) READONLYIF isReadonly() executionDateTime AFTER scheduledDateTime(r)

    EXTEND FILTERGROUP status
        FILTER 'Done' status(r) = ReceiptStatus.done
;

@defineSelectionAction(receipts, Receipt, validate, 'Mark as Done', statuses);