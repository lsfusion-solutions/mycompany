MODULE Shipment;

REQUIRE System, Time,
        InventorySettings, Location, Partner, Product,
        ShipmentType, ItemSales, PartnerSales, BarCode, Doc, ResLedger;

NAMESPACE Inventory;

CLASS Shipment 'Отгрузка';

@defineStatus(shipment, 'отгрузки');

immediate 'Незапланированная' = DATA BOOLEAN (Shipment);

// type
type 'Тип' = DATA ShipmentType (Shipment) NONULL;
nameType 'Тип' (Shipment s) = name(type(s));

WHEN LOCAL SET(Shipment s IS Shipment) AND NOT CHANGED(type(s)) DO type(s) <- defaultShipmentType(); 

scheduledDateTime 'Планируемая дата' = DATA DATETIME (Shipment) NONULL IN id;
scheduledDateTime(Shipment s) <- currentDateTime() WHEN SET(s IS Shipment);

@defineNumberType(shipment);

numberDate 'Описание' (Shipment s) = number(s) + ' от ' + scheduledDateTime(s) IN id;

// locations
location 'Место хранения (откуда)' = DATA Location (Shipment) NONULL INDEXED;
nameLocation 'Место хранения (откуда)' (Shipment s) = name(location(s));
WHEN LOCAL SETCHANGED(type(Shipment s)) AND defaultLocation(type(s)) AND NOT CHANGED(location(s)) DO location(s) <- defaultLocation(type(s));  

toLocation 'Место хранения (куда)' = DATA Location (Shipment);
nameToLocation 'Место хранения (куда)' (Shipment s) = name(toLocation(s));
WHEN LOCAL SETCHANGED(type(Shipment s)) AND defaultToLocation(type(s)) AND NOT CHANGED(toLocation(s)) DO toLocation(s) <- defaultToLocation(type(s));  

CONSTRAINT location(Shipment s) = toLocation(s)
    CHECKED BY toLocation[Shipment]
    MESSAGE 'Места хранения откуда и куда не могут совпадать';

// transfer
WHEN SETCHANGED(type(Shipment s)) AND NOT isTransfer(type(s)) DO toLocation(s) <- NULL;
CONSTRAINT isTransfer(type(Shipment s)) AND NOT toLocation(s) MESSAGE 'Не задано место хранение (куда) для трансфера';

// customer
customer = DATA Partner (Shipment) INDEXED;
nameCustomer 'Покупатель' (Shipment s) = name(customer(s));

CONSTRAINT customer(Shipment s) AND NOT isCustomer(customer(s)) 
                CHECKED BY customer[Shipment]
                MESSAGE 'Контрагент должен быть покупателем';

note 'Примечание' = DATA ISTRING[50] (Shipment);

// lines
CLASS ShipmentLine 'Строка отгрузки';

shipment 'Документ' = DATA Shipment (ShipmentLine) NONULL DELETE INDEXED IN id;

countLines 'Кол-во строк' (Shipment s) = GROUP SUM 1 IF shipment(ShipmentLine l) = s MATERIALIZED;
index '№' = PARTITION SUM 1 ORDER ShipmentLine l BY shipment(l) IN id MATERIALIZED CHARWIDTH 3;

product 'Товар' = DATA Product (ShipmentLine) NONULL INDEXED;
nameProduct 'Товар' (ShipmentLine l) = name(product(l)) IN id;
idBarCodeProduct 'Штрихкод' (ShipmentLine l) = idBarCode(product(l));
idProduct 'Код' (ShipmentLine l) = id(product(l));

CONSTRAINT product(ShipmentLine l) AND NOT canBeSold(product(l))
            CHECKED BY product[ShipmentLine] 
            MESSAGE 'Товар не предназначен для продажи';

uom = DATA Uom (ShipmentLine);
nameUom 'Ед. изм.' (ShipmentLine l) = name(uom(l));
WHEN LOCAL CHANGED(product(ShipmentLine l)) DO uom(l) <- uom(product(l)); 

initialDemand 'Планируемое количество' = DATA NUMERIC[16,3] (ShipmentLine);

CONSTRAINT initialDemand(ShipmentLine l) < 0 OR initialDemand(l) > maxQuantity(type(shipment(l))) AND maxQuantity(type(shipment(l))) 
    MESSAGE 'Исходное количество должно быть от 0 до максимально разрешенного';

// line properties
nameStatus 'Статус' (ShipmentLine l) = nameStatus(shipment(l));
scheduledDateTime 'Планируемая дата' (ShipmentLine l) = scheduledDateTime(shipment(l));
number 'Номер' (ShipmentLine l) = number(shipment(l));
numberDate 'Описание' (ShipmentLine l) = numberDate(shipment(l));
customer (ShipmentLine l) = customer(shipment(l));
nameCustomer 'Покупатель' (ShipmentLine l) = nameCustomer(shipment(l));
nameLocation 'Место хранения' (ShipmentLine l) = nameLocation(shipment(l));

FORM shipmentLines 'Строки отгрузки'
    OBJECTS l = ShipmentLine
    PROPERTIES(l) READONLY scheduledDateTime, number, index, nameProduct

    LIST ShipmentLine OBJECT l
;

edit (ShipmentLine l) + { edit(shipment(l)); } 

FORM shipment 'Отгрузка'
    OBJECTS s = Shipment PANEL 
    PROPERTIES(s) nameType, scheduledDateTime, number, 
                  nameCustomer SHOWIF NOT isTransfer(type(s)), nameLocation, nameToLocation SHOWIF isTransfer(type(s)), 
                  note
                  
    OBJECTS l = ShipmentLine
    PROPERTIES(l) index READONLY, nameProduct, nameUom, idBarCodeProduct, idProduct, 
                  initialDemand SHOWIF NOT immediate(s) BACKGROUND IF isDraft(shipment(l)) THEN RGB(198,230,247) 
    PROPERTIES(l) NEW, DELETE
    FILTERS shipment(l) = s
             
    EDIT Shipment OBJECT s
;

DESIGN shipment {
    OBJECTS {       
        NEW header {
            NEW headerCenter {
                alignment = STRETCH;
                type = CONTAINERH;
                NEW headerLeft {
                    MOVE PROPERTY(nameType(s)) { notNull = TRUE; }
                    MOVE PROPERTY(scheduledDateTime(s));
                    MOVE PROPERTY(number(s));
                }
                NEW headerRight {
                    MOVE PROPERTY(nameCustomer(s));
                    MOVE PROPERTY(nameLocation(s)) { notNull = TRUE; }           
                    MOVE PROPERTY(nameToLocation(s)) { notNull = TRUE; }           
                }
            }
            NEW headerBottom {
                alignment = STRETCH;
                MOVE PROPERTY(note(s));           
            }
        }
        NEW details {
            fill = 5;
            type = TABBED;
            NEW lines {
                caption = 'Строки';
                MOVE BOX(l) {
                    PROPERTY(nameProduct(l)) { notNull = TRUE; }
                    PROPERTY(initialDemand(l)) { notNull = TRUE; }
                }
            }                  
        }
    }
    TOOLBARBOX {
        NEW footer FIRST {
            type = CONTAINERH;
        }
    }
}

@defineDocHistory(shipment, s, product, initialDemand);

// shipments
FORM shipments 'Отгрузки'
    OBJECTS s = Shipment
    PROPERTIES(s) READONLY nameType, scheduledDateTime, number, 
                           nameCustomer, nameLocation, nameToLocation,
                           note, countLines
    PROPERTIES(s) NEWSESSION NEW, EDIT, DELETE
;

@defineStatusForm(shipment, s);

NAVIGATOR {
    operations {
        NEW shipments;
    }
}

// immediate
immediateShipment 'Незапланированная отгрузка' () {
    NEWSESSION {
        NEW s = Shipment {
            immediate(s) <- TRUE;
            SHOW shipment OBJECTS s = s DOCKED;
        }
    }
} IMAGE 'add.png';

EXTEND FORM shipments 
    PROPERTIES immediateShipment() DRAW s TOOLBAR
;

// copy
copy 'Копировать' (Shipment s)  { 
    NEWSESSION {
        NEW ns = Shipment {
            type(ns) <- type(s);
            location(ns) <- location(s);
            toLocation(ns) <- toLocation(s);
            note(ns) <- note(s);
            immediate(ns) <- immediate(s);
            FOR shipment(ShipmentLine l) = s INLINE NEW nl = ShipmentLine DO {
                shipment(nl) <- ns;
                product(nl) <- product(l);
                initialDemand(nl) <- initialDemand(l);
            }
            SHOW shipment OBJECTS s = ns DOCKED;
        }
    }
}

EXTEND FORM shipment
    PROPERTIES(s) copy
;

DESIGN shipment {
    secondaryActions {
        MOVE PROPERTY(copy(s)); 
    }
}