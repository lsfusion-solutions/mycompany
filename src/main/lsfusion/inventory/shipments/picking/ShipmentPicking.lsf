MODULE ShipmentPicking;

REQUIRE ShipmentPrint, ShipmentRes, ShipmentInv;

NAMESPACE Inventory;

// type
picking 'Picking' = DATA BOOLEAN (ShipmentType);
EXTEND FORM shipmentType PROPERTIES(o) picking;

// reserved
reserved 'Reserved' = DATA NUMERIC[16,3] (ShipmentLine, Location);
reservedRec 'Reserved (including nested)' (ShipmentLine l) = GROUP SUM reserved(l, Location loc) IF level(loc, location(shipment(l)));
ledgerReserved (ShipmentLine l) += reservedRec(l);

CONSTRAINT reserved(ShipmentLine l, Location loc) < 0 MESSAGE 'Reserved quantity cannot be less than 0';
CONSTRAINT reserved(ShipmentLine l) (-) reservedRec(l) < 0 MESSAGE 'You cannot reserve goods for storage locations more than in a line';

// done
done 'Done' = DATA NUMERIC[16,3] (ShipmentLine, Location);
picked 'Picked' (ShipmentLine l) = GROUP SUM done(l, Location loc);
ledgerDone (ShipmentLine l) += picked(l);

CONSTRAINT (done(ShipmentLine l, Location loc) < 0) AND done(l) > 0 MESSAGE 'The shipped quantity cannot be less than 0';
CONSTRAINT (done(ShipmentLine l) (-) picked(l) < 0) AND done(l) > 0 MESSAGE 'You cannot ship goods to storage locations more than in a line';

locations (ShipmentLine l) = GROUP CONCAT name(Location loc) + ' : ' + DOUBLE(done(l, loc)), ', ' ORDER loc;
note(ShipmentLine l) += locations(l);

// events
dateReceived 'Last receipt date' (ShipmentLine l, Location loc) = prevDateReceived(loc, product(l));

WHEN LOCAL CHANGED(done(ShipmentLine l)) AND picking(type(shipment(l))) AND NOT (GROUP SUM 1 IF CHANGED(done(l, Location loc))) DO
    done(l, Location loc) <- PARTITION UNGROUP done
                                       LIMIT   reserved(l, loc)
                                       ORDER dateReceived(l, loc), loc
                                       BY l;

available 'Available' (ShipmentLine l, Location loc) = prevAvailable(loc, product(l)) (+) PREV(reserved(l, loc));
extraCheckAvailability (Shipment s) + {
    IF picking(type(s)) THEN {
        reserved(ShipmentLine l, Location loc) <- 
                (PARTITION UNGROUP reserved
                           LIMIT   available(l, loc) IF level(loc, location(shipment(l)))
                           ORDER dateReceived(l, loc), loc
                           BY l)                
                                WHERE shipment(l) = s;
    }
}

extraUnreserve (Shipment s) + {
    IF picking(type(s)) THEN {
        reserved(ShipmentLine l, Location ll) <- NULL WHERE shipment(l) = s;
    }
}

extraValidate (Shipment s) + {
    IF picking(type(s)) THEN {
        done(ShipmentLine l, Location loc) <- reserved(l, loc) WHERE shipment(l) = s AND NOT (GROUP SUM done(l, Location ll));
    }
}

extraPickingFilter = ABSTRACT VALUE BOOLEAN (ShipmentLine, Location);

EXTEND FORM shipment
    OBJECTS loc = Location
    PROPERTIES READONLY name(loc)
    PROPERTIES READONLY dateReceived(l, loc), available(l, loc), reserved(l, loc)
    PROPERTIES          done(l, loc)

    FILTERS level(loc, location(shipment(l))), 
            available(l, loc) OR reserved(l, loc) OR done(l, loc) OR extraPickingFilter(l, loc)
;

DESIGN shipment {
    lines {
        horizontal = TRUE;
        linesTab {
            NEW picking {
                caption = 'Picking';
                showIf = picking(type(s)) AND (waiting(s) OR done(s));
                MOVE BOX(loc) { 
                    GRID(loc) {
                        height = 100;
                    } 
                }
            }
        }
    }
}

// resledger
CLASS ShipmentPickingRes 'Shipment' : ResLedger;

pickingLedger = AGGR ShipmentPickingRes WHERE reserved(ShipmentLine l, Location loc) AND toReserve(shipment(l));

type(ShipmentPickingRes r) += nameType(shipment(l(r)));

dateTime(ShipmentPickingRes r) += executionDateTime(shipment(l(r)));
number(ShipmentPickingRes r) += number(shipment(l(r)));

partner(ShipmentPickingRes r) += customer(shipment(l(r)));
location(ShipmentPickingRes r) += loc(r);

product(ShipmentPickingRes r) += product(l(r));
reserved(ShipmentPickingRes r) += reserved(l(r),loc(r));

// invledger
CLASS ShipmentPickingInv 'Shipment' : InvLedger;

invLedger = AGGR ShipmentPickingInv WHERE done(ShipmentLine line, Location location);

type(ShipmentPickingInv p) += nameType(shipment(line(p)));

active(ShipmentPickingInv p) += active(shipment(line(p)));

dateTime(ShipmentPickingInv p) += executionDateTime(shipment(line(p)));
number(ShipmentPickingInv p) += number(shipment(line(p)));

fromLocation(ShipmentPickingInv p) += location(p);
toLocation(ShipmentPickingInv p) += toLocation(shipment(line(p)));

partner(ShipmentPickingInv p) += customer(shipment(line(p)));

product(ShipmentPickingInv p) += product(line(p));
quantity(ShipmentPickingInv p) += done(line(p), location(p));

edit (ShipmentPickingInv p) + { edit(line(p)); } 