MODULE ShipmentReceipt;

REQUIRE ShipmentCanceled, ReceiptCanceled;

NAMESPACE Inventory;

// types
isReturn 'Return' = DATA BOOLEAN (ReceiptType);
EXTEND FORM receiptType PROPERTIES(o) isReturn;

isReturn (Receipt r) = isReturn(type(r));
isVendor(Receipt r) += isReturn(r) AND isCustomer(vendor(r));

receiptType = DATA ReceiptType (ShipmentType);
nameReceiptType 'Return type' (ShipmentType t) = name(receiptType(t));
EXTEND FORM shipmentType PROPERTIES(o) nameReceiptType;

// line
@defineDocLineRelation (shipment, receipt, 'Shipment', 'Receipt', s, r);

CONSTRAINT shipmentLine(ReceiptLine l) AND NOT 
                (customer(shipmentLine(l)) = vendor(l) AND 
                 product(shipmentLine(l)) = product(l))
    CHECKED BY shipmentLine
    MESSAGE 'The partner and shipment item must match the partner and return item';
    
EXTEND FORM receipt
    PROPERTIES(l) numberDateShipmentLine SHOWIF isReturn(r)
;

// Shipment
return 'Return' (Shipment s) {    
    NEWSESSION {
        NEW nr = Receipt {
            type(nr) <- receiptType(type(s));
        
            location(nr) <- location(s);
            vendor(nr) <- customer(s);
            FOR shipment(ShipmentLine l) = s INLINE NEW nl = ReceiptLine DO {
                shipmentLine(nl) <- l;
                receipt(nl) <- nr;
                product(nl) <- product(l);
                initialDemand(nl) <- done(l);
            }
            SHOW receipt OBJECTS r = nr DOCKED;
        }
    }
}

EXTEND FORM shipment
    PROPERTIES(s) return SHOWIF active(s) AND NOT isTransfer(type(s))
;

DESIGN shipment {
    secondaryActions {
        MOVE PROPERTY(return(s)) { valueClass = 'btn-warning'; }
    }             
}

// returned quantity
checkReturnedQuantity 'Check returned quantity' = DATA BOOLEAN (ShipmentType);
EXTEND FORM shipmentType PROPERTIES(o) checkReturnedQuantity;

returned 'Returned' (ShipmentLine sl) = 
    GROUP SUM done(ReceiptLine rl) IF shipmentLine(rl) = sl AND active(receipt(rl)) MATERIALIZED;

CONSTRAINT SET(returned(ShipmentLine sl) > OVERRIDE done(sl), 0.0) AND checkReturnedQuantity(type(sl))
    MESSAGE 'The returned quantity on the shipment line exceeds the original quantity';

toReturn (ShipmentLine sl) = done(sl) - OVERRIDE returned(sl), 0;

FORM shipmentReceiptShow 'Refunds'
    OBJECTS sl = ShipmentLine
    
    OBJECTS rl = ReceiptLine
    PROPERTIES(rl) READONLY imagedNameStatus, number, executionDateTime, done
    FILTERS shipmentLine(rl) = sl,
            active(receipt(rl))
;
    
EXTEND FORM shipment
    PROPERTIES(l) returned ON CHANGE { SHOW shipmentReceiptShow OBJECTS sl = l; } SHOWIF countReceiptLine(s)
;

// auto set
setShipmentLine (ReceiptLine l) {
    shipmentLine(l) <- GROUP LAST ShipmentLine sl IF 
                                    customer(sl) = vendor(l) AND 
                                    product(sl) = product(l) AND 
                                    active(shipment(sl)) AND
                                    done(l) <= toReturn(sl) 
                             ORDER executionDateTime(shipment(sl)), sl;
}
WHEN LOCAL (SETCHANGED(product(ReceiptLine l)) OR SETCHANGED(vendor(l))) AND isReturn(receipt(l)) AND product(l) AND vendor(l) DO
    setShipmentLine(l);

WHEN (SET(product(ReceiptLine l)) OR SET(vendor(l))) AND isReturn(receipt(l)) AND NOT shipmentLine(l) DO
    setShipmentLine(l);