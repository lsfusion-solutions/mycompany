MODULE ShipmentDone;

REQUIRE ShipmentReady;

NAMESPACE Inventory;

EXTEND CLASS ShipmentStatus {
    done 'Done'
}
done 'Done' = DATA BOOLEAN (Shipment);

status(Shipment s) += WHEN done(s) THEN ShipmentStatus.done;

executionDateTime 'Execution Date' = DATA DATETIME (Shipment);
WHEN SET(done(Shipment s)) AND NOT CHANGED(executionDateTime(s)) DO executionDateTime(s) <- currentDateTime(); 
@defineDateTimeAggregation(Shipment, execution, 'Execution ');

executionDateTime 'Execution Date' (ShipmentLine l) = executionDateTime(shipment(l));
executionDate 'Execution Date' (ShipmentLine l) = executionDate(shipment(l));

doNotCheckDone 'Do not check shipped quantity' = DATA BOOLEAN (ShipmentType);
EXTEND FORM shipmentType PROPERTIES(o) doNotCheckDone;

done 'Done' = DATA NUMERIC[16,3] (ShipmentLine);

weightDone 'Weight' (ShipmentLine l) = NUMERIC[16,3](done(l) * weight(product(l)));

CONSTRAINT (done(ShipmentLine l) > initialDemand(l)) AND NOT doNotCheckDone(type(l))
    MESSAGE 'Done quantity must be between 0 and initial demand';

setDone 'Fill done' (Shipment s) {
    done(ShipmentLine l) <- reserved(l) WHERE shipment(l) = s;    
}

extraValidate ABSTRACT LIST (Shipment);
validate 'Mark as Done' (Shipment s) {   
    APPLY;
    IF canceled() THEN RETURN;
    
    NEWSESSION {
        IF NOT immediate(s) THEN {
            extraValidate(s);
            
            IF NOT (GROUP SUM 1 IF done(ShipmentLine l) AND shipment(l) = s) THEN
                ASK 'Done quantities not filled' + ' ' + number(s) + '... ' + 'Fill quantities with initial demand ?' DO {
                    setDone(s);
                } ELSE RETURN;
        }
        
        done(s) <- TRUE;
        APPLY;
    }
}

EXTEND FORM shipmentLines
    PROPERTIES(l) READONLY executionDateTime AFTER scheduledDateTime(l), done
;

toValidate (Shipment s) = status(s) = ShipmentStatus.ready OR (immediate(s) AND status(s) = ShipmentStatus.draft);

EXTEND FORM shipment
    PROPERTIES(s) validate SHOWIF toValidate(s), 
                  done,
                  setDone DRAW l TOOLBAR SHOWIF status(s) = ShipmentStatus.ready DISABLEIF readonly(s),
                  executionDateTime SHOWIF done(s) READONLYIF readonly(s)
    
    PROPERTIES(l) READONLYIF readonly(s) done BACKGROUND RGB(198,230,247) IF toValidate(s)
;

DESIGN shipment {                               
    primaryActions {                  
        MOVE PROPERTY(validate(s)) FIRST { valueClass = 'btn-primary'; }
    }
    statusGroup {
        MOVE PROPERTY(done(s)) {
            valueClass = 'btn-check';
            captionClass = 'btn btn-outline-primary btn-arrow-right';
        }                              
    } 
    headerLeft {
        MOVE PROPERTY(executionDateTime(s));
    }                  
}

@defineHistoryProperty(shipment, executionDateTime, 'Execution Date');
@defineDocHistoryLineProperty(shipment, ShipmentLine, done, 'Done', nameProduct);

EXTEND FORM shipments
    PROPERTIES(s) READONLYIF isReadonly() executionDateTime AFTER scheduledDateTime(s)
 
    EXTEND FILTERGROUP status
        FILTER 'Done' status(s) = ShipmentStatus.done
;

@defineSelectionAction(shipments, Shipment, validate, 'Mark as Done', statuses);