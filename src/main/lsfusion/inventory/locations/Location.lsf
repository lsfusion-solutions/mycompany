MODULE Location;

REQUIRE InventorySettings, Company, MetaNumerator, Selection;

NAMESPACE Inventory;

CLASS Location 'Location';

@defineID(location, 'Locations', 'MX', 6);

name '{Name}' = DATA ISTRING[30] (Location) IN id NONULL CHARWIDTH 15;

internalUse 'For internal use' = DATA BOOLEAN (Location);

archived 'Archived' = DATA BOOLEAN (Location);
active '{Active}' (Location l) = NOT archived(l);

// hierarchy
parent 'Parent' = DATA Location (Location);
idParent 'Parent ID' (Location l) = id(parent(l));
nameParent 'Parent' (Location l) = name(parent(l));

rootLocation() = GROUP MIN Location l AS Location IF NOT parent(l);

prohibitMultipleRootCategories 'Prohibit multiple root locations' = DATA BOOLEAN ();
EXTEND FORM options PROPERTIES prohibitMultipleRootCategories();
DESIGN options { commons { MOVE PROPERTY(prohibitMultipleRootCategories()); } }

CONSTRAINT [GROUP SUM 1 IF Location l IS Location AND NOT parent(l)]() > 1 AND prohibitMultipleRootCategories() 
    MESSAGE 'Parent location is not specified';

CONSTRAINT DROPPED(Location l IS Location) AND PREV(parent(Location cl) = l)
        MESSAGE 'You cannot delete a storage location that has subordinate warehouses';

level 'Level' (Location child, Location parent) =
   RECURSION 1l IF child IS Location AND parent = child
        STEP 2l IF parent = parent($parent) MATERIALIZED;

level 'Level' (Location child)  = GROUP SUM 1 IF level(child, Location parent) MATERIALIZED;

isChild (Location child, Location parent) = TRUE IF level(child, parent);

countChildren (Location parent) = GROUP SUM 1 IF parent(Location child) = parent;

canonicalName 'Canonical name' (Location l) =
   GROUP CONCAT name(Location parent), ' / ' ORDER DESC level(l, parent) CHARWIDTH 20 IN id;
canonicalNameParent 'Parent' (Location l) = canonicalName(parent(l));

// company
company 'Owner' = DATA Company (Location); 
idCompany 'Owner code' (Location l) = id(company(l)); 
nameCompany 'Owner' (Location l) = name(company(l)); 

WHEN LOCAL SET(Location l IS Location) AND NOT CHANGED(company(l)) DO company(l) <- defaultCompany();

// address
address 'Address' = DATA ISTRING[50] (Location);
city 'City' = DATA ISTRING[30] (Location);
state 'State' = DATA ISTRING[30] (Location);
zip 'Postcode' = DATA ISTRING[10] (Location);

hierarchyAddress (Location l) = GROUP LAST address(Location parent) ORDER DESC level(l,parent);
hierarchyCity (Location l) = GROUP LAST city(Location parent) ORDER DESC level(l,parent);
hierarchyState  (Location l) = GROUP LAST state(Location parent) ORDER DESC level(l,parent);
hierarchyZip  (Location l) = GROUP LAST zip(Location parent) ORDER DESC level(l,parent);

addressCsv 'Address' (Location l) = CONCAT ', ', hierarchyAddress(l), hierarchyCity(l), hierarchyState(l), hierarchyZip(l) CHARWIDTH 20;
addressLines 'Address' (Location l) = CONCAT '\n', hierarchyAddress(l), hierarchyCity(l), hierarchyState(l), hierarchyZip(l);
  
FORM location 'Location'
    OBJECTS l = Location PANEL
    PROPERTIES(l) name, id, internalUse, archived,
                  canonicalNameParent, nameCompany,
                  address, city, state, zip
     
    EDIT Location OBJECT l  
;

DESIGN location {
    OBJECTS {
        NEW header {
            NEW id {
                alignment = STRETCH;
                horizontal = TRUE;
                MOVE PROPERTY(name(l)) { charWidth = 50; }
                MOVE PROPERTY(id(l)) { charWidth = 15; } ;
                MOVE PROPERTY(internalUse(l));
                MOVE PROPERTY(archived(l));
            }
            MOVE PROPERTY(canonicalNameParent(l)) { notNull = TRUE; }
            MOVE PROPERTY(nameCompany(l));
            NEW address {
                alignment = STRETCH;
                lines = 2;
                MOVE PROPERTY(address(l));
                MOVE PROPERTY(city(l));
                MOVE PROPERTY(state(l));
                MOVE PROPERTY(zip(l));
            }
            NEW params {
                alignment = STRETCH;
                lines = 2;
            }
        }
        NEW tabbedPane {
            tabbed = TRUE;
            fill = 1;
        }
    }
}

background (Location l) = ABSTRACT CASE COLOR (Location);
FORM locations 'Locations'
    OBJECTS l = Location BACKGROUND background(l)
    PROPERTIES(l) READONLYIF isReadonly() 
                           name, id, internalUse, archived,
                           canonicalNameParent, nameCompany,
                           address, city, state, zip
    PROPERTIES(l) NEWSESSION NEW, EDIT, DELETE

    FILTERGROUP active
        FILTER '{Active}' active(l) DEFAULT
    
    TREE locations lt = Location PARENT parent(lt)
    PROPERTIES(lt) READONLY name, id, canonicalNameParent, nameCompany, address, city, state, zip
    PROPERTIES(lt) NEWSESSION NEW, EDIT, DELETE
    ORDERS name(lt)

    FILTERGROUP activeTree
        FILTER '{Active}' active(lt) DEFAULT

    EVENTS ON CHANGE lt { SEEK locations.l = lt; }
;

@extendFormEditable(locations);

DESIGN locations {
    OBJECTS {
        tabbed = TRUE;
        NEW list {
            caption = 'List';
            MOVE BOX(l) { caption = ''; }
        }
        NEW tree {
            caption = 'Tree';
            MOVE BOX(TREE locations) { caption = ''; }
        }
    }
}

FORM dialogLocations 'Locations'
    OBJECTS l = Location BACKGROUND background(l)
    PROPERTIES(l) READONLY name, address, level
    ORDERS level(l), name(l)

    FILTERGROUP active
        FILTER '{Active}' active(l) DEFAULT

    TREE locations lt = Location PARENT parent(lt)
    PROPERTIES(lt) READONLY name, address
    ORDERS name(lt)

    FILTERGROUP activeTree
        FILTER '{Active}' active(lt) DEFAULT

    LIST Location OBJECT l

    EVENTS ON CHANGE lt { SEEK locations.l = lt; }
;

DESIGN dialogLocations {
    OBJECTS {
        tabbed = TRUE;
        NEW list {
            caption = 'List';
            MOVE BOX(l) { 
                caption = '';
                PROPERTY(level(l)) { hide = TRUE; }
            }
        }
        NEW tree {
            caption = 'Tree';
            MOVE BOX(TREE locations) { caption = ''; }
        }
    }
}

NAVIGATOR {
    settings {
        NEW locations;
    }
}