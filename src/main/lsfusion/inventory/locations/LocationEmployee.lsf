MODULE LocationEmployee;

REQUIRE Location, Employee;

NAMESPACE Inventory;

hasAccess 'Has access' = DATA BOOLEAN (Employee, Location);

hasChildAccess (Employee e, Location l) = GROUP LAST hasAccess(e, Location cl) ORDER DESC level(cl, l);
hasParentAccess (Employee e, Location l) = GROUP LAST hasAccess(e, Location pl) ORDER DESC level(l, pl); 

countLocationAccess (Employee e) = GROUP SUM 1 IF hasAccess(e, Location l) MATERIALIZED PREREAD;

accessChildGranted (Employee e, Location l) = hasChildAccess(e, l) OR NOT countLocationAccess(e);
accessGranted (Employee e, Location l) = hasParentAccess(e, l) OR NOT countLocationAccess(e);

accessChildGranted (Location l) = l IS Location AND accessChildGranted(currentUser(), l);
accessGranted (Location l) = l IS Location AND accessGranted(currentUser(), l);
accessDenied (Location l) = l IS Location AND currentUser() IS Employee AND NOT accessGranted(l);

firstLocation() = GROUP LAST Location l ORDER DESC l WHERE accessGranted(l); 
countLocation() = GROUP SUM 1 IF accessGranted(Location l);

EXTEND FORM employee
    TREE locations lt = Location PARENT parent(lt)
    PROPERTIES(lt) READONLY name, id
    PROPERTIES hasAccess(e, lt) BACKGROUND (GROUP SUM 1 IF hasAccess(e, Location cl) AND level(cl, lt)) 
    ORDERS name(lt)
;

DESIGN employee {
    details {
        MOVE BOX(TREE locations) {
            caption = 'Locations';
            PROPERTY(hasAccess(e, lt)) {
                width = 40;
            }
        }
    }
}

META defineDocLocationAccessEvents(doc, let, prefix)
    WHEN LOCAL SET(###doc o IS ###doc) AND NOT CHANGED(prefix###location(o)) AND countLocation() = 1 DO
        prefix###location(o) <- firstLocation();

    CONSTRAINT SETCHANGED(prefix###location(###doc o)) AND accessDenied(prefix###location(o)) CHECKED BY prefix###location[###doc]
        MESSAGE 'The current user does not have permission to access the selected storage location';
END

META defineDocLocationAccess(doc, let, prefix)
    @defineDocLocationAccessEvents(doc, let, prefix);
               
    EXTEND FORM doc##s
        FILTERS accessGranted(prefix###location(let)) OR NOT prefix###location(let) 
    ; 
END

META defineDocLocationAccess(doc, let)
    @defineDocLocationAccess(doc, let, );
END