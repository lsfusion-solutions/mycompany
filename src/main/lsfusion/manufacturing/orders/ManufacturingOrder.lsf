MODULE ManufacturingOrder;

REQUIRE Doc, MetaNumerator, Input, DateUtils, FileUtils, Comments, 
        BomNested, LocationEmployee,
        ManufacturingOrderType, ManufacturingSettings;

NAMESPACE Manufacturing;

CLASS ManufacturingOrder 'Manufacturing order';

@defineDocStatus(manufacturingOrder, 'Manufacturing order status');

type 'Type' = DATA ManufacturingOrderType (ManufacturingOrder) NONULL;
nameType 'Type' (ManufacturingOrder o) = name(type(o));

WHEN LOCAL SET(ManufacturingOrder o IS ManufacturingOrder) AND NOT CHANGED(type(o)) DO type(o) <- defaultManufacturingOrderType(); 

scheduledDateTime 'Start date' = DATA DATETIME (ManufacturingOrder) IN id;
scheduledDateTime(ManufacturingOrder o) <- currentDateTime() WHEN SET(o IS ManufacturingOrder);
@defineDateTimeAggregation(ManufacturingOrder, scheduled, 'Scheduled ');

@defineNumberType(ManufacturingOrder);

numberDate 'Description' (ManufacturingOrder o) = number(o) + ' (' + scheduledDateTime(o) + ')' IN id;

item '{Item}' = DATA Item (ManufacturingOrder);
nameItem '{Item}' (ManufacturingOrder m) = name(item(m));

uom (ManufacturingOrder o) = uom(item(o));
nameUom 'UoM' (ManufacturingOrder m) = name(uom(m));

responsible = DATA Employee (ManufacturingOrder);
nameResponsible 'Responsible' (ManufacturingOrder o) = MasterData.name(responsible(o));

responsible(ManufacturingOrder o) <- currentUser() IF currentUser() IS Employee WHEN SET(o IS ManufacturingOrder);

// bom
bom 'Bill of Materials' = DATA Bom (ManufacturingOrder);
descriptionBom 'Bill of Materials' (ManufacturingOrder m) = description(bom(m));
CONSTRAINT bom(ManufacturingOrder m) AND NOT item(m) = item(bom(m))
    CHECKED BY bom[ManufacturingOrder]
    MESSAGE 'Manufacturing order BOM item must be equal to production order item';

WHEN LOCAL CHANGED(item(ManufacturingOrder o)) AND NOT CHANGED(bom(o)) AND defaultBom(item(o)) DO
    bom(o) <- defaultBom(item(o));

company = DATA Company (ManufacturingOrder);
nameCompany 'Company' (ManufacturingOrder m) = name(company(m));
WHEN LOCAL SET(ManufacturingOrder o IS ManufacturingOrder) AND NOT CHANGED(company(o)) DO company(o) <- defaultCompany(); 

materialsLocation 'Materials location' = DATA Location (ManufacturingOrder);
nameMaterialsLocation 'Materials location' (ManufacturingOrder m) = name(materialsLocation(m));
WHEN LOCAL SETCHANGED(type(ManufacturingOrder mo)) AND NOT materialsLocation(mo) DO materialsLocation(mo) <- materialsLocation(type(mo));
CONSTRAINT SETCHANGED(materialsLocation(ManufacturingOrder o)) AND internalUse(materialsLocation(o)) CHECKED BY materialsLocation[ManufacturingOrder]
    MESSAGE 'The selected location is for internal use';

unbuild 'Unbuild' (ManufacturingOrder mo)= unbuild(type(mo)); 

// consumed
CLASS ConsumedLine 'Materials';

manufacturingOrder = DATA ManufacturingOrder (ConsumedLine) NONULL DELETE;

countConsumedLine 'Material lines' (ManufacturingOrder m) = GROUP SUM 1 IF manufacturingOrder(ConsumedLine l) = m MATERIALIZED;
index '№' = PARTITION SUM 1 ORDER ConsumedLine l BY manufacturingOrder(l) IN id MATERIALIZED CHARWIDTH 3;

item '{Item}' = DATA Item (ConsumedLine);
nameItem '{Item}' (ConsumedLine l) = name(item(l));
idBarCodeItem 'Barcode' (ConsumedLine l) = idBarCode(item(l));
idItem '{ID}' (ConsumedLine l) = id(item(l));

description 'Description' = DATA ISTRING (ConsumedLine);

uom (ConsumedLine l) = uom(item(l));
nameUom 'UoM' (ConsumedLine l) = name(uom(l));

toConsume 'To consume' = DATA NUMERIC[16,3] (ConsumedLine);

toConsume 'To consume' (ManufacturingOrder o) = GROUP SUM toConsume(ConsumedLine l) IF manufacturingOrder(l) = o AND item(l) = item(o) MATERIALIZED;

// finished
CLASS FinishedLine 'Finished products';

manufacturingOrder = DATA ManufacturingOrder (FinishedLine) NONULL DELETE;

countFinishedLine 'Product lines' (ManufacturingOrder m) = GROUP SUM 1 IF manufacturingOrder(ConsumedLine l) = m MATERIALIZED;
index '№' = PARTITION SUM 1 ORDER FinishedLine l BY manufacturingOrder(l) IN id MATERIALIZED CHARWIDTH 3;

item '{Item}' = DATA Item (FinishedLine);
nameItem '{Item}' (FinishedLine l) = name(item(l));
idBarCodeItem 'Barcode' (FinishedLine l) = idBarCode(item(l));
idItem '{ID}' (FinishedLine l) = id(item(l));

nameConsumedItem 'Materials' (ManufacturingOrder o) =
    GROUP CONCAT nameItem(ConsumedLine cl), ' / ' ORDER nameItem(cl) BY manufacturingOrder(cl) CHARWIDTH 14;

uom 'UoM' = DATA Uom (FinishedLine);
nameUom 'UoM' (FinishedLine l) = name(uom(l));
WHEN LOCAL CHANGED(item(FinishedLine l)) DO uom(l) <- uom(item(l));

toProduce '{Manufacture}' = DATA NUMERIC[16,3] (FinishedLine);

costRatio 'Cost ratio' = DATA NUMERIC[18,5] (FinishedLine);

costRatio (ManufacturingOrder o) = GROUP SUM costRatio(FinishedLine l) IF manufacturingOrder(l) = o MATERIALIZED;
normalizedCostRatio (FinishedLine l) = IF costRatio(manufacturingOrder(l)) THEN 
                                                                costRatio(l) / costRatio(manufacturingOrder(l)) ELSE 
                                                                (1.0 IF item(l) = item(manufacturingOrder(l))); 

toProduce '{Manufacture}' (ManufacturingOrder o) = GROUP SUM toProduce(FinishedLine l) IF manufacturingOrder(l) = o AND item(l) = item(o) MATERIALIZED;

// manufacture
toManufacture '{Manufacture}' (ManufacturingOrder o) = IF unbuild(o) THEN toConsume(o) ELSE toProduce(o) MATERIALIZED;

// line properties
status (ConsumedLine l) = status(manufacturingOrder(l));
nameStatus 'Status' (ConsumedLine l) = name(status(l));

nameType 'Type' (ConsumedLine l) = nameType(manufacturingOrder(l));
scheduledDateTime 'Start date' (ConsumedLine l) = scheduledDateTime(manufacturingOrder(l)) IN id;
scheduledDate 'Start date' (ConsumedLine l) = scheduledDate(manufacturingOrder(l));
number 'Number' (ConsumedLine l) = number(manufacturingOrder(l)) IN id;
descriptionBom 'Bill of Materials' (ConsumedLine l) = descriptionBom(manufacturingOrder(l));

responsible (ConsumedLine l) = responsible(manufacturingOrder(l));
nameResponsible 'Responsible' (ConsumedLine l) = MasterData.name(responsible(l));

edit (ConsumedLine l) + { edit(manufacturingOrder(l)); } 

FORM manufacturingOrder 'Manufacturing order'
    OBJECTS o = ManufacturingOrder PANEL 
    PROPERTIES(o) READONLY unbuild
    PROPERTIES(o) READONLYIF readonly(o)
                  nameType, scheduledDateTime, number, nameCompany, nameResponsible, 
                  nameItem, toManufacture, nameUom, 
                  descriptionBom, nameMaterialsLocation 
    
    OBJECTS c = ConsumedLine
    PROPERTIES(c) READONLYIF readonly(o)
                  index READONLY, nameItem, description, nameUom, idBarCodeItem, idItem, toConsume, NEW, DELETE
    FILTERS manufacturingOrder(c) = o

    OBJECTS l = FinishedLine
    PROPERTIES(l) READONLYIF readonly(o)
                  index READONLY, nameItem, nameUom, idBarCodeItem, idItem, toProduce, costRatio, 
                  NEW, DELETE
    FILTERS manufacturingOrder(l) = o
    
    EDIT ManufacturingOrder OBJECT o
;

DESIGN manufacturingOrder {
    caption = badged('Manufacturing order', number(o) + '(' + scheduledDateTime(o) + ')');
    OBJECTS {
        NEW header {
            alignment = STRETCH;
            horizontal = TRUE;
            NEW headerLeft {
                MOVE PROPERTY(nameType(o)) { notNull = TRUE; };
                MOVE PROPERTY(scheduledDateTime(o));
                MOVE PROPERTY(number(o)) { notNull = TRUE; }
                MOVE PROPERTY(nameCompany(o));
                MOVE PROPERTY(nameResponsible(o));
            }
            NEW headerRight {
                MOVE PROPERTY(nameItem(o));
                MOVE PROPERTY(unbuild(o));
                NEW quantity {
                    horizontal = TRUE;
                    MOVE PROPERTY(toManufacture(o));
                    MOVE PROPERTY(nameUom(o));
                }
                MOVE PROPERTY(descriptionBom(o));
            }
            NEW relatedDoc {
                fill = 1;
                tabbed = TRUE;
            }
        }
        NEW details {
            fill = 1;
            tabbed = TRUE;
            NEW consumed {
                caption = 'Materials';
                MOVE PROPERTY(nameMaterialsLocation(o));
                NEW consumedPane {
                    horizontal = TRUE;
                    fill = 1; 
                    MOVE BOX(c) { caption = ''; }
                    NEW consumedLinesTab {
                        fill = 0.3;
                        tabbed = TRUE;
                    }
                }
            }
            NEW finished {
                caption = 'Finished products';
                NEW finishedHeader { 
                    horizontal = TRUE;
                    alignment = STRETCH; 
                }
                NEW finishedPane {
                    horizontal = TRUE;
                    fill = 1; 
                    MOVE BOX(l) { caption = ''; }
                    NEW finishedLinesTab {
                        fill = 0.3;
                        tabbed = TRUE;
                    }
                }
            }
        }   
    }
    TOOLBARBOX {
        NEW footer FIRST {
            horizontal = TRUE;
        }
    }
}

@defineDocHistoryHeader(manufacturingOrder, scheduledDateTime);
@defineHistoryProperty(manufacturingOrder, item, 'Item', nameItem);
@defineHistoryProperty(manufacturingOrder, company, 'Company', nameCompany);
@defineHistoryProperty(manufacturingOrder, responsible, 'Responsible', nameResponsible);

@defineHistoryProperty(manufacturingOrder, toManufacture, '{Manufacture}');

@defineDocHistoryLine(manufacturingOrder, ConsumedLine, item);
@defineDocHistoryLineProperty(manufacturingOrder, ConsumedLine, toConsume, 'To consume', nameItem);

@defineDocHistoryLine(manufacturingOrder, FinishedLine, item);
@defineDocHistoryLineProperty(manufacturingOrder, FinishedLine, toProduce, '{Manufacture}', nameItem);

background = ABSTRACT CASE COLOR (ManufacturingOrder);

FORM manufacturingOrders 'Manufacturing orders'
    OBJECTS o = ManufacturingOrder BACKGROUND background(o)
    PROPERTIES(o) READONLYIF isReadonly()
                           number, scheduledDateTime, nameItem, 
                           nameType, nameCompany, 
                           unbuild READONLY, toManufacture READONLY, nameUom READONLY, 
                           descriptionBom,
                               nameMaterialsLocation,
                           countConsumedLine READONLY, countFinishedLine READONLY
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE

    LIST ManufacturingOrder OBJECT o
;

@extendFormEditable(manufacturingOrders);

@defineDocObjectsForm(manufacturingOrders, o, 'Orders');
@defineDocStatusForm(manufacturingOrder, o);
@defineDocLocationAccess(manufacturingOrder, o, materials);

@defineHistoryForm(manufacturingOrder, manufacturingOrder, o);

@defineObjectComments(manufacturingOrder, o, details);

@defineObjectFiles(manufacturingOrder, o, 'Manufacturing order file');

NAVIGATOR {
    operations {
        NEW manufacturingOrders;
    }
}

// copy
extraCopy ABSTRACT (ManufacturingOrder, ManufacturingOrder);

clone(ManufacturingOrder to, ManufacturingOrder from) {
    type(to) <- type(from);

    item(to) <- item(from);
    bom(to) <- bom(from);
    company(to) <- company(from);
    materialsLocation(to) <- materialsLocation(from);
    
    FOR manufacturingOrder(ConsumedLine ml) = from NEW ol = ConsumedLine DO {
        manufacturingOrder(ol) <- to;
        item(ol) <- item(ml);
        toConsume(ol) <- toConsume(ml);
    }

    FOR manufacturingOrder(FinishedLine ml) = from NEW ol = FinishedLine DO {
        manufacturingOrder(ol) <- to;
        item(ol) <- item(ml);
        uom(ol) <- uom(ml);
        toProduce(ol) <- toProduce(ml);
        costRatio(ol) <- costRatio(ml);
    }
    
    extraCopy(to, from);
}

copy 'Copy' (ManufacturingOrder from) {
    NEWSESSION {
        NEW to = ManufacturingOrder {
            clone(to, from);
            SHOW manufacturingOrder OBJECTS o = to DOCKED;
        }
    }
}

EXTEND FORM manufacturingOrder
    PROPERTIES(o) copy
;

DESIGN manufacturingOrder {
    secondaryActions {
        MOVE PROPERTY(copy(o)) { valueClass = 'btn-secondary'; }
    }
}

// fill
fillByQuantity (ManufacturingOrder o, NUMERIC[16,3] q) {
    DELETE ConsumedLine l WHERE manufacturingOrder(l) = o; 
    DELETE FinishedLine l WHERE manufacturingOrder(l) = o;

    IF unbuild(o) THEN {
        FOR bom(ComponentLine cl) = bom(o) DO NEW l = FinishedLine {
            manufacturingOrder(l) <- o;
            item(l) <- item(cl);
            uom(l) <- uom(cl);
            toProduce(l) <- NUMERIC[16,3](quantity(cl) * q / quantity(bom(o)));
            costRatio(l) <- costRatio(cl);
        }
                
        NEW l = ConsumedLine {
            manufacturingOrder(l) <- o;
            item(l) <- item(o);
            toConsume(l) <- q;
        }
                
        FOR bom(ByproductLine bl) = bom(o) DO NEW l = ConsumedLine {
            manufacturingOrder(l) <- o;
            item(l) <- product(bl);
            toConsume(l) <- NUMERIC[16,3](quantity(bl) * q / quantity(bom(o)));
        }
    } ELSE {
        FOR intermediateBom(bom(o), ComponentLine cl, TEXT path) AND NOT intermediate(nestedBom(cl)) DO NEW l = ConsumedLine {
            manufacturingOrder(l) <- o;
            item(l) <- item(cl);
            toConsume(l) <- NUMERIC[16,3](quantity(bom(o), cl, path) * q / quantity(bom(o)));
        }
                
        NEW l = FinishedLine {
            manufacturingOrder(l) <- o;
            item(l) <- item(o);
            uom(l) <- uom(o);
            toProduce(l) <- q;
        }
                
        FOR bom(ByproductLine bl) = bom(o) DO NEW l = FinishedLine {
            manufacturingOrder(l) <- o;
            item(l) <- product(bl);
            uom(l) <- uom(bl);
            toProduce(l) <- NUMERIC[16,3](quantity(bl) * q / quantity(bom(o)));
        }
    }
}

fillLines 'Create Lines' (ManufacturingOrder o) {
    APPLY;
    IF canceled() THEN RETURN;
    
    NEWSESSION {
        DIALOG dialogQuantity OBJECTS q = toManufacture(o) INPUT DO {
            fillByQuantity(o, q);
            APPLY;
        }
    }
}

EXTEND FORM manufacturingOrder
    PROPERTIES(o) fillLines SHOWIF status(o) = ManufacturingOrderStatus.draft
;

DESIGN manufacturingOrder {
    primaryActions {
        MOVE PROPERTY(fillLines(o)) { valueClass = 'btn-primary'; }
    }
}
