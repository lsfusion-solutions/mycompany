MODULE PosDashboard;

REQUIRE Pos, Session, Input,
        InvoiceReady, SessionInvoice, SalesDiscountInvoice;

NAMESPACE Retail;

hideInvoice = DATA LOCAL BOOLEAN ();

FORM posDashboard 'POS' LOCALASYNC
    OBJECTS p = Pos PANEL
    PROPERTIES(p) name SELECTOR
    FILTERS in(p, currentComputer()) OR NOT countPos(currentComputer())
    
    OBJECTS s = Session PANEL
    PROPERTIES(s) READONLY number
    FILTERS s = openedSession(p)
    
    OBJECTS i = Invoice PANEL
    PROPERTIES(i) 'Total' = fullAmount, 'Discount' = discountAmount, 'To pay' = amount, 
                  nameCustomer
    FILTERS session(i) = s
    
    OBJECTS l = InvoiceLine
    PROPERTIES(l) index READONLY, nameItem, quantity, price, 
                  nameSalesDiscount ON CHANGE changeSalesDiscount(l), discount, discountPrice, 
                  DELETE GRID
    PROPERTIES(l) PANEL READONLY nameItemPanel = nameItem, nameUom, idBarCodeItem, idItem, referenceItem
    FILTERS invoice(l) = i

    // session results
    PROPERTIES openSession(p) SHOWIF NOT s, close(s)
    PROPERTIES(s) READONLY openingDateTime, amount
    
    OBJECTS si = Invoice
    PROPERTIES(si) READONLY number, dateTime, nameCustomer, 'Total' = fullAmount, 'Discount' = discountAmount, 'To pay' = amount
    PROPERTIES(si) NEWSESSION EDIT
    FILTERGROUP invoices
        FILTER 'By session' PREV(session(si)) = s DEFAULT
        FILTER 'By POS' PREV(pos(session(si))) = p
;

DESIGN posDashboard {
    OBJECTS {
        class = '';
        border = FALSE;
        NEW mainPane {
            fill = 1;
            horizontal = TRUE;
            NEW leftPane {
                width = 1;
                fill = 1;
                NEW invoicePane {
                    fill = 1;
                    showIf = openedSession(p) AND NOT hideInvoice();
                    NEW invoiceHeader {
                        alignment = STRETCH;
                        horizontal = TRUE;
                    }
                    NEW invoice {
                        alignment = STRETCH;
                        horizontal = TRUE;
                        MOVE PROPERTY(nameCustomer(i)) { changeKey = 'F5'; }
                    }
                    REMOVE BOX(l);
                    MOVE GRID(l) {
                        PROPERTY(index(l)) { charWidth = 1; }
                        PROPERTY(nameItem(l)) { charWidth = 30; }
                        PROPERTY(quantity(l)) { charWidth = 5; }
                        PROPERTY(price(l)) { charWidth = 6; }
                        PROPERTY(nameSalesDiscount(l)) { charWidth = 8; }
                        PROPERTY(discountPrice(l)) { charWidth = 6; }
                    }
                    NEW linesFooter {
                        horizontal = TRUE;
                        alignment = STRETCH;
                        NEW info {
                            fill = 1;
                            NEW itemDetails {
                                alignment = STRETCH;
                                NEW itemDetails1 {
                                    alignment = STRETCH;
                                    horizontal = TRUE;
                                    MOVE PROPERTY(nameItemPanel) { panelCaptionVertical = TRUE; focusable = FALSE; }
                                    MOVE PROPERTY(nameUom(l)) { panelCaptionVertical = TRUE; focusable = FALSE; }
                                }
                                NEW itemDetails2 {
                                    alignment = STRETCH;
                                    horizontal = TRUE;
                                    MOVE PROPERTY(idBarCodeItem(l)) { panelCaptionVertical = TRUE; focusable = FALSE; }
                                    MOVE PROPERTY(idItem(l)) { panelCaptionVertical = TRUE; focusable = FALSE; }
                                    MOVE PROPERTY(referenceItem(l)) { panelCaptionVertical = TRUE; focusable = FALSE; }
                                }
                            }
                            NEW total {
                                horizontal = TRUE;
                                alignment = STRETCH;
                                MOVE PROPERTY(fullAmount(i)) { charWidth = 8; panelCaptionVertical = TRUE; fontSize = 24; focusable = FALSE; }
                                MOVE PROPERTY(discountAmount(i)) { charWidth = 8; panelCaptionVertical = TRUE; fontSize = 24; focusable = FALSE; }
                                MOVE PROPERTY(amount(i)) { charWidth = 8; panelCaptionVertical = TRUE; fontSize = 24; focusable = FALSE; }
                            }
                        }
                        NEW actions {
                            alignment = STRETCH;
                        }
                    }
                }
            }
            NEW tabPane {
                width = 1;
                fill = 1;
                tabbed = TRUE;
                
                NEW session {
                    caption = '{Session}';
                    NEW posHeader {
                        horizontal = TRUE;
                        alignment = STRETCH;
                        MOVE PROPERTY(name(p)) { caption = 'Cash register'; }
                    }
                    NEW sessionHeader {
                        horizontal = TRUE;
                        alignment = STRETCH;
                        MOVE PROPERTY(number(s));
                        MOVE PROPERTY(openSession(p)) { fill = 1; valueClass = 'btn-primary';  };
                        MOVE PROPERTY(openingDateTime(s)) { caption = 'Opened'; focusable = FALSE; }
                        MOVE PROPERTY(close(s)) { valueClass = 'btn-primary'; caption = 'Close session'; }
                    }
                    NEW cashRegister {
                        horizontal = TRUE;
                        alignment = STRETCH;
                    }
                    NEW sessionTotal {
                        horizontal = TRUE;
                        alignment = STRETCH;
                        MOVE PROPERTY(amount(s));
                    }
                    
                    NEW sessionDetails {
                        fill = 1;
                        tabbed = TRUE;
                        MOVE BOX(si) {
                            caption = 'Cash receipts'; 
                            showIf = openedSession(p); 
                            MOVE TOOLBAR(si) { alignment = END; }
                        }
                    }
                }
            }
        }
    }
    
    REMOVE TOOLBARBOX;
}

setQuantity(InvoiceLine l, INTEGER n) {
    IF n != 0 THEN
        quantity(l) <- n;
    ELSE
        DELETE l;
}

DESIGN posDashboard {
    info {
        NEW invoiceKeyboard FIRST {
            horizontal = TRUE;
            alignment = STRETCH;
        }
    }
}

@defineKeyboard(posDashboard, InvoiceLine, l, invoiceKeyboard, 14, setQuantity);

DESIGN posDashboard { REMOVE PROPERTY(posDashboardPress0(l)); }

afterCreateInvoice ABSTRACT LIST (Invoice);
createInvoice (Session s) {
    IF s THEN
        NEW i = Invoice {
            session(i) <- s;
            SEEK posDashboard.i = i;
            afterCreateInvoice(i);
        }
}

EXTEND FORM posDashboard
    EVENTS ON CHANGE s createInvoice(s);
;

NAVIGATOR {
    operations {
        NEW posDashboard;
    }
}

// new receipt
newReceipt 'New receipt' (Session s) {
    CANCEL;
    createInvoice(s);
} CONFIRM CHANGEKEY 'shift F12';

EXTEND FORM posDashboard
    PROPERTIES(s) newReceipt
;

DESIGN posDashboard {
    actions {
        MOVE PROPERTY(newReceipt(s)) { fill = 1; valueClass = 'btn-danger'; }
    }
}

// barcode handling
processBarCode ABSTRACT LIST (Invoice, InvoiceLine, STRING);
changeBarCode (Invoice i, InvoiceLine l) {
    INPUT b = STRING DO {
        IF b THEN {
            consumedBarCode() <- NULL;
            processBarCode(i, l, b);
            
            IF NOT consumedBarCode() THEN
                MESSAGE 'Barcode not found';
        } 
    }
}

EXTEND FORM posDashboard
    PROPERTIES() barCode ON CHANGE changeBarCode(i, l)
;

DESIGN posDashboard {
    invoiceHeader {
        MOVE PROPERTY(barCode()) FIRST;
    }
}