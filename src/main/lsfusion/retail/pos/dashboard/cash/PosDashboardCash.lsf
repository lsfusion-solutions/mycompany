MODULE PosDashboardCash;

REQUIRE PosDashboard, PosPaymentMethod, 
        IncomingPaymentDone, IncomingPaymentOutgoing, 
        OutgoingPaymentDone, OutgoingPaymentIncoming;

NAMESPACE Retail;

FORM inputMoney 'Deposit/withdrawal cash'
    PROPERTIES() keyboardDecimalInput
;
DESIGN inputMoney {
    OBJECTS {
        MOVE PROPERTY(keyboardDecimalInput()) { alignment = STRETCH; caption = '{Amount}'; fontSize = 24; }
        NEW bottom {
            alignment = STRETCH;
        }
    }
}
@defineKeyboardDecimal(inputMoney, bottom, 24);

// deposit
depositPaymentType = DATA IncomingPaymentType ();
nameDepositPaymentType 'Deposit type' = name(depositPaymentType());
EXTEND FORM options PROPERTIES() nameDepositPaymentType;
DESIGN options {
    commons {
        MOVE PROPERTY(nameDepositPaymentType());
    }
}

afterDeposit ABSTRACT LIST (Pos, IncomingPayment);
session = DATA Session (IncomingPayment) INDEXED;
deposit 'Deposit cash' (Pos p) {
    DIALOG inputMoney DO {
        FOR NUMERIC[14,2] a = NUMERIC[14,2] (keyboardDecimalInput()) IF a > 0 DO 
            NEWSESSION {
                NEW ip = IncomingPayment {
                    done(ip) <- TRUE;
                    
                    type(ip) <- depositPaymentType();
                    
                    partner(ip) <- company(p);
                    partnerAccount(ip) <- account(p);
                    
                    company(ip) <- company(p);
                    companyAccount(ip) <- cashAccount(p);
                    
                    amount(ip) <- a;
                    
                    session(ip) <- openedSession(p);
                    
                    APPLY;
                    IF NOT canceled() THEN
                        afterDeposit(p, ip);
                }
            }
    } 
}

withdrawPaymentType = DATA OutgoingPaymentType ();
nameWithdrawPaymentType 'Withdrawal type' = name(withdrawPaymentType());
EXTEND FORM options PROPERTIES() nameWithdrawPaymentType;
DESIGN options {
    commons {
        MOVE PROPERTY(nameWithdrawPaymentType());
    }
}

// withdraw
afterWithdraw ABSTRACT LIST (Pos, OutgoingPayment);
session = DATA Session (OutgoingPayment) INDEXED;
withdraw 'Withdraw' (Pos p) {
    DIALOG inputMoney DO {
        FOR NUMERIC[14,2] a = NUMERIC[14,2] (keyboardDecimalInput()) IF a > 0 DO 
            NEWSESSION {
                NEW op = OutgoingPayment {
                    done(op) <- TRUE;
                    
                    type(op) <- withdrawPaymentType();
                    
                    partner(op) <- company(p);
                    partnerAccount(op) <- account(p);
    
                    company(op) <- company(p);
                    companyAccount(op) <- cashAccount(p);
                    
                    amount(op) <- a;

                    session(op) <- openedSession(p);

                    APPLY;
                    IF NOT canceled() THEN 
                        afterWithdraw(p, op);
                }
            }
    } 
}


EXTEND FORM posDashboard
    PROPERTIES(p) cashBalance
    
    OBJECTS ip = IncomingPayment
    PROPERTIES(ip) READONLY dateTime, amount
    PROPERTIES(p)  deposit DRAW ip TOOLBAR DISABLEIF NOT cashAccount(p) 
    PROPERTIES(ip) NEWSESSION DELETE GRID SHOWIF NOT readonly(ip)
    FILTERS companyAccount(ip) = cashAccount(p), 
            type(ip) = depositPaymentType()
             

    OBJECTS op = OutgoingPayment
    PROPERTIES(op) READONLY dateTime, amount
    PROPERTIES(p)  withdraw DRAW op TOOLBAR DISABLEIF NOT cashAccount(p)
    PROPERTIES(op) NEWSESSION DELETE GRID SHOWIF NOT readonly(op)
    FILTERS companyAccount(op) = cashAccount(p),
            type(op) = withdrawPaymentType()
;

DESIGN posDashboard {
    posHeader {
        MOVE PROPERTY(cashBalance(p));
    }
    sessionDetails {
        MOVE BOX(ip) {
            caption = 'Deposit cash';
        }
        MOVE BOX(op) {
            caption = 'Withdraw cash';
        }
    }
}