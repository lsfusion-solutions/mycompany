MODULE SalesDiscountLine;

REQUIRE SalesDiscount, SalesLedgerPartner, SalesPricelistValue;

NAMESPACE Sales;

CLASS ABSTRACT SalesDiscountLine;

skip = ABSTRACT VALUE BOOLEAN (SalesDiscountLine);

dateTime = ABSTRACT DATETIME (SalesDiscountLine);
customer = ABSTRACT Partner (SalesDiscountLine);
item = ABSTRACT Item (SalesDiscountLine);
priceType = ABSTRACT PriceType (SalesDiscountLine);

quantity = ABSTRACT NUMERIC[16,3] (SalesDiscountLine);
price = ABSTRACT NUMERIC[10,2] (SalesDiscountLine);
amount = ABSTRACT NUMERIC[14,2] (SalesDiscountLine);

set = DATA LOCAL BOOLEAN (SalesDiscountLine, Discount);

processDiscount ABSTRACT LIST (SalesDiscountLine);
processDiscount(SalesDiscountLine l) + {
    set(l, Discount d) <- set(d, primary(item(l))) AND
        NOT skip(l) AND
        NOT (countPriceType(d) AND NOT in(d, priceType(l))) AND
        NOT startDateTime(d) > dateTime(l) AND
        NOT endDateTime(d) < dateTime(l);
}

processDiscount (SalesDiscountLine l) + {
    set(l, Discount d) <- NULL WHERE set(l, d) AND (
        fromQuantity(d) > quantity(l) OR
        fromAmount(d) > amount(l) OR
        fromAccumulated(d) > (OVERRIDE prevTotalSoldAmount(customer(l)), -0.01) OR
        fromAccumulatedPreviousMonth(d) > (OVERRIDE prevSoldAmountPreviousMonth(customer(l)), 0.0));
}

price 'Discount price' = DATA LOCAL NUMERIC[10,2] (SalesDiscountLine, Discount);

processDiscountPrice ABSTRACT LIST (SalesDiscountLine);
processDiscountPrice (SalesDiscountLine l) + {
    processDiscount(l);
    
    price (l, Discount d) <-
        (IF priceType(d) THEN 
            priceA(priceType(d), item(l), dateTime(l)) 
        ELSE 
            NUMERIC[10,2](price(l) * (100.0 - discount(d)) / 100.0))
        WHERE set(l, d);
}

minSalesDiscountAuto (SalesDiscountLine l) =
    GROUP LAST Discount d ORDER DESC price(l, d), d WHERE set(l, d) AND NOT manual(d); 

// manual select

FORM selectDiscount 'Discount selection'
    OBJECTS l = SalesDiscountLine PANEL
    
    OBJECTS d = Discount
    PROPERTIES(d) READONLY name, manual, discount, namePriceType
    PROPERTIES    READONLY price(l, d)
    FILTERS set(l, d)
;

// meta
META defineDocSalesDiscountLine (doc, caption, NS)
    EXTEND CLASS ###doc##Line : SalesDiscountLine;
    
    dateTime(###doc##Line l) += NS.dateTime(l);
    customer(###doc##Line l) += NS.customer(l);
    item(###doc##Line l) += NS.item(l);
    priceType(###doc##Line l) += priceType(l);
    
    quantity(###doc##Line l) += NS.quantity(l);
    price(###doc##Line l) += NS.price(l);
    
    fullPrice (###doc##Line l) = NS.price(l) * (IF NS.taxIncluded(l) THEN 1.0 ELSE (100.0 (+) NS.taxPercent(l)) / 100.0);
    fullAmount (###doc##Line l) = NUMERIC[14,2](NS.quantity(l) * fullPrice(l));

    fullAmount (###doc o) = GROUP SUM NUMERIC[14,2](NS.quantity(###doc##Line l) * NS.price(l) *
                                                    (IF NS.taxIncluded(l) THEN 1.0 ELSE (100.0 (+) NS.taxPercent(l)) / 100.0)) 
                                      IF NS.doc(l) = o;
    discountAmount (###doc o) = fullAmount(o) (-) NS.amount(o);
    
    amount(###doc##Line l) += fullAmount(doc(l));
    
    noRecalcDiscountAuto###doc caption = DATA BOOLEAN () PREREAD;
    EXTEND FORM options PROPERTIES() noRecalcDiscountAuto###doc;

    processDiscountSales ABSTRACT LIST (###doc##Line);
    processDiscountSales (###doc##Line l) +{
        processDiscountPrice(l);

        salesDiscount(l) <- minSalesDiscountAuto(l);
    }

    WHEN LOCAL (CHANGED(NS.dateTime(###doc##Line l)) OR CHANGED(NS.quantity(l)) OR CHANGED(fullAmount(doc(l))) OR 
                CHANGED(NS.customer(l)) OR CHANGED(NS.item(l)) OR CHANGED(NS.price(l)) OR CHANGED(NS.type(l))) AND 
                NOT noRecalcDiscountAuto###doc() AND NOT manual(salesDiscount(l)) INLINE DO {
        processDiscountSales(l);
    }
        
    recalcDiscountAuto 'Calculate discounts' (###doc d) {
        FOR doc(###doc##Line l) = d AND NOT manual(salesDiscount(l)) INLINE DO
            processDiscountSales(l);
    }
END