MODULE SalesDiscount;

REQUIRE SalesPriceType, BarCode;

NAMESPACE Sales;

CLASS Discount 'Discount';

name '{Name}' = DATA STRING[50] (Discount);
manual 'Manually' = DATA BOOLEAN (Discount);

startDateTime 'Start date' = DATA DATETIME (Discount);
startDateTime(Discount d) <- currentDateTime() WHEN SET(d IS Discount);

endDateTime 'End date' = DATA DATETIME (Discount);

active (Discount d, DATETIME time) = d IS Discount AND time IS DATETIME AND 
                                                    NOT startDateTime(d) > time AND
                                                    NOT endDateTime(d) < time;
active (Discount d) = active(d, currentDateTime()); 

// conditions
fromAmount 'Purchase amount from' = DATA NUMERIC[14,2] (Discount);
fromQuantity 'Quantity per line from' = DATA NUMERIC[16,3] (Discount);

fromAccumulated 'Sold to a client from' = DATA NUMERIC[14,2] (Discount);
fromAccumulatedPreviousMonth 'Sold to a client in the past month from' = DATA NUMERIC[14,2] (Discount);

// item
in 'Incl.' = DATA BOOLEAN (Discount, Category);
set (Discount d, Category c) = GROUP LAST in(d, Category cp) ORDER level(c, cp) MATERIALIZED;
categories 'Categories' (Discount d) = GROUP CONCAT name(Category c) IF in(d, c), ',' ORDER name(c), c CHARWIDTH 20;
countCategory 'Categories' (Discount d) = GROUP SUM 1 IF in(d, Category c);

in 'Incl.' = DATA BOOLEAN (Discount, Item);
set (Discount d, Item i) = in(d, i) OR set(d, category(i));
items '{Items}' (Discount d) = GROUP CONCAT name(Item i) IF in(d, i), ',' ORDER name(i), i CHARWIDTH 30;
countItem '{Items}' (Discount d) = GROUP SUM 1 IF in(d, Item i);

CONSTRAINT Discount d IS Discount AND NOT countCategory(d) AND NOT countItem(d)
    MESSAGE 'No items selected for discount';

// pricetype
in 'Incl.' = DATA BOOLEAN (Discount, PriceType);
countPriceType (Discount d) = GROUP SUM 1 IF in(d, PriceType t) MATERIALIZED;

priceTypes 'Price types' (Discount d) = GROUP CONCAT name(PriceType t) IF in(d, t), ',' ORDER name(t), t CHARWIDTH 30;

// discount
discount 'Discount, %' = DATA NUMERIC[5,2] (Discount);

priceType = DATA PriceType (Discount);
namePriceType 'Price type' (Discount d) = name(priceType(d));

FORM discount 'Discount'
    OBJECTS d = Discount PANEL
    PROPERTIES(d) name, manual,
                  startDateTime, endDateTime,
                  fromAmount, fromQuantity,
                  fromAccumulatedPreviousMonth, fromAccumulated,
                  discount SHOWIF NOT priceType(d) OR discount(d), namePriceType SHOWIF NOT discount(d) OR priceType(d)

    TREE categories c = Category PARENT parent(c) 
    PROPERTIES name(c) READONLY, in(d, c) BACKGROUND (GROUP SUM 1 IF in(d, Category cc) AND level(cc, c))
    ORDERS name(c)
    FILTERGROUP activeCategory
        FILTER '{Active}' active(c) DEFAULT
    
    OBJECTS i = Item
    PROPERTIES(i) READONLY name, nameUom, idBarCode, id
    PROPERTIES in(d, i)
    ORDERS name(i)
    FILTERGROUP inItem
        FILTER 'Included' set(d, i)
    FILTERS level(category(i), c)
    
    OBJECTS t = PriceType
    PROPERTIES(t) READONLY name
    PROPERTIES in(d, t)  
    
    EDIT Discount OBJECT d
;

DESIGN discount {
    OBJECTS {
        NEW general {
            caption = 'Main';
            horizontal = TRUE;
            alignment = STRETCH;
            MOVE PROPERTY(name(d));
            MOVE PROPERTY(manual(d));
        }
        NEW period {
            caption = 'Validity';
            horizontal = TRUE;
            alignment = STRETCH;
            MOVE PROPERTY(startDateTime(d));
            MOVE PROPERTY(endDateTime(d));
        }
        NEW conditions {
            caption = 'Terms';
            alignment = STRETCH;
            NEW generalConditions {
                horizontal = TRUE;
                alignment = STRETCH;
                MOVE PROPERTY(fromAmount(d));
                MOVE PROPERTY(fromQuantity(d));
            }
            NEW accumulated {
                horizontal = TRUE;
                alignment = STRETCH;
                MOVE PROPERTY(fromAccumulated(d));
                MOVE PROPERTY(fromAccumulatedPreviousMonth(d));
            }
        }
        NEW discounts {
            caption = 'Discount';
            horizontal = TRUE;
            MOVE PROPERTY(discount(d));
            MOVE PROPERTY(namePriceType(d));
        }
        NEW details {
            tabbed = TRUE;
            fill = 1;
            NEW items {
                caption = '{Items}';
                horizontal = TRUE;
                MOVE BOX(TREE categories);
                MOVE BOX(i) { fill = 2; }
            }
            MOVE BOX(t) {
                caption = 'Price types';
            }
        }
    }
}

FORM discounts 'Discounts'
    OBJECTS d = Discount
    PROPERTIES(d) READONLY name,
                           startDateTime, endDateTime,
                           fromAmount, fromQuantity,
                           fromAccumulatedPreviousMonth, fromAccumulated,
                           discount, namePriceType,
                           categories, items, priceTypes
    PROPERTIES(d) NEWSESSION NEW, EDIT, DELETE
    
    FILTERGROUP active
        FILTER '{Active}' active(d) DEFAULT
    
    LIST Discount OBJECT d
;

NAVIGATOR {
    operations {
        NEW discounts;
    }
}

// meta
META defineDocSalesDiscount(doc, let)
    salesDiscount = DATA Discount (###doc##Line);
    nameSalesDiscount 'Discount' (###doc##Line l) = name(salesDiscount(l)) CHARWIDTH 10;
    
    changeSalesDiscount(###doc##Line l) {
        processDiscountPrice(l);
        DIALOG selectDiscount OBJECTS l = l, d = salesDiscount(l) CHANGE;
    } 
    
    EXTEND FORM doc
        PROPERTIES(l) READONLYIF readonly(let) nameSalesDiscount BEFORE discount(l) ON CHANGE changeSalesDiscount(l)
    ;
    
    WHEN LOCAL CHANGED(salesDiscount(###doc##Line l)) AND NOT priceType(salesDiscount(l)) AND NOT CHANGED(discount(l)) DO
        discount(l) <- discount(salesDiscount(l));
    
    WHEN LOCAL CHANGED(salesDiscount(###doc##Line l)) AND priceType(salesDiscount(l)) AND NOT CHANGED(discountPrice(l)) DO {
        discountPrice(l) <- priceA(priceType(salesDiscount(l)), item(l), dateTime(l));
        recalcDiscount(l);
    }
END