MODULE SalesPricelist;

REQUIRE SalesPricelistType, Item, Partner, ItemSales, PartnerSales, TaxItem, SalesSettings, SalesPriceType, CostLedger, Doc;

NAMESPACE Sales; 

CLASS Pricelist 'Прайс-лист';

type 'Тип' = DATA PricelistType (Pricelist);
nameType 'Тип' (Pricelist p) = name(type(p));

WHEN LOCAL SET(Pricelist p IS Pricelist) AND NOT CHANGED(type(p)) DO type(p) <- defaultPricelistType();

@defineStatus(pricelist, 'прайс-листа');

startDateTime 'Начало действия' = DATA DATETIME (Pricelist) NONULL;
startDateTime(Pricelist l) <- currentDateTime() WHEN SET(l IS Pricelist);

endDateTime 'Окончание действия' = DATA DATETIME (Pricelist);

@defineNumber(pricelist, 'Прайс-листы', 'ПЛ');

note 'Примечание' = DATA STRING[50] (Pricelist);

// price types
editIn 'Изменять цены' = DATA BOOLEAN (Pricelist, PriceType);

priceListTypes 'Виды цен' (Pricelist pricelist) = 
    GROUP CONCAT name(PriceType pricelistType) IF editIn(pricelist, pricelistType) , ', '
          ORDER pricelistType CHARWIDTH 10 MATERIALIZED;

WHEN LOCAL CHANGED (type(Pricelist pl)) AND NOT priceListTypes(pl) DO editIn(pl, PriceType pt) <- in(type(pl), pt);

FORM chooseTypes 'Выбор видов цен'
    OBJECTS pr = Pricelist PANEL 
    
    OBJECTS t = PriceType
    PROPERTIES(t) READONLY name 
    PROPERTIES(pr, t) editIn[Pricelist,PriceType]
;

// lines
CLASS PricelistLine 'Номенклатура';

pricelist 'Прайс-лист' = DATA Pricelist (PricelistLine) NONULL DELETE;

index '№' = PARTITION SUM 1 ORDER PricelistLine l BY pricelist(l) IN id MATERIALIZED CHARWIDTH 3;

item 'Номенклатура' = DATA Item (PricelistLine);
nameItem 'Номенклатура' (PricelistLine prl) = name(item(prl));

uom = DATA Uom (PricelistLine);
nameUom 'Ед. изм.' (PricelistLine l) = name(uom(l)); 
WHEN LOCAL CHANGED(item(PricelistLine l)) DO uom(l) <- uom(item(l));

costPrice 'Себестоимость' = DATA NUMERIC[32,16] (PricelistLine);
WHEN LOCAL SETCHANGED(item(PricelistLine l)) DO costPrice(l) <- overCost(item(l));

markup 'Надбавка' = DATA NUMERIC[10,2] (PricelistLine, PriceType);
price 'Цена' = DATA NUMERIC[10,2] (PricelistLine, PriceType);

CONSTRAINT DROPPED(PriceType t IS PriceType) AND PREV(price(PricelistLine l, t))
    MESSAGE 'Запрещено удалять виды цен, по которым есть прайсы';

// events
noTaxPrice (PricelistLine l, PriceType t) = 
    price(l, t) / (OVERRIDE (100.0 + salesTax(item(l))) / 100.0 IF taxIncluded(t), 1.0);

WHEN LOCAL (SETCHANGED(costPrice(PricelistLine l)) OR SETCHANGED(price(l, PriceType t))) AND NOT CHANGED(markup(l, t)) DO
    markup(l, t) <- round2((noTaxPrice(l, t) * 100.0 / costPrice(l)) - 100.0);

calcPrice(PricelistLine l, PriceType t) = 
    NUMERIC[10,2](costPrice(l) * 
                  (markup(l, t) + 100.0) / 100.0 * 
                  (OVERRIDE (100.0 + salesTax(item(l))) / 100.0 IF taxIncluded(t), 1.0));

changeMarkup (PricelistLine l, PriceType t) {
    INPUT val = markup(l, t) CHANGE DO {
        price(l, t) <- calcPrice(l, t);
    }
}

// Line properties
nameStatus 'Статус' (PricelistLine l) = nameStatus(pricelist(l));
number 'Номер' (PricelistLine prl) = number(pricelist(prl));
startDateTime 'Начало действия' (PricelistLine prl) = startDateTime(pricelist(prl));
endDateTime 'Окончание действия' (PricelistLine prl) = endDateTime(pricelist(prl));
note 'Примечание' (PricelistLine prl) = note(pricelist(prl));

editIn (PricelistLine pl, PriceType priceType) = editIn(pricelist(pl), priceType);

FORM pricelist 'Прайс-лист'
    OBJECTS p = Pricelist PANEL
    PROPERTIES(p) nameType, number, startDateTime, endDateTime, note,
                  priceListTypes READONLYIF NOT isDraft(p) ON CHANGE { SHOW chooseTypes OBJECTS pr = p; }

    OBJECTS t = PriceType
    FILTERS editIn(p, t) 
   
    OBJECTS l = PricelistLine
    PROPERTIES(l) index READONLY, nameItem, nameUom READONLY, costPrice SHOWIF showCost(type(p)) READONLY
    PROPERTIES    markup(l, t) COLUMNS 'p' (t) HEADER name(t) + ' (надбавка)' SHOWIF showMarkup(type(p)) ON CHANGE changeMarkup(l, t)
    PROPERTIES    price(l, t) COLUMNS 'p' (t) HEADER name(t) 
    PROPERTIES(l) NEW, DELETE 
    FILTERS pricelist(l) = p 

    EDIT Pricelist OBJECT p
;

DESIGN pricelist {
    OBJECTS {
        NEW header {
            type = CONTAINERH;
            NEW params {
                NEW title {
                    type = CONTAINERH;
                    MOVE PROPERTY (nameType(p));
                    MOVE PROPERTY(number(p));
                }
                NEW period {
                    type = CONTAINERH;
                    MOVE PROPERTY(startDateTime(p)) { caption = 'Действует с '; }
                    MOVE PROPERTY(endDateTime(p)) { caption = 'по '; }
                }
                MOVE PROPERTY(priceListTypes(p)); 
                MOVE PROPERTY(note(p)); 
            }
        }
        NEW details {
            fill = 1;
            type = TABBED;
            MOVE BOX(l) {
                PROPERTY(markup(l, t)) { background = RGB(212,242,252); }
                PROPERTY(price(l, t)) { background = RGB(198,230,247); }
            }
        }
    }
}

FORM pricelists 'Прайс-листы'
    OBJECTS p = Pricelist
    PROPERTIES(p) READONLY number, startDateTime, endDateTime, note, priceListTypes
    PROPERTIES(p) NEWSESSION NEW, EDIT ,DELETE
    
    LIST Pricelist OBJECT p
;

@defineStatusForm(pricelist, p);
@defineDocLinesCount(pricelist, p);

NAVIGATOR {
    operations {
        NEW pricelists;    
    }
}

// copy
copy 'Копировать' (Pricelist pl) {
    NEWSESSION {
        NEW p = Pricelist {
            type(p) <- type(pl);
            startDateTime(p) <- startDateTime(pl);
            endDateTime(p) <- endDateTime(pl);
            note(p) <- note(pl);
            editIn(p, PriceType t) <- editIn(pl, t);
            FOR pricelist(PricelistLine l)  = pl DO NEW nl = PricelistLine {
                pricelist(nl) <- p;
                item(nl) <- item(l);
                price(nl, PriceType t) <- price(l, t);
            }
            SHOW pricelist OBJECTS p = p;
        }
    }
}

EXTEND FORM pricelist
    PROPERTIES(p) copy 
;

DESIGN pricelist {
    secondaryActions {
        MOVE PROPERTY(copy(p)); 
    }
}