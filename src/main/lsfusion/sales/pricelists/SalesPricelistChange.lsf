MODULE SalesPricelistChange;

REQUIRE SalesPricelistValue, SalesPriceTypeMarkup;

NAMESPACE Sales;

// change prices
CLASS ChangePriceType 'Price change type' {
    markupPriceList 'Set markups from previous prices',
    markupPriceType 'Set markups from price types',
    pricePriceList 'Set prices from previous prices'
}

name '{Name}' (ChangePriceType o) = staticCaption(o) IF o IS ChangePriceType CHARWIDTH 50;

FORM dialogChangePriceTypes 'Price change type'
    OBJECTS o = ChangePriceType
    PROPERTIES(o) READONLY name
    
    LIST ChangePriceType OBJECT o
;

changePriceType = DATA LOCAL ChangePriceType ();
nameChangePriceType 'Price change type' = name(changePriceType());

change 'Change to, %' = DATA LOCAL NUMERIC[10,2] ();

FORM changePrices 'Price change'
    PROPERTIES() nameChangePriceType, 
                 change SHOWIF changePriceType() = ChangePriceType.pricePriceList 
;

DESIGN changePrices {
    height = 100;
    OBJECTS {
        NEW params {
            alignment = STRETCH;
            MOVE PROPERTY(nameChangePriceType()) { alignment = STRETCH; }
            MOVE PROPERTY(change()) { alignment = STRETCH; }
        }
    }
}

changePrices 'Change prices' (Pricelist p) {
    DIALOG changePrices DO {
        CASE 
            WHEN changePriceType() = ChangePriceType.markupPriceList THEN {
                markup(PricelistLine l, PriceType t) <- 
                    OVERRIDE markup(pricelistLineB(t, item(l), startDateTime(p)), t), markup(t, item(l))
                    WHERE pricelist(l) = p AND editIn(p, t); 
                price(PricelistLine l, PriceType t) <- calcPrice(l, t)
                    WHERE pricelist(l) = p AND editIn(p, t);
            }
            WHEN changePriceType() = ChangePriceType.markupPriceType THEN {
                markup(PricelistLine l, PriceType t) <- markup(t, item(l))
                    WHERE pricelist(l) = p AND editIn(p, t);
                price(PricelistLine l, PriceType t) <- calcPrice(l, t)
                    WHERE pricelist(l) = p AND editIn(p, t);
            }
            WHEN changePriceType() = ChangePriceType.pricePriceList THEN
                price(PricelistLine l, PriceType t) <- 
                    NUMERIC[10,2](priceB(t, item(l), startDateTime(p)) * OVERRIDE (100.0 (+) change()) / 100.0, 1.0)
                    WHERE pricelist(l) = p AND editIn(p, t); 
    }
}

// autoset markup for line
WHEN LOCAL (CHANGED(item(PricelistLine l)) OR SET(editIn(l, PriceType t))) AND 
           editIn(l, t) AND markup(t, item(l)) AND
           NOT CHANGED(markup(l, t)) AND NOT CHANGED(price(l, t)) INLINE DO {
    markup(l, t) <- markup(t, item(l));
    price(l, t) <- calcPrice(l, t);            
}
           

EXTEND FORM pricelist
    PROPERTIES(p) DISABLEIF readonly(p) changePrices DRAW p
;

DESIGN pricelist {
    secondaryActions {
        MOVE PROPERTY(changePrices(p)) { valueClass = 'btn-secondary'; }
    } 
}