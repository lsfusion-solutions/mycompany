MODULE SalesOrderManufacturing;

REQUIRE SalesOrder, SalesOrderType, SalesOrderConfirmed, SalesOrderCanceled,
        ManufacturingOrder, ManufacturingOrderDone, ManufacturingOrderCanceled;

NAMESPACE Sales;

// order line
bom 'Спецификация' = DATA Bom (OrderLine);
nameBom 'Спецификация' (OrderLine l) = name(bom(l)); 

CONSTRAINT bom(OrderLine l) AND NOT item(l) = item(bom(l)) CHECKED BY bom[OrderLine]
    MESSAGE 'Спецификация должна соответствовать выбранной номенклатуре';

// order type
typeManufacturingOrder 'Тип заказа на производство' = DATA ManufacturingOrderType (OrderType);
nameTypeManufacturingOrder 'Тип заказа на производство' (OrderType t) = name(typeManufacturingOrder(t));
EXTEND FORM orderType PROPERTIES nameTypeManufacturingOrder(o);

WHEN LOCAL CHANGED(item(OrderLine l)) AND typeManufacturingOrder(type(Order o))
    DO bom(l) <- defaultBom(item(l));

// manufacturing order
orderLine = DATA OrderLine (ManufacturingOrder) INDEXED;
numberDateOrder 'Заказ' (ManufacturingOrder mo) = numberDate(order(orderLine(mo)));

manufacturingOrder (OrderLine l) = GROUP AGGR ManufacturingOrder mo BY orderLine(mo);
countFreeBomLines (Order o)= GROUP SUM 1 IF order(OrderLine l) == o AND bom(l) AND NOT manufacturingOrder(l);

CONSTRAINT DROPPED(OrderLine l IS OrderLine) AND PREV(manufacturingOrder(l))
    MESSAGE 'Нельзя удалить строку на основании которой создан производственный заказ';

openOrder (ManufacturingOrder mo) { 
    edit(order(orderLine(mo))); 
}

EXTEND FORM manufacturingOrder
    PROPERTIES(o) numberDateOrder ON CHANGE openOrder(o) SHOWIF order(orderLine(o))
;

DESIGN manufacturingOrder {
    headerRight {
        MOVE PROPERTY(numberDateOrder(o)) BEFORE PROPERTY (nameItem(o));
    }
}

EXTEND FORM manufacturingOrders
    PROPERTIES(o) READONLY numberDateOrder
;

newManufacturingOrder (OrderLine l) {
    NEW o = ManufacturingOrder { 
        orderLine(o) <- l;
        type(o) <- typeManufacturingOrder(type(order(l)));
        materialsLocation(o) <-materialsLocation(typeManufacturingOrder(type(order(l))));
        scheduledDateTime(o) <- scheduledDateTime(order(l));
        productsLocation(o) <- location(order(l));
        company(o) <- defaultCompany();
        item(o) <- item(l);
        uom(o) <- uom(l);
        bom(o) <- bom(l);
        fillByQuantity(o, quantity(l));
    }
}

// sales order
needManufacturingOrders (Order o) = typeManufacturingOrder(type(o)) AND countFreeBomLines(o) AND confirmed(o);

createManufacturingOrders 'Производственные заказы' (Order o) {
    IF needManufacturingOrders(o) THEN {
        FOR order(OrderLine l) = o AND bom(l) AND NOT manufacturingOrder(l) INLINE DO {
            newManufacturingOrder(l);
        }
    }
}

EXTEND FORM order
    PROPERTIES createManufacturingOrders(o) SHOWIF needManufacturingOrders(o)
    PROPERTIES nameBom(l)  BACKGROUND colorStatus(manufacturingOrder(l)) SHOWIF typeManufacturingOrder(type(o)) READONLYIF manufacturingOrder(l)
    
    OBJECTS mo = ManufacturingOrder
    PROPERTIES(mo) READONLY nameStatus BACKGROUND colorStatus(mo), number, scheduledDateTime
    FILTERS order(orderLine(mo)) = o
;

DESIGN order {
    relatedDoc  {
        MOVE BOX(mo) {
             GRID(mo) { headerHeight = 24; }
        }
        REMOVE TOOLBARSYSTEM(mo);
    }
    primaryActions {
        MOVE PROPERTY(createManufacturingOrders(o)) { fontStyle = 'bold'; };
    }
}

autoCreateManufacturingOrder 'Автоматически создавать производственный заказ' = DATA BOOLEAN (OrderType);
EXTEND FORM orderType PROPERTIES autoCreateManufacturingOrder(o) SHOWIF typeManufacturingOrder(o);

WHEN SET(confirmed(Order o)) AND autoCreateManufacturingOrder(type(o)) DO
    createManufacturingOrders(o);
WHEN SET(canceled(order(OrderLine l))) AND manufacturingOrder(l) AND autoCreateManufacturingOrder(type(order(l))) DO
    canceled(manufacturingOrder(l)) <- TRUE;
WHEN CHANGED(quantity(OrderLine l)) AND autoCreateManufacturingOrder(type(order(l))) AND manufacturingOrder(l) DO
    fillByQuantity(manufacturingOrder(l), quantity(l));
WHEN CHANGED(item(OrderLine l)) AND autoCreateManufacturingOrder(type(order(l))) AND manufacturingOrder(l) DO {
    item(manufacturingOrder(l)) <- item(l);
    uom(manufacturingOrder(l)) <- uom(l);
    fillByQuantity(manufacturingOrder(l), quantity(l));
}
WHEN CHANGED(bom(OrderLine l)) AND autoCreateManufacturingOrder(type(order(l))) AND manufacturingOrder(l) DO {
    bom(manufacturingOrder(l)) <- bom(l);
    fillByQuantity(manufacturingOrder(l), quantity(l));    
}    

countManufacturingOrders (Order o) = GROUP SUM 1 IF order(orderLine(ManufacturingOrder mo)) == o AND started(mo);
CONSTRAINT SET(canceled(Order o)) AND PREV(countManufacturingOrders(o))
    MESSAGE 'Нельзя отменить заказ, к которому существуют действующие производственные заказы';
CONSTRAINT CHANGED(quantity(OrderLine l)) AND manufacturingOrder(l) AND started(manufacturingOrder(l))
    MESSAGE 'Нельзя изменить количество в строке, к которой существует действующий производственный заказ';
CONSTRAINT CHANGED(item(OrderLine l)) AND manufacturingOrder(l) AND started(manufacturingOrder(l))
    MESSAGE 'Нельзя изменить номенклатуру в строке, к которой существует действующий производственный заказ';
CONSTRAINT CHANGED(bom(OrderLine l)) AND manufacturingOrder(l) AND started(manufacturingOrder(l))
    MESSAGE 'Нельзя изменить спецификацию в строке, к которой существует действующий производственный заказ';
