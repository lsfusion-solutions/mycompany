MODULE SalesOrder;

REQUIRE Time, MetaNumerator, Employee, Company, DateUtils, FileUtils, Comments, Activity,
        MetaTax, TaxItem, BarCode, LocationEmployee, Department,
        SalesSettings, PartnerSales, ItemSales, SalesOrderType,
        PaymentTermsSales, ServiceP, Doc;  

NAMESPACE Sales;

CLASS Order 'Sales order';

@defineDocStatus(order, 'Sales order status');

@definePropertyObject(order);
@definePropertyValue(order, status, 'Status', nameStatus);

// type
type 'Type' = DATA OrderType (Order) NONULL;
nameType 'Type' (Order s) = name(type(s));
@definePropertyValue(order, type, 'Type', nameType);

WHEN LOCAL SET(Order o IS Order) AND NOT CHANGED(type(o)) DO type(o) <- defaultOrderType(); 

dateTime 'Date' = DATA DATETIME (Order) IN id;
dateTime(Order o) <- currentDateTime() WHEN SET(o IS Order);
@defineDateTimeAggregation(Order);
@definePropertyValue(order, date, 'Date');

@defineNumberType(order);
@definePropertyValue(order, number, 'Number');

numberDate 'Description' (Order o) = number(o) + ' (' + dateTime(o) + ')' IN id;

// customer
customer 'Customer' = DATA Partner (Order) NONULL;
nameCustomer 'Customer' (Order o) = name(customer(o)) IN id;
addressCsvCustomer 'Customer address' (Order o) = addressCsv(customer(o));
@definePropertyValue(order, customer, 'Customer', nameCustomer);

numberDateCustomer (Order o) = CONCAT ' ', numberDate(o), '(' + nameCustomer(o) + ')';

CONSTRAINT customer(Order o) AND NOT isCustomer(customer(o))
                CHECKED BY customer[Order]
                MESSAGE 'The partner of the sales order must be a customer';

@defineDocDepartment(order, customer);

// Quotation
validity 'Validity' = DATA DATETIME (Order);

// Invoicing information
paymentTerms = DATA PaymentTerm (Order);
namePaymentTerms 'Payment terms' (Order o)= name(paymentTerms(o));

WHEN LOCAL CHANGED(customer(Order o)) AND NOT CHANGED(paymentTerms(o)) DO paymentTerms(o) <- customerPaymentTerms(customer(o)); 

// company
company 'Company' = DATA Company (Order) NONULL;
nameCompany 'Company' (Order o) = name(company(o));
WHEN LOCAL SET(Order o IS Order) AND NOT CHANGED(company(o)) DO company(o) <- defaultCompany();
@definePropertyValue(order, company, 'Company', nameCompany);

// Shipping information
scheduledDateTime 'Scheduled date' = DATA DATETIME (Order) IN id;
scheduledDateTime(Order o) <- currentDateTime() WHEN SET(o IS Order);
@definePropertyValue(order, scheduledDateTime, 'Scheduled date');

scheduledDate 'Scheduled date' (Order o) = DATE(scheduledDateTime(o));

deliveryAddress 'Delivery address' = DATA STRING (Order) CHARWIDTH 20;
WHEN LOCAL (CHANGED(customer(Order o)) OR CHANGED(department(o))) AND NOT CHANGED(deliveryAddress(o)) DO 
    deliveryAddress(o) <- OVERRIDE addressCsv(department(o)), addressCsvCustomer(o);

// location
location = DATA Location (Order) PREREAD;
nameLocation 'Location' (Order o) = name(location(o));
CONSTRAINT SETCHANGED(location(Order o)) AND internalUse(location(o)) CHECKED BY location[Order]
    MESSAGE 'The selected location is for internal use';
@definePropertyValue(order, location, 'Location', nameLocation);

// currency
currency = DATA Currency (Order);
nameCurrency 'Currency' (Order o) = name(currency(o));
@definePropertyValue(order, currency, 'Currency', nameCurrency);

WHEN LOCAL SETCHANGED(type(Order o)) AND currency(type(o)) AND NOT CHANGED(currency(o)) DO currency(o) <- currency(type(o));  

// Sales information
representative 'Our representative' = DATA Employee (Order);
nameRepresentative 'Our representative' (Order o)= MasterData.name(representative(o));
@definePropertyValue(order, representative, 'Our representative', nameRepresentative);

representative(Order o) <- currentUser() IF currentUser() IS Employee WHEN SET(o IS Order);

customerReference '{Customer_reference}' = DATA STRING[30] (Order) INDEXED;
@definePropertyValue(order, customerReference, '{Customer_reference}');

note 'Note' = DATA ISTRING (Order) CHARWIDTH 20;

details 'Details' = DATA RICHTEXT (Order);

// Lines
CLASS OrderLine 'Order line';
order =  DATA Order (OrderLine) NONULL DELETE;

index 'â„–' = PARTITION SUM 1 ORDER OrderLine l BY order(l) IN id MATERIALIZED CHARWIDTH 3;

item = DATA Item (OrderLine) NONULL;
nameItem '{Item}' (OrderLine l) = name(item(l));
idBarCodeItem 'Barcode' (OrderLine l) = idBarCode(item(l));
idItem '{ID}' (OrderLine l) = id(item(l));
referenceItem 'Reference' (OrderLine l) = reference(item(l));
isService 'Service' (OrderLine l) = item(l) IS Service;

nameCategoryItem 'Category' (OrderLine l) = nameCategory(item(l));
level1Item 'Category 1' (OrderLine l) = level1(item(l));
level2Item 'Category 2' (OrderLine l) = level2(item(l));
level3Item 'Category 3' (OrderLine l) = level3(item(l));
level4Item 'Category 4' (OrderLine l) = level4(item(l));

CONSTRAINT item(OrderLine l) AND NOT canBeSold(item(l))
            CHECKED BY item[OrderLine] 
            MESSAGE 'The item is not for sale';

description 'Description' = DATA ISTRING (OrderLine) CHARWIDTH 20;

uom (OrderLine l) = uom(item(l));
nameUom 'UoM' (OrderLine l) = name(uom(l));

quantity '{Quantity}' = DATA NUMERIC[16,3] (OrderLine);

price 'Price' = DATA NUMERIC[10,2] (OrderLine);

defaultPrice = ABSTRACT CASE NUMERIC[10,2] (OrderLine);
WHEN LOCAL SETCHANGED(item(OrderLine l)) AND NOT CHANGED(price(l)) DO price(l) <- defaultPrice(l);

defaultPrice (OrderLine l) += WHEN salesPrice(item(l)) THEN salesPrice(item(l)); 

@defineDocDiscount(order);

@defineTaxCalc(order, o, sales, resultPrice);
taxIncluded (OrderLine l) += taxIncluded(type(order(l)));

WHEN LOCAL CHANGED(item(OrderLine ol)) DO {
    in(ol, Tax t) <- salesIn(item(ol), t); 
}

// Line properties
nameType 'Type' (OrderLine l) = nameType(order(l));
status 'Status' (OrderLine l) = status(order(l));
imagedNameStatus 'Status' (OrderLine l) = imagedNameStatus(order(l));
type (OrderLine l) = type(order(l)); 
dateTime 'Date' (OrderLine l) = dateTime(order(l)) IN id;
date 'Date' (OrderLine l) = date(order(l));
number 'Number' (OrderLine l) = number(order(l)) IN id;
numberDate 'Description' (OrderLine l) = numberDate(order(l));
location 'Location' (OrderLine l) = location(order(l));
nameLocation 'Location' (OrderLine l) = nameLocation(order(l));

customer (OrderLine l) = customer(order(l));
nameCustomer 'Customer' (OrderLine l) = nameCustomer(order(l));

scheduledDateTime 'Scheduled date' (OrderLine l) = scheduledDateTime(order(l));
scheduledDate 'Scheduled date' (OrderLine l) = scheduledDateTime(order(l));

currency (OrderLine l) = currency(order(l));
nameCurrency 'Currency' (OrderLine l) = nameCurrency(order(l));

FORM order 'Sales order'
    OBJECTS o = Order PANEL
    PROPERTIES(o) READONLYIF readonly(o)
                  nameType, dateTime, number, 
                  nameCustomer, nameDepartment SHOWIF countDepartment(customer(o)), 
                  nameCompany, nameLocation, nameCurrency,
                  validity,
                  namePaymentTerms, addressCsvCustomer,
                  scheduledDateTime, deliveryAddress, 
                  nameRepresentative, customerReference, note,
                  details
    PROPERTIES(o) READONLY untaxedAmount, taxAmount, amount
                 
    OBJECTS l = OrderLine
    PROPERTIES(l) READONLYIF readonly(o)
                  index, nameItem, description, nameUom, idBarCodeItem, idItem, referenceItem, quantity, price, untaxedAmount, taxes,
                  NEW, DELETE
    FILTERS order(l) = o
    
    EDIT Order OBJECT o    
;      

DESIGN order {
    caption = badged('Sales order', number(o) + '(' + dateTime(o) + ')');
    OBJECTS {
        NEW header {
            alignment = STRETCH;   
            horizontal = TRUE;
            NEW headerLeft {
                MOVE PROPERTY(nameType(o)) { notNull = TRUE; };
                MOVE PROPERTY(dateTime(o));
                MOVE PROPERTY(number(o));
            }
            NEW headerRight {
                MOVE PROPERTY(nameCustomer(o)) { notNull = TRUE; } 
                MOVE PROPERTY(nameDepartment(o)); 
                MOVE PROPERTY(nameCompany(o)) { notNull = TRUE; }
                MOVE PROPERTY(nameLocation(o));               
                MOVE PROPERTY(nameCurrency(o));
            }    
            NEW relatedDoc {
                tabbed = TRUE;
                fill = 1;
            }                                 
        }
        NEW details {
            fill = 7;
            tabbed = TRUE;
            NEW lines {
                caption = 'Lines';
                MOVE BOX(l) {
                    caption = '';
                    PROPERTY(nameItem(l)) { notNull = TRUE; }
                }
            }
            NEW otherInformation {
                caption = 'Other information';
                lines = 2;
                NEW quotation {
                    caption = 'Quotation';
                    alignment = STRETCH;
                    MOVE PROPERTY(validity(o));
                }
                NEW invoicing {
                    caption = 'Invoicing';
                    alignment = STRETCH;
                    MOVE PROPERTY(namePaymentTerms(o));                         
                    MOVE PROPERTY(addressCsvCustomer(o));
                }
                NEW shippingInformation {
                    caption = 'Shipping';
                    alignment = STRETCH;
                    MOVE PROPERTY(scheduledDateTime(o));
                    MOVE PROPERTY(deliveryAddress(o));
                }
                NEW salesInformation {
                    caption = 'Others';
                    alignment = STRETCH;
                    MOVE PROPERTY(nameRepresentative(o));                                       
                    MOVE PROPERTY(customerReference(o));
                    MOVE PROPERTY(note(o));
                }
            }            
            NEW detailsInformation {
                caption = 'Details';
                MOVE PROPERTY(details(o)) { 
                    caption = ''; 
                    fill = 1; 
                    height = 300; 
                }
            }
        }
        NEW footer {
            align = END;
            horizontal = TRUE; 
            NEW total {
                caption = 'Total';
                horizontal = TRUE;
                MOVE PROPERTY(untaxedAmount(o));
                MOVE PROPERTY(taxAmount(o));
                MOVE PROPERTY(amount(o));                     
            }
        }
    }            
}

showOrder (LONG id) {
    FOR LONG(Order o AS Order) = id DO
        SHOW order OBJECTS o = o DOCKED MANAGESESSION;
} @@api;

@defineDocDiscountForm(order, o);

background = ABSTRACT CASE COLOR (Order);
FORM orders 'Sales orders'
     OBJECTS o = Order BACKGROUND background(o)
     PROPERTIES(o) READONLYIF isReadonly()
                            number, dateTime, nameCustomer, 
                            nameType, nameDepartment, nameCompany,
                            validity,
                            namePaymentTerms, addressCsvCustomer,
                            scheduledDateTime, deliveryAddress, nameLocation, 
                            nameRepresentative, customerReference, note,
                            untaxedAmount, taxAmount, amount, nameCurrency
                            
     PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE 
;

@extendFormEditable(orders);

@defineDocHistoryLine(order, item);
@defineDocHistoryLineProperty(order, OrderLine, quantity, 'Qty', nameItem);
@defineHistoryForm(order, order, o);

@defineDocObjectsForm(orders, o, 'Sales orders');
@defineDocStatusForm(order, o);
@defineDocLinesCount(order, o);
@defineDocLocationAccess(order, o);

@defineObjectActivity(order, o, details, numberDateCustomer);

@defineObjectComments(order, o, details);

@defineObjectCommentsActivity(order);

@defineObjectFiles(order, o, 'Sales order file');

NAVIGATOR {
    operations {
        NEW orders FIRST;    
    }
}

clone (Order to, Order from) {
    type(to) <- type(from);
    customer(to) <- customer(from);
    paymentTerms(to) <- paymentTerms(from);
    company(to) <- company(from);
    location(to) <- location(from);
    currency(to) <- currency(from);
    representative(to) <- representative(from); 
    note(to) <- note(from);
    FOR order(OrderLine l) = from INLINE NEW nl = OrderLine DO {
        order(nl) <- to;
        item(nl) <- item(l);
        description(nl) <- description(l);
        
        quantity(nl) <- quantity(l);
        
        price(nl) <- price(l);
    }
}

copy 'Copy' (Order from)  { 
    NEWSESSION {
        NEW to = Order {
            clone(to, from);
            SHOW order OBJECTS o = to DOCKED;
        }
    }
}

EXTEND FORM order PROPERTIES copy(o);

DESIGN order {
    secondaryActions {
        MOVE PROPERTY(copy(o)) { valueClass = 'btn-secondary'; };
    }
}