MODULE SalesPricelistPurchase;

REQUIRE SalesPricelistDone, PurchasePricelistDone;

NAMESPACE Sales;

pricelistType = DATA PricelistType ();
namePricelistType 'Type of price list for sale' () = name(pricelistType());

EXTEND FORM Purchase.options PROPERTIES namePricelistType();
DESIGN Purchase.options {
    commons {
        MOVE PROPERTY(namePricelistType());
    }
}

// lines
pricelistLine = DATA Purchase.PricelistLine (PricelistLine) INDEXED;

in (Purchase.Pricelist i, Pricelist s) = GROUP SUM 1 IF pricelist(pricelistLine(PricelistLine l)) = i AND pricelist(l) = s MATERIALIZED; 

countPricelist (Pricelist s) = GROUP SUM 1 IF in(Purchase.Pricelist i, s) MATERIALIZED;
countPricelists (Purchase.Pricelist i) = GROUP SUM 1 IF in(i, Pricelist s) MATERIALIZED;
numberDatePricelist 'Pricelists' (Pricelist s) = GROUP CONCAT numberDate(Purchase.Pricelist i) IF in(i, s), ',' ORDER i CHARWIDTH 30; 
numberDatePricelistLine 'Pricelists' (PricelistLine s) = numberDate(pricelistLine(s)); 

numberDatePricelists 'Pricelists' (Purchase.Pricelist s) = GROUP CONCAT numberDate(Pricelist i) IF in(s, i), ',' ORDER i CHARWIDTH 30;

countPricelistLine (Purchase.Pricelist b) = GROUP SUM 1 IF pricelist(pricelistLine(PricelistLine l)) = b;

// form
openPricelist (Pricelist s) { 
    FOR in(Purchase.Pricelist i, s) DO 
        edit(i); 
}
EXTEND FORM pricelist
    PROPERTIES(p) READONLYIF readonly(p) numberDatePricelist ON CHANGE openPricelist(p) SHOWIF countPricelist(p)
;
DESIGN pricelist {
    footer {
        MOVE PROPERTY(numberDatePricelist(p));
    }
}
EXTEND FORM pricelists
    PROPERTIES(p) READONLY numberDatePricelist
;
EXTEND FORM Purchase.pricelists
    PROPERTIES(p) READONLY numberDatePricelists
;

fill ABSTRACT LIST (PricelistLine, Purchase.PricelistLine);
salesPricelistCreated = DATA LOCAL Pricelist ();
newPricelist (Purchase.Pricelist b) {
    NEW r = Pricelist { 
        type(r) <- pricelistType();
        
        startDateTime(r) <- startDateTime(b);
        endDateTime(r) <- endDateTime(b);
        
        done(r) <- TRUE;    
    
        FOR pricelist(Purchase.PricelistLine l) = b AND item(l) INLINE NEW pl = PricelistLine DO {            
            pricelist(pl) <- r;
            item(pl) <- item(l);
            pricelistLine(pl) <- l;
            cost(pl) <- price(l);
            fill(pl, l);
        }
        
        salesPricelistCreated() <- r;
    }
}

createPricelist 'Create Pricelist' (Purchase.Pricelist b) {
    APPLY;
    IF canceled() THEN RETURN;
    
    NEWSESSION {
        newPricelist(b);
        SHOW pricelist OBJECTS p = salesPricelistCreated() DOCKED;
    }
} 

EXTEND FORM Purchase.pricelist
    PROPERTIES(p) createPricelistPrimary = createPricelist SHOWIF done(p) AND pricelistType() AND NOT countPricelistLine(p),
                  createPricelistSecondary = createPricelist SHOWIF done(p) AND pricelistType() AND countPricelistLine(p)

    OBJECTS sp = Pricelist
    PROPERTIES(sp) READONLY number, startDateTime, endDateTime, imagedNameStatus BACKGROUND colorStatus(sp), nameType
    PROPERTIES(sp) NEWSESSION EDIT GRID   
    FILTERS in(p, sp)
;

DESIGN Purchase.pricelist {
    primaryActions {
        MOVE PROPERTY(createPricelistPrimary) { valueClass = 'btn-primary'; }
    }
    secondaryActions {
        MOVE PROPERTY(createPricelistSecondary) { valueClass = 'btn-secondary'; }
    }
    relatedDoc {
        MOVE BOX(sp) {
            showIf = pricelistType();
            caption = badged('Pricelists', countPricelists(p));
            GRID(sp) {
                width = 100;
                autoSize = TRUE;
            }
        }
        REMOVE TOOLBARSYSTEM(sp);
    }
}

