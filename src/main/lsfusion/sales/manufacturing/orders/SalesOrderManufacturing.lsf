MODULE SalesOrderManufacturing;

REQUIRE SalesOrder, SalesOrderType, SalesOrderConfirmed, SalesOrderCanceled,
        ManufacturingOrder, ManufacturingOrderCanceled;

NAMESPACE Sales;

// order line
bom 'Bill of Materials' = DATA Bom (OrderLine);
nameBom 'Bill of Materials' (OrderLine l) = name(bom(l)); 

CONSTRAINT bom(OrderLine l) AND NOT item(l) = item(bom(l)) CHECKED BY bom[OrderLine]
    MESSAGE 'The BOM must match the selected item';

// order type
manufacturingOrderType 'Manufacturing order type' = DATA ManufacturingOrderType (OrderType);
nameManufacturingOrderType 'Manufacturing order type' (OrderType t) = name(manufacturingOrderType(t));
EXTEND FORM orderType PROPERTIES nameManufacturingOrderType(o);

WHEN LOCAL CHANGED(item(OrderLine l)) AND manufacturingOrderType(type(Order o))
    DO bom(l) <- defaultBom(item(l));

// manufacturing order
orderLine = DATA OrderLine (ManufacturingOrder) INDEXED;
numberDateSalesOrder 'Sales order' (ManufacturingOrder mo) = numberDate(order(orderLine(mo)));

untaxedAmount '{Amount}' (ManufacturingOrder o) = untaxedAmount(orderLine(o));
taxAmount 'Taxes' (ManufacturingOrder o) = taxAmount(orderLine(o));
amount 'Total amount' (ManufacturingOrder o) = amount(orderLine(o));

manufacturingOrder (OrderLine l) = GROUP AGGR ManufacturingOrder mo BY orderLine(mo);

countFreeBomLine (Order o) = GROUP SUM 1 IF order(OrderLine l) = o AND bom(l) AND NOT manufacturingOrder(l);
countManufacturingOrder (Order o) = GROUP SUM 1 IF order(orderLine(ManufacturingOrder mo)) = o;

CONSTRAINT DROPPED(OrderLine l IS OrderLine) AND PREV(manufacturingOrder(l))
    MESSAGE 'You cannot delete the line from which the production order was created';

openOrder (ManufacturingOrder mo) { 
    edit(order(orderLine(mo))); 
}

EXTEND FORM manufacturingOrder
    PROPERTIES(o) numberDateSalesOrder ON CHANGE openOrder(o) SHOWIF orderLine(o)
;

DESIGN manufacturingOrder {
    footer {
        MOVE PROPERTY(numberDateSalesOrder(o));
    }
}

EXTEND FORM manufacturingOrders
    PROPERTIES(o) READONLY numberDateSalesOrder
;

fill ABSTRACT LIST (ManufacturingOrder, OrderLine);

newManufacturingOrder (OrderLine l) {
    NEW o = ManufacturingOrder { 
        orderLine(o) <- l;
        waiting(o) <- TRUE;

        type(o) <- manufacturingOrderType(type(order(l)));
        scheduledDateTime(o) <- scheduledDateTime(order(l));

        productsLocation(o) <- location(order(l));
        
        item(o) <- item(l);
        bom(o) <- bom(l);
        
        fillByQuantity(o, quantity(l));
        
        fill(o, l);
    }
}

// sales order
needManufacturingOrders (Order o) = manufacturingOrderType(type(o)) AND countFreeBomLine(o) AND confirmed(o);

createManufacturingOrders 'Manufacturing orders' (Order o) {
    IF needManufacturingOrders(o) THEN {
        FOR order(OrderLine l) = o AND bom(l) AND NOT manufacturingOrder(l) INLINE DO {
            newManufacturingOrder(l);
        }
    }
}

EXTEND FORM order
    PROPERTIES createManufacturingOrders(o) SHOWIF needManufacturingOrders(o)
    PROPERTIES nameBom(l) BACKGROUND colorStatus(manufacturingOrder(l)) SHOWIF manufacturingOrderType(type(o)) READONLYIF manufacturingOrder(l)
    
    OBJECTS mo = ManufacturingOrder
    PROPERTIES(mo) READONLY number, scheduledDateTime, imagedNameStatus BACKGROUND colorStatus(mo), nameType
    PROPERTIES(mo) NEWSESSION EDIT GRID
    FILTERS order(orderLine(mo)) = o
;

DESIGN order {
    relatedDoc  {
        MOVE BOX(mo) {
            caption = badged('Manufacturing orders', countManufacturingOrder(o));
            GRID(mo) { 
                width = 100;
                autoSize = TRUE;
            }
        }
        REMOVE TOOLBARSYSTEM(mo);
    }
    primaryActions {
        MOVE PROPERTY(createManufacturingOrders(o)) { valueClass = 'btn-primary'; };
    }
}

autoCreateManufacturingOrder 'Automatically create a production order' = DATA BOOLEAN (OrderType);
EXTEND FORM orderType PROPERTIES autoCreateManufacturingOrder(o) SHOWIF manufacturingOrderType(o);

WHEN SET(confirmed(Order o)) AND autoCreateManufacturingOrder(type(o)) DO
    createManufacturingOrders(o);
WHEN SET(canceled(order(OrderLine l))) AND manufacturingOrder(l) AND autoCreateManufacturingOrder(type(order(l))) DO
    canceled(manufacturingOrder(l)) <- TRUE;
WHEN CHANGED(quantity(OrderLine l)) AND autoCreateManufacturingOrder(type(order(l))) AND manufacturingOrder(l) DO
    fillByQuantity(manufacturingOrder(l), quantity(l));
WHEN CHANGED(item(OrderLine l)) AND autoCreateManufacturingOrder(type(order(l))) AND manufacturingOrder(l) DO {
    item(manufacturingOrder(l)) <- item(l);
    fillByQuantity(manufacturingOrder(l), quantity(l));
}
WHEN CHANGED(bom(OrderLine l)) AND autoCreateManufacturingOrder(type(order(l))) AND manufacturingOrder(l) DO {
    bom(manufacturingOrder(l)) <- bom(l);
    fillByQuantity(manufacturingOrder(l), quantity(l));    
}    

countStartedManufacturingOrders (Order o) = GROUP SUM 1 IF order(orderLine(ManufacturingOrder mo)) = o AND started(mo);
CONSTRAINT SET(canceled(Order o)) AND PREV(countStartedManufacturingOrders(o))
    MESSAGE 'You cannot cancel an order for which there are valid production orders';
CONSTRAINT CHANGED(quantity(OrderLine l)) AND manufacturingOrder(l) AND started(manufacturingOrder(l))
    MESSAGE 'You cannot change the quantity on a line for which a valid production order exists';
CONSTRAINT CHANGED(item(OrderLine l)) AND manufacturingOrder(l) AND started(manufacturingOrder(l))
    MESSAGE 'You cannot change an item on a line for which a valid production order exists';
CONSTRAINT CHANGED(bom(OrderLine l)) AND manufacturingOrder(l) AND started(manufacturingOrder(l))
    MESSAGE 'You cannot change a BOM on a line for which a valid production order exists';
