MODULE SalesOrderShipment;

REQUIRE SalesOrder, SalesOrderConfirmed, SalesOrderCanceled, SalesOrderLocked,
        ShipmentCanceled;

NAMESPACE Sales;

// options
shipmentType = DATA ShipmentType (OrderType);
nameShipmentType 'Shipment type' (OrderType t) = name(shipmentType(t));
EXTEND FORM orderType PROPERTIES nameShipmentType(o);
 
// relation
@defineDocLineRelation(order, shipment, '{Order}', 'Shipment', o, s);

priceOrder 'Price' (ShipmentLine l) = price(orderLine(l));
discountPriceOrder 'Discount price' (ShipmentLine l) = discountPrice(orderLine(l));

reserved 'Reserved' (OrderLine ol) = 
    GROUP SUM reserved(ShipmentLine rl) IF orderLine(rl) = ol AND toReserve(shipment(rl));

done 'Done' (OrderLine ol) = 
    GROUP SUM done(ShipmentLine rl) IF orderLine(rl) = ol AND active(shipment(rl));
toShip 'Mark as Todo' (OrderLine ol) = 
    max(quantity(ol) (-) done(ol), 0) IF item(ol) IS Product MATERIALIZED;

toShip 'Mark as Todo' (Order o) = GROUP SUM toShip(OrderLine ol) IF order(ol) = o;

CONSTRAINT (quantity(OrderLine ol) (-) done(ol)) < 0 AND confirmed(order(ol)) 
    MESSAGE 'For the product, the shipment exceeds the quantity in the order';

reserveShipment = DATA Shipment (Order);

WHEN ([GROUP SUM 1 IF CHANGED(toShip(OrderLine l)) BY order(l)](Order o) OR SET(confirmed(o)) OR DROPPED(locked(o)) OR  
      CHANGED(customer(o)) OR CHANGED(scheduledDateTime(o)) OR CHANGED(location(o)) OR CHANGED(number(o))) AND 
     status(o) = OrderStatus.confirmed AND location(o) AND shipmentType(type(o)) DO {
     
    IF reserveShipment(o) AND NOT toReserve(reserveShipment(o)) THEN
        reserveShipment(o) <- NULL;
    
    IF NOT reserveShipment(o) THEN
        reserveShipment(o) <- GROUP LAST Shipment s ORDER s WHERE in(o, s) AND toReserve(s);   
         
    IF NOT reserveShipment(o) AND toShip(o) > 0 THEN
        NEW s = Shipment { 
            type(s) <- shipmentType(type(o));
            waiting(s) <- TRUE;
            
            reserveShipment(o) <- s;    
        }
        
    FOR Shipment s = reserveShipment(o) DO {
        customer(s) <- customer(o);
        department(s) <- department(o);

        scheduledDateTime(s) <- scheduledDateTime(o);

        deliveryAddress(s) <- deliveryAddress(o);
        
        location(s) <- location(o);
    }
    
    FOR order(OrderLine ol) = o AND toShip(ol) > 0 AND 
        NOT (GROUP SUM 1 IF shipment(ShipmentLine l) = reserveShipment(o) AND orderLine(l) = ol) 
            NEW sl = ShipmentLine DO {            
        shipment(sl) <- reserveShipment(o);
        product(sl) <- item(ol);
        orderLine(sl) <- ol;
    }
    initialDemand(ShipmentLine l) <- toShip(orderLine(l)) IF toShip(orderLine(l)) > 0 WHERE shipment(l) = reserveShipment(o);  
    DELETE ShipmentLine l WHERE shipment(l) = reserveShipment(o) AND NOT initialDemand(l);
    IF NOT countLines(reserveShipment(o)) THEN
        DELETE Shipment s WHERE s = reserveShipment(o); 

    precheckAvailability(reserveShipment(o));
}

forbidLockActiveShipments 'Forbid to lock orders with active shipments' = DATA BOOLEAN (OrderType);
EXTEND FORM orderType PROPERTIES(o) forbidLockActiveShipments;

WHEN SET(locked(Order o)) AND NOT forbidLockActiveShipments(type(o)) DO {
    DELETE Shipment s WHERE s = reserveShipment(o) AND toReserve(s);
}

CONSTRAINT SET(locked(Order o)) AND toReserve(reserveShipment(o)) AND forbidLockActiveShipments(type(o))
    MESSAGE 'It is forbidden to lock orders with active shipments';

overShipPartially (ShipmentLine to, ShipmentLine from) +{
    orderLine(to) <- orderLine(from);
}

FORM orderShipmentShow 'Shipments'
    OBJECTS ol = OrderLine
    
    OBJECTS sl = ShipmentLine
    PROPERTIES(sl) READONLY number, scheduledDateTime, imagedNameStatus, initialDemand, done   
    FILTERS orderLine(sl) = ol
;

EXTEND FORM order
    PROPERTIES(l) SHOWIF confirmed(o) reserved ON CHANGE { DIALOG orderShipmentShow OBJECTS ol = l; } BACKGROUND toShip(l) AND NOT reserved(l) = toShip(l)
    PROPERTIES(l) SHOWIF confirmed(o) done ON CHANGE { DIALOG orderShipmentShow OBJECTS ol = l; } BACKGROUND NOT done(l) = quantity(l)
    
    OBJECTS sh = Shipment
    PROPERTIES(sh) READONLY number, scheduledDateTime, imagedNameStatus BACKGROUND colorStatus(sh), nameType, executionDateTime   
    PROPERTIES(sh) NEWSESSION EDIT GRID   
    FILTERS in(o, sh)
;

DESIGN order {
    relatedDoc  {
        MOVE BOX(sh) {
            caption = badged('Shipments', countShipments(o));
            GRID(sh) { 
                width = 100;
                autoSize = TRUE; 
            }
        }
        REMOVE TOOLBARSYSTEM(sh);
    }
}