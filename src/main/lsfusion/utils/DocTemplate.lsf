MODULE DocTemplate;

REQUIRE MasterData, Utils;

NAMESPACE Utils;

CLASS TemplateFormat 'Template format' {
    pdf 'PDF',
    docx 'DOCX',
    xlsx 'XLSX',
    rtf 'RTF',
    html 'HTML',
    noPreview 'Printer'
}

id '{ID}' (TemplateFormat o) = getWord(staticName(o), '.', 2) IF o IS TemplateFormat CHARWIDTH 10;
name '{Name}' (TemplateFormat o) = staticCaption(o) IF o IS TemplateFormat CHARWIDTH 15;

FORM dialogTemplateFormats 'Template format'
    OBJECTS o = TemplateFormat
    PROPERTIES(o) READONLY name
    
    LIST TemplateFormat OBJECT o
;

META defineDocTemplate(doc, caption)
    CLASS ###doc##Template caption;
    name '{Name}' = DATA ISTRING[100] (###doc##Template) CHARWIDTH 15;
    
    count###doc##Template = GROUP SUM 1 IF ###doc##Template t IS ###doc##Template; 
    
    template 'Template file name' = DATA STRING (###doc##Template) CHARWIDTH 50;

    file = DATA FILE (###doc##Template);
    hasFile (###doc##Template t) = TRUE IF file(t);
    
    hasTemplate (###doc##Template t) = template(t) OR hasFile(t);
    
    openFile 'Open' (###doc##Template t) {
        IF hasFile(t) THEN {
            open(file(t));
        } ELSE IF template(t) THEN {
            readResource(template(t));
            open(resourceFile());
        } 
    }
    loadFile 'Upload' (###doc##Template t) { INPUT = file(t) CHANGE; }
    dropFile 'Reset' (###doc##Template t) { file(t) <- NULL; } 
    
    format = DATA TemplateFormat (###doc##Template);
    nameFormat 'Format' (###doc##Template t) = name(format(t));
    
    exportFileName 'Export file name' = DATA STRING (###doc##Template) CHARWIDTH 50;

    FORM doc##Template caption
        OBJECTS o = ###doc##Template PANEL
        PROPERTIES(o) name, 
                      template SHOWIF NOT hasFile(o), openFile,
                      loadFile, dropFile SHOWIF hasFile(o),
                      nameFormat, exportFileName SHOWIF format(o) != TemplateFormat.noPreview
        
        EDIT ###doc##Template OBJECT o
    ;
    
    DESIGN doc##Template {
        OBJECTS {
            NEW header {
                NEW general {
                    alignment = STRETCH;
                    horizontal = TRUE;
                    MOVE PROPERTY(name(o));
                }
                NEW template {
                    alignment = STRETCH;
                    horizontal = TRUE;
                    MOVE PROPERTY(template(o));
                    MOVE PROPERTY(openFile(o));
                    MOVE PROPERTY(loadFile(o));
                    MOVE PROPERTY(dropFile(o));
                }
                NEW format {
                    alignment = STRETCH;
                    horizontal = TRUE;
                    MOVE PROPERTY(nameFormat(o));
                    MOVE PROPERTY(exportFileName(o));
                }
            }
        }
    }
    
    FORM doc##Templates caption
        OBJECTS o = ###doc##Template
        PROPERTIES(o) READONLY name
        
        LIST ###doc##Template OBJECT o
    ;
    
    FORM dialogTemplates###doc caption
        OBJECTS itm = ###doc##Template
        PROPERTIES(itm) READONLY name
    ;
    
    EXTEND FORM options
        OBJECTS tm###doc = ###doc##Template
        PROPERTIES(tm###doc) READONLY name, template, nameFormat
        PROPERTIES(tm###doc) NEWSESSION NEW, EDIT, DELETE
    ;
    
    DESIGN options {
        tabbedPane {
            MOVE BOX(tm###doc);
        }
    }
END

META defineDocTemplateType(doc, caption)

    @defineDocTemplate(doc, caption);
    
    in 'Incl.' = DATA BOOLEAN (###doc##Template, ###doc##Type);
    count###doc##Template (###doc##Type tp) = GROUP SUM 1 IF in(###doc##Template tm, tp);
    
    EXTEND FORM doc##Template
        OBJECTS t = ###doc##Type
        PROPERTIES             in(o, t)
        PROPERTIES(t) READONLY name
    ;
    
    EXTEND FORM dialogTemplates###doc
        OBJECTS itp = ###doc##Type BEFORE itm
        FILTERS in(itm, itp)
    ;
    
    EXTEND FORM doc##Type
        OBJECTS tm = ###doc##Template
        PROPERTIES in(tm, o)
        PROPERTIES(tm) READONLY name
    ;
    DESIGN doc##Type {
        tabbedPane {
            MOVE BOX(tm);
        }
    }
    
END

META defineDocTemplateTypeForm(doc, obj, NS)
    doc##Template = DATA LOCAL ###doc##Template();
    EXTEND FORM print###doc
        REPORT OVERRIDE file(doc##Template()), file(RAWFILE(template(doc##Template())), 'path')
    ;

    print 'Print' (###doc o) {
        doc##Template() <- NULL;
        IF count###doc##Template(type(o)) = 1 THEN
            doc##Template() <- GROUP MAX ###doc##Template it IF in(it, type(o));
        ELSE
            DIALOG dialogTemplates###doc OBJECTS itp = type(o), itm INPUT DO {
                doc##Template() <- itm;
            }
        IF doc##Template() THEN {
            LOCAL printScript = STRING();
            printScript() <- 'PRINT '##NS + '.print'###doc + ' OBJECTS o = $1 ' + (OVERRIDE upper(id(format(doc##Template()))), '');
            IF format(doc##Template()) != TemplateFormat.noPreview THEN
                printScript() <- printScript() + ' TO exportFile; FOR '##NS + '.'###doc + ' d = $1 DO open(exportFile(), ' +
                    (OVERRIDE exportFileName(doc##Template()), '\'' + (CONCAT ' ', name(doc##Template()), replace(number(o),'/','')) + '\'') 
                    + ');';
            ELSE
                printScript() <- printScript() + ';';
            EVAL ACTION printScript() PARAMS o;
        }
             
    }

    EXTEND FORM doc
        PROPERTIES(obj) print SHOWIF count###doc##Template(type(obj))
    ;
    
    DESIGN doc {
        secondaryActions {
            MOVE PROPERTY(print(obj));
        }
    }
END