MODULE FileUtils;

NAMESPACE Utils;

uploadFile 'Upload' = DATA LOCAL NAMEDFILE ();

previewPdfFile = DATA LOCAL NESTED PDFFILE();
previewImageFile = DATA LOCAL NESTED IMAGEFILE();

META defineObjectFilesForm(object, form, fobj)
    EXTEND FORM form
        OBJECTS of = ###object##File
        PROPERTIES(of) READONLY index
        PROPERTIES(of) READONLYIF readonly(fobj) name, extension, description
        PROPERTIES(of) READONLY nameUser, dateTime
        PROPERTIES(of) GRID open, DELETE READONLYIF readonly(fobj)
        FILTERS object(of) = fobj

        PROPERTIES(fobj) newFile DRAW of TOOLBAR READONLYIF readonly(fobj)
        PROPERTIES inputFile = '' CUSTOM 'inputFile' ON CHANGE {
            INPUT f = JSON DO
                IMPORT JSON FROM f FIELDS() STRING name, STRING extension, STRING data DO 
                    IF NOT readonly(fobj) THEN NEW uof = ###object##File {
                        object(uof) <- fobj;
                        file(uof) <- decode(data, 'base64');
                        name(uof) <- name;
                        extension(uof) <- extension;
                    }
        }
    ;

    DESIGN form {
        details {
            NEW files {
                caption = badged('Files', countFiles(fobj));
                MOVE BOX(of) { width = 600; caption = ''; }
                MOVE PROPERTY(inputFile);
            }
        }
    }
    
    // preview
    
    EXTEND FORM form
        PROPERTIES() READONLY previewPdfFile SHOWIF previewPdfFile(), previewImageFile SHOWIF NOT previewPdfFile()

        EVENTS ON CHANGE of {
            previewPdfFile() <- NULL;
            previewImageFile() <- NULL;
            IF lower(extension(of)) = 'jpg' OR lower(extension(of)) = 'jpeg' OR lower(extension(of)) = 'png' OR lower(extension(of)) = 'bmp' THEN {
                previewImageFile() <- IMAGEFILE(file(of));
            }
            IF lower(extension(of)) = 'pdf' THEN {
                previewPdfFile() <- PDFFILE(file(of));
            }
            IF lower(extension(of)) = 'doc' OR lower(extension(of)) = 'docx' THEN {
                TRY {
                    wordToPdf(file(of));
                } CATCH {}
                previewPdfFile() <- exportPdfFile();
            }
        }
    ;

    DESIGN form {
        files {
            horizontal = TRUE;
            height = 300;
            NEW preview {
                width = 300;
                height = 600;
                fill = 4;
                MOVE PROPERTY(previewPdfFile()) { fill = 1; size = (100, 100); caption = ''; }
                MOVE PROPERTY(previewImageFile()) { fill = 1; size = (100, 100); caption = ''; }
            }
        }
    }

END

META defineObjectFiles(object, fobj, classCaption)

    CLASS ###object##File classCaption;

    object = DATA ###object (###object##File) INDEXED NONULL DELETE;

    file = DATA RAWFILE (###object##File);

    name '{Name}' = DATA ISTRING (###object##File) CHARWIDTH 15;
    extension 'Extension' = DATA ISTRING (###object##File) CHARWIDTH 5;
    nameExtension (###object##File f) = CONCAT '.', name(f), extension(f);
    
    fileExtension (###object##File f) = file(file(f), extension(f));
    namedFile (###object##File f) = namedFile(file(f), name(f), extension(f));

    description 'Description' = DATA ISTRING (###object##File) CHARWIDTH 20;

    dateTime 'Date' = DATA DATETIME (###object##File);
    dateTime(###object##File f) <- currentDateTime() WHEN SET(f IS ###object##File);

    user = DATA User (###object##File);
    nameUser 'User' (###object##File f) = name(user(f));
    user(###object##File f) <- currentUser() WHEN SET(f IS ###object##File);

    open 'Open' (###object##File f) { open(file(f), nameExtension(f)); } IMAGE 'open.png';

    countFiles 'Files' (###object i) = GROUP SUM 1 IF object(###object##File f) = i;

    index '{Index}' (###object##File f) = PARTITION SUM 1 ORDER f BY object(f) MATERIALIZED CHARWIDTH 3;
    file (###object o, INTEGER i) = GROUP MIN ###object##File f IF object(f) = o AND index(f) = i;
    openFile(###object o, INTEGER i) { open(file(o, i)); }
    
    file1 (###object o) = file(o, 1);
    file2 (###object o) = file(o, 2);
    file3 (###object o) = file(o, 3);
    openFile1 'File 1' (###object o) { openFile(o, 1); }
    openFile2 'File 2' (###object o) { openFile(o, 2); }
    openFile3 'File 3' (###object o) { openFile(o, 3); }

    firstFile (###object i) = GROUP MIN ###object##File f IF object(f) = i;
    openFirstFile 'Open' (###object i) { open(firstFile(i)); }
    openFiles 'Open' (###object i) {
        FOR object(###object##File f) = i DO
            open(f);
    }

    newFile 'File' (###object o) {
        INPUT uf = NAMEDFILE DO NEW uof = ###object##File {
            object(uof) <- o;
            file(uof) <- RAWFILE(uf);
            name(uof) <- name(uf);
            extension(uof) <- extension(uf);
        }
    } IMAGE 'add.png' CHANGEKEY 'INSERT' HIDE;
        
    download###object##File (LONG id) {
        FOR LONG(###object##File f AS ###object##File) = id DO {
            exportNamedFile() <- namedFile(f);
        } 
    } @@api;
        
    @defineObjectFilesForm(object, object, fobj);

END