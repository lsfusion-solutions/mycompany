MODULE Doc;

REQUIRE SystemEvents, Authentication, Time, BarCode, Icon, ItemAttribute, ObjectUtils;

NAMESPACE Utils;

// remove later
registerFontDirectories () INTERNAL <{com.lowagie.text.FontFactory.registerDirectories(); }>; 
onStarted() +{
    registerFontDirectories();
}

META defineDocObjectsForm (form, obj, title)
    DESIGN form {
        OBJECTS {
            NEW pane {
                fill = 1;
                horizontal = TRUE;
                NEW tabbedPane {
                    tabbed = TRUE;
                    fill = 1000;
                    MOVE BOX(obj) { caption = title; }
                }
                NEW rightPane {
                    tabbed = TRUE;
//                    width = 230;
                    fill = 1;
                    NEW filters {
                        caption = 'Filters';
                        alignment = STRETCH;
                        MOVE FILTERGROUPS(obj) {
                            horizontal = FALSE;
                            alignment = STRETCH;
                        }
                    }
                    NEW actions {
                        alignment = STRETCH;
                        caption = 'Actions';
                        NEW statuses {
                            alignment = STRETCH;
                            caption = 'Change status';
                        }
                    }
                }
            }
        }
    }
END

META defineDocStatus (doc, title, firstStatus, firstStatusCapt)
    CLASS ###doc##Status title {
        firstStatus firstStatusCapt
    }
    
    name '{First_name}' (###doc##Status s) = staticCaption(s) IF s IS ###doc##Status CHARWIDTH 12;
    imagedName '{First_name}' (###doc##Status s) = imagedCaption(s) IF s IS ###doc##Status CHARWIDTH 12;

    color 'Color' = ABSTRACT CASE COLOR (###doc##Status) MATERIALIZED;
    color (###doc##Status s) += WHEN s = ###doc##Status.firstStatus THEN RGB(187,242,210);

    status 'Status' = ABSTRACT CASE ###doc##Status (###doc) MATERIALIZED INDEXED;
    nameStatus 'Status' (###doc d) = name(status(d));
    imagedNameStatus 'Status' (###doc d) = imagedName(status(d));
    colorStatus 'Color' (###doc d) = color(status(d));
    
    status(###doc d) += WHEN d IS ###doc THEN ###doc##Status.firstStatus;

    sortingOrder 'Sorting order' = ABSTRACT INTEGER (###doc##Status) MATERIALIZED;
    index 'Index' (###doc##Status s) = PARTITION SUM 1 IF s IS ###doc##Status ORDER sortingOrder(s), s;
    
    readonly 'Read-only' = DATA BOOLEAN (###doc##Status);

    readonly = ABSTRACT CASE BOOLEAN (###doc);
    readonly (###doc d) += WHEN readonly(status(d)) THEN TRUE;

    closed = ABSTRACT CASE BOOLEAN (###doc##Status) MATERIALIZED;
    closed 'Closed' (###doc d) = closed(status(d));
    opened 'Opened' (###doc d) = d IS ###doc AND NOT closed(d) MATERIALIZED INDEXED;

    EXTEND FORM options
        OBJECTS doc##st = ###doc##Status
        PROPERTIES(doc##st) READONLY imagedName, color
        PROPERTIES(doc##st) readonly
    ;
    
    DESIGN options {
        tabbedPane {
            MOVE BOX(doc##st);
        }
    }
END

META defineDocStatus (doc, title)
    @defineDocStatus (doc, title, draft, 'Draft');
END

META defineFormStatusContainer (form)
    DESIGN form {
        NEW statusPane FIRST {
            horizontal = TRUE;
            alignment = STRETCH;
            NEW statusActions {
                horizontal = TRUE;
                flex = 1;
                NEW primaryActions {
                    horizontal = TRUE;
                }
                NEW secondaryActions {
                    horizontal = TRUE;
                }
            }
            NEW statusContainer {
                fill = 1;
                NEW status {
                    alignment = END;
                    horizontal = TRUE;
                }
            }
        }
    }
END

META defineDocStatusForm (doc, let, beforeProp, firstStatus, firstStatusCapt)
    EXTEND FORM doc##s
        PROPERTIES(##let) READONLY imagedNameStatus BACKGROUND colorStatus(##let) BEFORE beforeProp(##let)
        FILTERGROUP status
            FILTER firstStatusCapt status(##let) = ###doc##Status.firstStatus
    ;
    
    DESIGN doc##s {
        filters {
            MOVE FILTERGROUP(status) { alignment = STRETCH; }
        }
    }
    
    EXTEND FORM doc
        PROPERTIES(##let) READONLY imagedNameStatus BACKGROUND colorStatus(##let)
    ;
    
    @defineFormStatusContainer(doc);
        
    DESIGN doc {
        status {
            MOVE PROPERTY(imagedNameStatus(##let));
            NEW statusGroup {
                custom = '';
                class = 'btn-group';
            }
        }
    }
END

META defineDocStatusForm (doc, let, beforeProp)
    @defineDocStatusForm(doc, let, beforeProp, draft, 'Draft');
END

META defineDocStatusForm (doc, let)
    @defineDocStatusForm(doc, let, nameType);
END

META defineDocStatusChange (obj, capt)
    CLASS ###obj##StatusChange capt;

    obj = DATA ###obj (###obj##StatusChange);
    countStatusChange (###obj o) = GROUP SUM 1 IF obj(###obj##StatusChange sc) = o;
    
    dateTime 'Date' = DATA DATETIME (###obj##StatusChange);
    dateTime(###obj##StatusChange sc) <- currentDateTime() WHEN SET(sc IS ###obj##StatusChange);

    INDEX obj(###obj##StatusChange sc), dateTime(sc), sc;

    user 'User' = DATA User (###obj##StatusChange);
    nameUser 'User' (###obj##StatusChange sc) = name(user(sc));
    user(###obj##StatusChange sc) <- currentUser() WHEN SET(sc IS ###obj##StatusChange);

    status 'Status' = DATA ###obj##Status (###obj##StatusChange);
    nameStatus 'Status' (###obj##StatusChange sc) = name(status(sc));

    previous (###obj##StatusChange c) = PARTITION PREV c ORDER dateTime(c), c BY obj(c);
    dateTimePrevious (###obj##StatusChange c) = dateTime(previous(c));
    secondsBefore (###obj##StatusChange c) = subtractSeconds(dateTimePrevious(c), dateTime(c));
    hoursBefore 'Hours before' (###obj##StatusChange c) = round2(secondsBefore(c) / 3600.0);

    nameUserPrevious (###obj##StatusChange c) = nameUser(previous(c));
    
    next (###obj##StatusChange c) = PARTITION PREV c ORDER DESC dateTime(c), c BY obj(c);
    dateTimeNext  (###obj##StatusChange c) = dateTime(next(c));
    secondsAfter (###obj##StatusChange c) = subtractSeconds(dateTime(c), dateTimeNext(c));
    hoursAfter 'Hours after' (###obj##StatusChange c) = round2(secondsAfter(c) / 3600.0);
    
    nameUserNext (###obj##StatusChange c) = nameUser(next(c));
        
    lastChange (###obj o, ###obj###Status s) = GROUP LAST ###obj##StatusChange sc ORDER dateTime(sc), sc BY obj(sc), status(sc);
        
    dateTimeLastChange 'Date' (###obj o, ###obj###Status s) = dateTime(lastChange(o, s));
    nameUserLastChange 'User' (###obj o, ###obj###Status s) = nameUser(lastChange(o, s));

    secondsBefore (###obj o, ###obj###Status s) = GROUP SUM secondsBefore(###obj##StatusChange sc) IF obj(sc) = o AND status(sc) = s;
    hoursBefore 'Hours before' (###obj o, ###obj###Status s) = round2(secondsBefore(o, s) / 3600.0);

    secondsAfter (###obj o, ###obj###Status s) = GROUP SUM secondsAfter(###obj##StatusChange sc) IF obj(sc) = o AND status(sc) = s;
    hoursAfter 'Hours after' (###obj o, ###obj###Status s) = round2(secondsAfter(o, s) / 3600.0);
        
    WHEN SETCHANGED(status(###obj o)) DO 
        NEW sc = ###obj##StatusChange {
            obj(sc) <- o;
            status(sc) <- status(o);
        }
END

META defineDocStatusChangeForm (doc, let, capt)
    EXTEND FORM doc
        OBJECTS stch = ###doc##StatusChange
        PROPERTIES(stch) READONLY dateTime, nameUser, hoursBefore, nameStatus, hoursAfter
        FILTERS doc(stch) = let
    ;
    
    DESIGN doc {
        details {
            MOVE BOX(stch) { 
                caption = badged('Status change', countStatusChange(let));
            }
        }
    }
    
    EXTEND FORM doc##s
        OBJECTS let##st = ###doc##Status BEFORE let
        PROPERTIES sortingOrder(let##st)
        ORDERS sortingOrder(let##st)
        
        PROPERTIES(let, let##st) READONLY COLUMNS 'status' (let##st) BACKGROUND RGB(224,224,224) IF mod(index(let##st), 2) = 0
            hoursBefore HEADER name(let##st) + '\n(' + 'Hours before' + ')', 
            dateTimeLastChange HEADER name(let##st) + '\n(' + 'Date' + ')', 
            nameUserLastChange HEADER name(let##st) + '\n(' + 'User' + ')', 
            hoursAfter HEADER name(let##st) + '\n(' + 'Hours after' + ')'
    ;
    
    DESIGN doc##s {
        REMOVE BOX(let##st);
        
        PROPERTY(hoursBefore(let, let##st)) { hide = TRUE; }
        PROPERTY(dateTimeLastChange(let, let##st)) { hide = TRUE; }
        PROPERTY(nameUserLastChange(let, let##st)) { hide = TRUE; }
        PROPERTY(hoursAfter(let, let##st)) { hide = TRUE; }
    }
END

META defineDocSearchAction (doc, docLine, it, fun, capt)
    fun capt (###doc i, ###it p) = 
        GROUP SUM fun(docLine l) BY doc(l), it(l);
    
    set###fun (###doc i, ###it p, NUMERIC[14,3] q) {
        IF last##docLine(i, p) THEN {
            IF q THEN
                fun(docLine l) <- q IF l = last##docLine(i, p)
                    WHERE doc(l) = i AND it(l) = p;
            ELSE
                DELETE docLine l WHERE doc(l) = i AND it(l) = p;
        } ELSE
            IF q THEN
                NEW l = docLine{
                    doc(l) <- i;
                    it(l) <- p;
                    fun(l) <- q;
                }
    
    }
    
    change###fun (###doc i, ###it p) {
        INPUT q = NUMERIC[14,3] DO
            set###fun(i, p, q);
    }
END

META defineDocSearchAction (doc, it, fun, capt)
    @defineDocSearchAction (doc, ###doc##Line, it, fun, capt);
END

META defineDocSearchTab (doc, it)
    EXTEND FORM doc
        TREE categories c = Category PARENT parent(c)
        PROPERTIES READONLY name(c)
        ORDERS name(c)
        FILTERGROUP activeCategory
            FILTER '{Active}' active(c) DEFAULT
        
        OBJECTS itm = ###it
        PROPERTIES(itm) READONLY name, nameUom, idBarCode, id, reference
        PROPERTIES(itm) READONLY nameCategory, level1, level2, level3, level4
        PROPERTIES(itm) NEWSESSION EDIT
        ORDERS name(itm)
        FILTERS level(category(itm), c)
        FILTERGROUP active
            FILTER '{Active}' active(itm) 'F10' DEFAULT  
    ;

    @defineItemAttributeForm(doc, itm, itm);
        
    DESIGN doc {
        details {
            NEW search {
                caption = 'Search';
                horizontal = TRUE;
                fill = 1;
                NEW filters {
                    fill = 1;
                    tabbed = TRUE;
                    MOVE BOX(TREE categories) { caption = 'Categories'; }
                    MOVE BOX(ia) { caption = 'Attributes'; }
                }
                MOVE BOX(itm) { 
                    fill = 2;
                    caption = '';
                    PROPERTY(nameCategory(itm)) { hide = TRUE; }
                    PROPERTY(level1(itm)) { hide = TRUE; }
                    PROPERTY(level2(itm)) { hide = TRUE; }
                    PROPERTY(level3(itm)) { hide = TRUE; }
                    PROPERTY(level4(itm)) { hide = TRUE; }
                }
            }
        }
    }
END

META defineDocSearch (doc, it, fun, capt, let)
    last###doc##Line (###doc i, ###it p) = GROUP LAST ###doc##Line l ORDER l BY doc(l), it(l);

    @defineDocSearchAction(doc, it, fun, capt);
    @defineDocSearchTab(doc, it);
    
    EXTEND FORM doc
        PROPERTIES(let, itm) fun ON CHANGE change###fun(let, itm) READONLYIF readonly(let)
    ;
    DESIGN doc {
        PROPERTY(fun(let, itm)) { background = #EEEEFF; }
    }
END

META defineDocSearch (doc, it, fun, capt, let, check)
    @defineDocSearch(doc, it, fun, capt, let);
    
    EXTEND FORM doc
        FILTERS ##check(itm)
    ;
END

disableHistory 'Disable history recording' = DATA BOOLEAN () PREREAD;
EXTEND FORM System.options 
    PROPERTIES() disableHistory
;
DESIGN System.options {
    commons { 
        MOVE PROPERTY(disableHistory()); 
    }
}

META defineDocHistoryLineProperty(doc, docLine, prop, capt, descrProp)
    WHEN CHANGED(prop(docLine l)) AND doc(l) = ###doc d
        AND NOT status(d) = ###doc##Status.draft AND NOT disableHistory() DO {
        NEW h = ###doc##History {
            doc(h) <- d;
            dateTime(h) <- currentDateTime();
            user(h) <- currentUser();
            type(h) <- capt;
            description (h) <- '' + index(l) + '. ' + (CONCAT ', ', descrProp(l), (CONCAT ' -> ', PREV(prop(l)), prop(l)));
        }
    }
END

META defineDocHistoryHeader(doc, dateProp)

    @defineHistoryObject(doc);

    @defineHistoryProperty(doc, status, 'Status', nameStatus);

    @defineHistoryProperty(doc, number, 'Number');

    @defineHistoryProperty(doc, dateProp, 'Date');
END

META defineDocHistoryLine(doc, docLine, class)

    WHEN SETCHANGED(docLine l IS docLine) AND doc(l) = ###doc d
        AND NOT status(d) = ###doc##Status.draft AND NOT disableHistory() DO {
        NEW h = ###doc##History {
            doc(h) <- d;
            dateTime(h) <- currentDateTime();
            user(h) <- currentUser();
            computer(h) <- currentComputer();
            type(h) <- 'Added line';
            description (h) <- '' + index(l);
        }
    }

    WHEN DROPPED(docLine l IS docLine) AND PREV(doc(l)) = ###doc d
        AND NOT status(d) = ###doc##Status.draft AND NOT disableHistory() DO {
        NEW h = ###doc##History {
            doc(h) <- d;
            dateTime(h) <- currentDateTime();
            user(h) <- currentUser();
            computer(h) <- currentComputer();
            type(h) <- 'Removed line';
            description (h) <- '' + PREV(index(l));
        }
    }

    WHEN CHANGED(class(docLine l)) AND doc(l) = ###doc d
        AND NOT status(d) = ###doc##Status.draft AND NOT disableHistory() DO {
        NEW h = ###doc##History {
            doc(h) <- d;
            dateTime(h) <- currentDateTime();
            user(h) <- currentUser();
            computer(h) <- currentComputer();
            type(h) <- 'Product changed';
            description (h) <- '' + index(l) + (CONCAT ' -> ', PREV(name###class(l)), name###class(l));
        }
    }

END

META defineDocHistoryLine(doc, class)
    @defineDocHistoryLine(doc, ###doc##Line, class);
END

META defineDocHistory(doc, let, class, dateProp)

    @defineDocHistoryHeader(doc, dateProp);
    @defineDocHistoryLine(doc, class);
    @defineHistoryForm(doc, doc, let);

END

META defineDocHistory(doc, let, class)
    @defineDocHistory(doc, let, class, dateTime);
END

META defineDocRelation(docTo, docFrom, captTo, captFrom, objTo, objFrom)
    docTo = DATA ###docTo (###docFrom) INDEXED;
    numberDate###docTo captTo (###docFrom s) = numberDate(docTo(s)); 
    
    count###docFrom (###docTo t) = GROUP SUM 1 IF docTo(###docFrom f) = t;
    
    // form
    open###docTo (###docFrom f) { 
        edit(docTo(f)); 
    }
    EXTEND FORM docFrom
        PROPERTIES(objFrom) numberDate###docTo ON CHANGE open###docTo(objFrom) SHOWIF docTo(objFrom)
    ;
    DESIGN docFrom {
        footer {
            MOVE PROPERTY(numberDate###docTo(objFrom));
        }
    }
    EXTEND FORM docFrom##s
        PROPERTIES(objFrom) READONLY numberDate###docTo
    ;
END

META defineDocRelation(docTo, docFrom, captTo, captFrom, objTo, objFrom, prefix)
    docTo = DATA ###docTo (###docFrom) INDEXED;

    count###docFrom##s (###docTo i) = GROUP SUM 1 IF docTo(###docFrom s) = i MATERIALIZED;

    numberDate###docTo captTo (###docFrom s) = numberDate(docTo(s));
    numberDate###docFrom##s captFrom (###docTo s) = GROUP CONCAT numberDate(###docFrom i) IF docTo(i) = s, ',' ORDER i CHARWIDTH 30;

    EXTEND FORM docFrom
        PROPERTIES(objFrom) prefix###numberDate###docTo = numberDate###docTo
    ;
    DESIGN docFrom {
        footer {
            MOVE PROPERTY(prefix###numberDate###docTo);
        }
    }
    EXTEND FORM docFrom##s
        PROPERTIES(objFrom) READONLY prefix###numberDate###docTo = numberDate###docTo
    ;
    EXTEND FORM docTo##s
        PROPERTIES(objTo) READONLY numberDate###docFrom##s
    ;
END

META defineDocLineRelation(docTo, docFrom, docFromLine, captTo, captFrom, objTo, objFrom, prefix)
    docTo##Line = DATA ###docTo##Line (###docFromLine) INDEXED;
    
    in (###docTo i, ###docFrom s) = GROUP SUM 1 IF docTo(docTo##Line(###docFromLine l)) = i AND docFrom(l) = s MATERIALIZED; 
    
    count###docTo (###docFrom s) = GROUP SUM 1 IF in(###docTo i, s) MATERIALIZED;
    count###docFrom##s (###docTo i) = GROUP SUM 1 IF in(i, ###docFrom s) MATERIALIZED;
    numberDate###docTo captTo (###docFrom s) = GROUP CONCAT numberDate(###docTo i) IF in(i, s), ',' ORDER i CHARWIDTH 30;
    numberDate###docTo##Line captTo (###docFromLine s) = numberDate(docTo##Line(s)); 

    numberDate###docFrom##s captFrom (###docTo s) = GROUP CONCAT numberDate(###docFrom i) IF in(s, i), ',' ORDER i CHARWIDTH 30;

    count###docFromLine (###docTo##Line b) = GROUP SUM 1 IF docTo##Line(###docFromLine l) = b;
    count###docFromLine (###docTo b) = GROUP SUM 1 IF docTo(docTo##Line(###docFromLine l)) = b;
    
    // form
    open###docTo (###docFrom s) { 
        FOR in(###docTo i, s) DO 
            edit(i); 
    }
    EXTEND FORM docFrom
        PROPERTIES(objFrom) prefix###numberDate###docTo = numberDate###docTo ON CHANGE open###docTo(objFrom) SHOWIF count###docTo(objFrom)
    ;
    DESIGN docFrom {
        footer {
            MOVE PROPERTY(prefix###numberDate###docTo);
        }
    }
    EXTEND FORM docFrom##s
        PROPERTIES(objFrom) READONLY prefix###numberDate###docTo = numberDate###docTo
    ;
    EXTEND FORM docTo##s
        PROPERTIES(objTo) READONLY numberDate###docFrom##s
    ;
END

META defineDocLineRelation(docTo, docFrom, captTo, captFrom, objTo, objFrom)
    @defineDocLineRelation(docTo, docFrom, docFrom##Line, captTo, captFrom, objTo, objFrom, );
END
META defineDocDiscount (doc)
    discount 'Discount, %' = DATA NUMERIC[5,2] (###doc##Line);
    
    discountPrice 'Discount price' = DATA NUMERIC[10,2] (###doc##Line);
    resultPrice 'Final price' (###doc##Line l) = OVERRIDE discountPrice(l), price(l);
    
    WHEN LOCAL (CHANGED(price(###doc##Line l)) OR CHANGED(discount(l))) AND NOT CHANGED(discountPrice(l)) DO 
        discountPrice(l) <- NUMERIC[10,2] (price(l) * (100.0 - discount(l)) / 100.0);
    
    recalcDiscount (###doc##Line l) { 
        discount(l) <- NUMERIC[5,2](min(100.0 - (discountPrice(l) * 100.0 / price(l)), 100.0));
    }
    changeDiscountPrice (###doc##Line l) {
        INPUT p = discountPrice(l) CHANGE DO {
            recalcDiscount(l);
        } 
    }
    
END

META defineDocDiscountForm (doc, let)
    EXTEND FORM doc
        PROPERTIES(l) READONLYIF readonly(let) AFTER price(l) discount, discountPrice ON CHANGE changeDiscountPrice(l)
    ;
END

META defineDocLinesCount(doc, d) 
    count###doc###Line 'Number of lines' (###doc d) = GROUP SUM 1 IF doc(###doc###Line l) = d MATERIALIZED;
    
    DESIGN doc {
        lines {
            caption = badged('Lines', count###doc##Line(d));
        }
    }
    EXTEND FORM doc##s PROPERTIES(d) READONLY count###doc###Line;
END

META defineDocFilterProperty(form, doc, cls, property, obj, capt, filterProperty)
    doc###property = DATA LOCAL NESTED cls ();
    name###doc###property capt = name(doc###property());

    EXTEND FORM form
        PROPERTIES() name###doc###property
    ;

    DESIGN form {
        filters {
            MOVE PROPERTY(name###doc###property()) { caption = ''; placeholder = capt; };
        }
    }
END

META defineDocFilter(form, doc, cls, property, obj, capt, filterProperty)
    @defineDocFilterProperty(form, doc, cls, property, obj, capt, filterProperty);
    
    EXTEND FORM form
        FILTERS filterProperty(obj) = doc###property() OR NOT doc###property()
    ;
END

META defineDocFilter(doc, cls, property, obj, capt, filterProperty)
    @defineDocFilter(doc##s, doc, cls, property, obj, capt, filterProperty);
END

META defineDocFilter(doc, cls, property, obj, capt)
    @defineDocFilter(doc, cls, property, obj, capt, property);
END

badgedDoc(STRING caption, STRING number, DATETIME dateTime) = badged(caption, (CONCAT ' ', '№' + number, '(' + dateTime +  ')'));

META defineDocSingleLineForItem(doc, docLine, itemProp)
    oneLineForItem 'Only one line for one item' = DATA BOOLEAN (###doc##Type);
    EXTEND FORM doc##Type PROPERTIES(o) oneLineForItem;
    
    CONSTRAINT SET([GROUP SUM 1 BY doc(###docLine l), itemProp(l)](###doc d, Item i) > 1) AND oneLineForItem(type(d))
        MESSAGE 'Only one line for one item';
END

META defineDocSingleLineForItem(doc, itemProp)
    @defineDocSingleLineForItem(doc, doc##Line, itemProp);
END