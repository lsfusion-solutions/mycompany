MODULE Input;

REQUIRE SystemEvents;

NAMESPACE Utils;

FORM dialogQuantity 'Quantity input'
    OBJECTS q = NUMERIC[16,2] PANEL
    PROPERTIES(q) quantity 'Enter quantity:' = VALUE
;

DESIGN dialogQuantity {
    PROPERTY(quantity) { fontSize = 16; }
    PROPERTY(formOk()) { changeKey = 'ENTER'; }
}

// regexp

@defineOption(phoneRegexp, 'Phone regular expression', STRING, commons);

@defineOption(emailRegexp, 'Email regular expression', STRING, commons);

onFirstStarted() + {
    phoneRegexp() <- '(\\+\\d\{1,3\}( )?)?((\\(\\d\{1,3\}\\))|\\d\{1,3\})[\\- .]?\\d\{3,4\}[\\- .]?\\d\{4\}';
    emailRegexp() <- '[a-zA-Z0-9_.+\\-]+@[a-zA-Z0-9\\-]+\\.[a-zA-Z0-9\\-.]+';
}

// filter

nameFilter '' = DATA LOCAL ISTRING () CHARWIDTH 20;

META defineNameFilter(form, obj, container)
    EXTEND FORM form
        PROPERTIES() nameFilter
        FILTERS isISubstring(name(obj), nameFilter()) OR NOT nameFilter()
    ;
    DESIGN form {
        container {
            MOVE PROPERTY(nameFilter()) { placeholder = '{Name}'; alignment = STRETCH; }
        }
    }
END

// keyboard

// single object
META defineKeyboard(form, cls, obj, container, size, action, number)
    form##Press##number ''##number (cls o) {
        action(o, number);
    }
    EXTEND FORM form PROPERTIES form##Press##number(obj);
    DESIGN form {
        container {
            MOVE PROPERTY(form##Press##number(obj)) { fill = 1; fontSize = size; focusable = FALSE; }
        }
    }
END

META defineKeyboard(form, cls, obj, container, size, action)
    @defineKeyboard(form, cls, obj, container, size, action, 0);
    @defineKeyboard(form, cls, obj, container, size, action, 1);
    @defineKeyboard(form, cls, obj, container, size, action, 2);
    @defineKeyboard(form, cls, obj, container, size, action, 3);
    @defineKeyboard(form, cls, obj, container, size, action, 4);
    @defineKeyboard(form, cls, obj, container, size, action, 5);
    @defineKeyboard(form, cls, obj, container, size, action, 6);
    @defineKeyboard(form, cls, obj, container, size, action, 7);
    @defineKeyboard(form, cls, obj, container, size, action, 8);
    @defineKeyboard(form, cls, obj, container, size, action, 9);
END

// keyboard decimal

keyboardDecimalInput = DATA LOCAL STRING();

META defineKeyboardDecimal (property, form, cls, obj, container, size)

    set###form###property (cls o, INTEGER i) {
        IF NOT property(o) = NUMERIC(keyboardDecimalInput()) THEN keyboardDecimalInput() <- NULL;
        keyboardDecimalInput() <- CONCAT '', keyboardDecimalInput(), STRING(i);
        property(o) <- NUMERIC(keyboardDecimalInput());
    }
    
    DESIGN form {
        container {
            NEW keyboard {
                fill = 1;
                lines = 3;
            }
        }
    }
    
    @defineKeyboard(form, cls, obj, keyboard, size, set###form###property);
    
    form##PressD '.' (cls o) {
        IF NOT isSubstring(keyboardDecimalInput(), '.') THEN
            keyboardDecimalInput() <- keyboardDecimalInput() + '.'; 
    }
    
    form##PressC 'C' (cls o) {
        keyboardDecimalInput() <- NULL;
        property(o) <- NULL;
    }
    
    EXTEND FORM form
        PROPERTIES(obj) form##PressD, form##PressC
    
        EVENTS ON CHANGE obj { keyboardDecimalInput() <- NULL; }
    ;
    
    DESIGN form {
        keyboard {
            MOVE PROPERTY(form##PressD(obj)) { fill = 1; fontSize = size; focusable = FALSE; };
            MOVE PROPERTY(form##Press0(obj));
            MOVE PROPERTY(form##PressC(obj)) { fill = 1; fontSize = size; focusable = FALSE; };
        }
    }

END

// no object

META defineKeyboard(form, container, size, number)
    form##Press##number ''##number () {
        keyboardDecimalInput() <- CONCAT '', keyboardDecimalInput(), ''##number;
    } CHANGEKEY 'NUMPAD'##number HIDE;
    EXTEND FORM form PROPERTIES form##Press##number();
    DESIGN form {
        container {
            MOVE PROPERTY(form##Press##number()) { fill = 1; fontSize = size; focusable = FALSE; }
        }
    }
END

META defineKeyboard(form, container, size)
    @defineKeyboard(form, container, size, 0);
    @defineKeyboard(form, container, size, 1);
    @defineKeyboard(form, container, size, 2);
    @defineKeyboard(form, container, size, 3);
    @defineKeyboard(form, container, size, 4);
    @defineKeyboard(form, container, size, 5);
    @defineKeyboard(form, container, size, 6);
    @defineKeyboard(form, container, size, 7);
    @defineKeyboard(form, container, size, 8);
    @defineKeyboard(form, container, size, 9);
END

META defineKeyboardDecimal (form, container, size)

    DESIGN form {
        container {
            NEW keyboard {
                fill = 1;
                lines = 3;
            }
        }
    }
    
    @defineKeyboard(form, keyboard, size);
    
    form##PressD '.' () {
        IF NOT isSubstring(keyboardDecimalInput(), '.') THEN
            keyboardDecimalInput() <- keyboardDecimalInput() + '.'; 
    } CHANGEKEY 'DECIMAL' HIDE;
    
    form##PressC 'C' () {
        keyboardDecimalInput() <- NULL;
    } CHANGEKEY 'DELETE' HIDE;
    
    EXTEND FORM form
        PROPERTIES() form##PressD, form##PressC
    
        EVENTS ON INIT { keyboardDecimalInput() <- NULL; }
    ;
    
    DESIGN form {
        keyboard {
            MOVE PROPERTY(form##PressD()) { fill = 1; fontSize = size; focusable = FALSE; };
            MOVE PROPERTY(form##Press0());
            MOVE PROPERTY(form##PressC()) { fill = 1; fontSize = size; focusable = FALSE; };
        }
    }

END

META defineKeyboardQuantityForm (form, obj, container, size)
    EXTEND FORM form
        PROPERTIES(obj) increaseQuantity, decreaseQuantity
    ;

    DESIGN form {
        container {
            NEW quantityActions {
                horizontal = TRUE;
                alignment = STRETCH;
                NEW searchKeyboard {
                    fill = 1;
                    lines = 5;
                }
                MOVE PROPERTY(increaseQuantity(obj)) { fill = 1; fontSize = size; focusable = FALSE; }
                MOVE PROPERTY(decreaseQuantity(obj)) { fill = 1; fontSize = size; focusable = FALSE; }
            }
        }
    }
END

META defineKeyboardQuantityApply (form, cls, obj, container, size)
    afterChangeQuantity ABSTRACT LIST (cls);
    setQuantity(cls o, INTEGER n) { 
        NEWSESSION { APPLY { quantity(o) <- n IF n > 0; afterChangeQuantity(o); } } 
    }

    increaseQuantity '+' (cls o) {
        NEWSESSION { APPLY { quantity(o) <- quantity(o) (+) 1; afterChangeQuantity(o); } } 
    }
    decreaseQuantity '-' (cls o) {
        NEWSESSION { APPLY { quantity(o) <- quantity(o) (-) 1; afterChangeQuantity(o); } }
    }

    @defineKeyboardQuantityForm(form, obj, container, size);
    @defineKeyboard(form, cls, obj, searchKeyboard, size, setQuantity);
END

META defineKeyboardQuantity (form, cls, obj, container, size)
    setQuantity(cls o, INTEGER n) { 
        quantity(o) <- n IF n > 0;
    }

    increaseQuantity '+' (cls o) { 
        quantity(o) <- quantity(o) (+) 1; 
    }
    decreaseQuantity '-' (cls o) { 
        quantity(o) <- quantity(o) (-) 1; 
    }

    @defineKeyboardQuantityForm(form, obj, container, size);
    @defineKeyboard(form, cls, obj, searchKeyboard, size, setQuantity);
END