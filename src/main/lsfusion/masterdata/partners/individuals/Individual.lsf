MODULE Individual;

REQUIRE Partner, MasterData, LegalEntity, DepartmentPartner, Position, DocTemplate, Icon;

NAMESPACE MasterData;

CLASS Individual 'Individual';

firstName '{First_name}' = DATA ISTRING[30] (Individual);
lastName 'Surname' = DATA ISTRING[30] (Individual);
middleName 'Middle name' = DATA ISTRING[30] (Individual);

legalEntity = DATA LegalEntity (Individual);
idLegalEntity 'Legal entity' (Individual i) = id(legalEntity(i));
nameLegalEntity 'Legal entity' (Individual i) = name(legalEntity(i));

contactName '{Name} ' (Partner p) = CONCAT ' ', name(p), '(' + name(legalEntity(p)) + ')';

department = DATA Department (Individual);
nameDepartment 'Department' (Individual i) = name(department(i));

CONSTRAINT department(Individual i) AND NOT legalEntity(i) = partner(department(i))
    CHECKED BY department[Individual]
    MESSAGE 'The legal entity of the individual does not match the legal entity of the department';

countIndividual (Partner p) = GROUP SUM 1 IF legalEntity(Individual i) = p;  

position = DATA Position (Individual);
namePosition 'Position' (Individual i) = name(position(i));

EXTEND CLASS Individual : Partner;

name (Individual i) += CONCAT ' ', lastName(i), firstName(i), middleName(i);
fullName (Individual i) += CONCAT ' ', lastName(i), firstName(i), middleName(i);

positionName (Individual i) = CONCAT ' ', namePosition(i), lastName(i), firstName(i), middleName(i);

EXTEND CLASS PartnerType {
    individual 'Individual'
}

type (Partner p) += WHEN p IS Individual THEN PartnerType.individual;

EXTEND FORM partner
    PROPERTIES(p) firstName, lastName, middleName, nameLegalEntity, namePosition
;

DESIGN partner {
    headerDetails {
        NEW individualName {
            fill = 1;
            horizontal = TRUE;
            MOVE PROPERTY(firstName(p));
            MOVE PROPERTY(lastName(p));
            MOVE PROPERTY(middleName(p));
        }
        NEW job {
            horizontal = TRUE;
            alignment = STRETCH;
            MOVE PROPERTY(nameLegalEntity(p));
            MOVE PROPERTY(namePosition(p));
        }
    }
}

newIndividual 'Individual' () {
    NEWSESSION {
        NEW i = Individual {
            DIALOG partner OBJECTS p = i DOCKED DO seek(i);
        }
    }
} IMAGE 'add.png';

EXTEND FORM partners
    PROPERTIES newIndividual() DRAW p TOOLBAR
;
EXTEND FORM dialogPartners
    EXTEND FILTERGROUP type
        FILTER 'Individuals' p IS Individual
    
    PROPERTIES newIndividual() DRAW p TOOLBAR
;

FORM individuals 'Individuals'
    OBJECTS i = Individual
    PROPERTIES(i) READONLY firstName, lastName, middleName, nameLegalEntity, namePosition, id

    LIST Individual OBJECT i
;

EXTEND FORM partner
    OBJECTS em = Individual
    PROPERTIES(em) firstName, lastName, middleName, namePosition, phone, email
    PROPERTIES(em) NEW, DELETE 
    FILTERS legalEntity(em) = p  
;

DESIGN partner {
    tabs {
        MOVE BOX(em) {
            showIf = p IS LegalEntity;
            caption = badged('Contacts', countIndividual(p));
            PROPERTY(phone(em)) { regexp = phoneRegexp(); }
            PROPERTY(email(em)) { regexp = emailRegexp(); }
        }
    }
}

// employee
META defineEmployee (prop, caption, cls, obj, container)
    prop = DATA Individual (###cls);
    positionName###prop ##caption (###cls o) = positionName(prop(o)); 
    name###prop (###cls o) = name(prop(o)); 
    position###prop (###cls o) = position(prop(o));
     
    CONSTRAINT prop(###cls o) AND NOT type(legalEntity(prop(o))) = PartnerType.company 
        CHECKED BY prop[###cls] MESSAGE 'There must be our worker';
    
    EXTEND FORM cls
        PROPERTIES(obj) positionName###prop 
    ;
    DESIGN cls {
        container {
            MOVE PROPERTY(positionName###prop(obj));
        }
    }
END