MODULE EmployeeCall;

REQUIRE Employee, Call;

NAMESPACE MasterData;

redirect = DATA Employee (Call) INDEXED;
nameRedirect 'Redirect' (Call c) = name(redirect(c));

notify ABSTRACT LIST (Call, Employee);

incomingNotifyOptions = DATA LOCAL JSON ();
incomingNotifyAction = DATA LOCAL INTEGER ();

incoming (Call c, Employee e) {
    IF pushConnection(e) THEN {
        notify(c, e);

        APPLY NESTED (incomingNotifyOptions, incomingNotifyAction);

        NEWTHREAD NEWSESSION {
            SHOW call OBJECTS c = c DOCKED;
        } TO exportInteger;
        
        pushNotify(pushConnection(e),
             incomingNotifyOptions(),
             action(exportInteger()));
        
//        IF incomingNotifyAction() THEN {
//            pushNotify(pushConnection(e),
//                       incomingNotifyOptions(),
//                       action(incomingNotifyAction()));
//        }
    }
}

answer ABSTRACT LIST (Call, Employee);

META defineObjectCall (object, capt, form, fobj, container)
    object = DATA ###object (Call) INDEXED;
    name###object capt (Call c) = name(object(c));
    countCall (###object o) = GROUP SUM 1 IF object(Call c) = o;

    EXTEND FORM form
        OBJECTS call = Call
        PROPERTIES(call) READONLY BACKGROUND RGB(255,212,255) IF outgoing(call) 
                      id, startedAt, caller, recipient, callerName, nameRedirect, nameEmployee, duration, result
        PROPERTIES(call) requestRecord GRID DISABLEIF NOT recorded(call)
        FILTERS object(call) = fobj
    ;

    DESIGN form {
        container {
            NEW calls {
                caption = badged('Calls', countCall(fobj));
                NEW callsHeader {
                    horizontal = TRUE;
                }
                MOVE BOX(call) { caption = ''; }
            }
        }
    }
END

@defineObjectCall(employee, 'Employee',  employee, e, details);

@defineObjectCall(partner, 'Partner', partner, p, tabs);

META defineObjectCallTo (object, let)
    call 'Call to' (###object l) {
        call(phone(l));
    }

    EXTEND FORM object
        PROPERTIES(let) call SHOWIF callAvailable() AND phone(let)
    ;

    DESIGN object {
        secondaryActions {
            MOVE PROPERTY(call(let)) { valueClass = 'btn-info'; }
        }
    }
END

META defineObjectHooks (object, let, capt, findProp, redirectProp, hintProp)
    start (Call c) +{
        IF outgoing(c) THEN {
            FOR ###object l = findProp(recipient(c)) DO {
                object(c) <- l;
            }
        } ELSE {
            FOR ###object l = findProp(caller(c)) DO {
                object(c) <- l;
                redirect(c) <- redirectProp(l);
                callerName(c) <- hintProp(l);
            }
        }
    }

    notify (Call c, Employee e) +{
        FOR ###object l = object(c) DO {
//            NEWTHREAD NEWSESSION {
//                SHOW object OBJECTS let = l DOCKED NOWAIT;
//            } TO incomingNotifyAction;
            
            incomingNotifyOptions() <- notification('Incoming call', JSON FROM body = hintProp(l));
        }
    }
END

answer (Call c, Employee e) +{
    employee(c) <- e;
}

META extendFormCall (cls, obj, capt, ncls, ncapt)
    open###cls capt (Call c) {
        NEWSESSION {
            SHOW cls OBJECTS obj = cls(c) DOCKED;
        }
    }
    
    new###ncls ncapt (Call c) {
        NEWSESSION {
            NEW o = ###ncls {
                cls(c) <- o;
                phone(o) <- caller(c);
                SHOW cls OBJECTS obj = o;
            }
        }
    } IMAGE 'add.png';
    
    EXTEND FORM call
        PROPERTIES(c) open###cls HEADER name(cls(c)) SHOWIF cls(c),
                      new###ncls
    ;
    
    DESIGN call {
        pane {
            NEW cls {
                caption = capt;
                NEW cls###Actions {
                    horizontal = TRUE;
                    MOVE PROPERTY(open###cls(c));
                    MOVE PROPERTY(new###ncls(c)) {
                        showIf = NOT cls(c);
                    }
                }
            }
        }
    }
END

META extendFormCall (cls, obj, capt)
    @extendFormCall(cls, obj, capt, cls, capt);
END