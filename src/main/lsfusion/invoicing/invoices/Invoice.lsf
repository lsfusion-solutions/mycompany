MODULE Invoice;

REQUIRE InvoicingSettings, TaxItem, BankAccount, FileUtils, 
        MetaTax, PaymentTermsSales, DateUtils, Department,
        ItemSales, PartnerSales, Company, Employee,
        BarCode, MetaNumerator, Doc,
        InvoiceType, Product;

NAMESPACE Invoicing;

CLASS Invoice 'Invoice';

@defineDocStatus(invoice, 'Invoice status');

// type
type 'Type' = DATA InvoiceType (Invoice) NONULL;
nameType 'Type' (Invoice s) = name(type(s));

WHEN LOCAL SET(Invoice s IS Invoice) AND NOT CHANGED(type(s)) DO type(s) <- defaultInvoiceType(); 

// dateTime
dateTime 'Date' = DATA DATETIME (Invoice) NONULL IN id;
WHEN LOCAL SET (Invoice b IS Invoice) AND NOT CHANGED(dateTime(b)) DO dateTime(b) <- currentDateTime();
@defineDateTimeAggregation(Invoice);

@defineNumberType(invoice);

numberDate 'Description' (Invoice i) = number(i) + ' (' + dateTime(i) + ')' IN id;

// customer
customer = DATA Partner (Invoice);
nameCustomer 'Customer' (Invoice i) = name(customer(i));
addressCsvCustomer 'Customer address' (Invoice i) = addressCsv(customer(i));

WHEN LOCAL SETCHANGED(type(Invoice i)) AND customer(type(i)) AND NOT CHANGED(customer(i)) DO customer(i) <- customer(type(i));  

isCustomer = ABSTRACT VALUE BOOLEAN (Invoice);
isCustomer(Invoice i) += isCustomer(customer(i));
CONSTRAINT customer(Invoice i) AND NOT isCustomer(i) 
                CHECKED BY customer[Invoice]
                MESSAGE 'The partner must be a customer';

@defineDocDepartment(invoice, customer);

// company
company 'Company' = DATA Company (Invoice) NONULL;
nameCompany 'Company' (Invoice b) = name(company(b));
WHEN LOCAL SET(Invoice b IS Invoice) AND NOT CHANGED(company(b)) DO company(b) <- defaultCompany(); 

// payment
paymentTerms = DATA PaymentTerm (Invoice); 
namePaymentTerms 'Payment terms' (Invoice i) = name(paymentTerms(i));

dueDateTime 'Pay before' = DATA DATETIME (Invoice);

WHEN LOCAL CHANGED(customer(Invoice b)) AND NOT CHANGED(paymentTerms(b)) DO paymentTerms(b) <- customerPaymentTerms(customer(b)); 

WHEN LOCAL (SETCHANGED(paymentTerms(Invoice i)) OR SETCHANGED(dateTime(i))) AND paymentTerms(i) AND NOT CHANGED(dueDateTime(i)) DO {
    dueDateTime(i) <- sumDay(dateTime(i), days(paymentTerms(i)));
}

// partner account
customerAccount 'Customer account' = DATA Account (Invoice);
nameCustomerAccount 'Customer account' (Invoice b) = name(customerAccount(b));
numberCustomerAccount (Invoice b) = number(customerAccount(b));
WHEN LOCAL CHANGED (customer(Invoice b)) DO customerAccount(b) <- defaultAccount(customer(b));

CONSTRAINT customerAccount(Invoice b) AND NOT customer(b) = holder(customerAccount(b))
    CHECKED BY customerAccount
    MESSAGE 'The account must belong to the selected partner';

// company account
companyAccount 'Company account' = DATA Account (Invoice);
nameCompanyAccount 'Company account' (Invoice b) = name(companyAccount(b));
numberCompanyAccount (Invoice b) = number(companyAccount(b));
bankCompanyAccount (Invoice b) = bank(companyAccount(b));
idBankCompanyAccount 'Bank' (Invoice b) = idBank(companyAccount(b));
nameBankCompanyAccount 'Bank' (Invoice b) = nameBank(companyAccount(b)); 

WHEN LOCAL CHANGED(company(Invoice b)) DO companyAccount(b) <- defaultAccount(company(b));

CONSTRAINT companyAccount(Invoice b) AND NOT company(b) = holder(companyAccount(b))
    CHECKED BY companyAccount
    MESSAGE 'The account must belong to the selected company';

deliveryAddress 'Delivery address' = DATA STRING (Invoice) CHARWIDTH 20;
WHEN LOCAL (CHANGED(customer(Invoice i)) OR CHANGED(department(i))) AND NOT CHANGED(deliveryAddress(i)) DO 
    deliveryAddress(i) <- OVERRIDE addressCsv(department(i)), addressCsvCustomer(i);

// representative
representative 'Our representative' = DATA Employee (Invoice);
nameRepresentative 'Our representative' (Invoice o)= MasterData.name(representative(o));

representative(Invoice o) <- currentUser() IF currentUser() IS Employee WHEN SET(o IS Invoice);

customerReference '{Customer_reference}' = DATA STRING[30] (Invoice) INDEXED;
note 'Note' = DATA ISTRING (Invoice) CHARWIDTH 20;

details 'Details' = DATA RICHTEXT (Invoice);

// lines
CLASS InvoiceLine 'Invoice line';
TABLE invoiceLine (InvoiceLine);

invoice 'Invoice' = DATA Invoice (InvoiceLine) NONULL DELETE;

index 'â„–' = PARTITION SUM 1 ORDER InvoiceLine l BY invoice(l) IN id MATERIALIZED CHARWIDTH 3;

item '{Item}' = DATA Item (InvoiceLine) NONULL;
nameItem '{Item}' (InvoiceLine l) = name(item(l)) IN id;
idBarCodeItem 'Barcode' (InvoiceLine l) = idBarCode(item(l));
idItem '{ID}' (InvoiceLine l) = id(item(l));
referenceItem 'Reference' (InvoiceLine l) = reference(item(l));

nameCategoryItem 'Category' (InvoiceLine l) = nameCategory(item(l));
level1Item 'Category 1' (InvoiceLine l) = level1(item(l));
level2Item 'Category 2' (InvoiceLine l) = level2(item(l));
level3Item 'Category 3' (InvoiceLine l) = level3(item(l));
level4Item 'Category 4' (InvoiceLine l) = level4(item(l));

CONSTRAINT item(InvoiceLine l) AND NOT canBeSold(item(l))
            CHECKED BY item 
            MESSAGE 'The item is not for sale';

countProductLines 'Number of lines with goods' (Invoice i) = GROUP SUM 1 IF invoice(InvoiceLine l) = i AND item(l) IS Product;

uom = DATA Uom (InvoiceLine);
nameUom 'UoM' (InvoiceLine l) = name(uom(l));
WHEN LOCAL CHANGED(item(InvoiceLine l)) DO uom(l) <- uom(item(l)); 

description 'Description' = DATA STRING (InvoiceLine); 

quantity 'Qty' = DATA NUMERIC[16,3] (InvoiceLine) CHARWIDTH 7;

weight 'Weight' (InvoiceLine l) = NUMERIC[16,3](quantity(l) * weight(item(l)));

price 'Price' = DATA NUMERIC[10,2] (InvoiceLine);

defaultPrice = ABSTRACT CASE NUMERIC[10,2] (InvoiceLine);
WHEN LOCAL SETCHANGED(item(InvoiceLine l)) AND NOT CHANGED(price(l)) DO price(l) <- defaultPrice(l);

defaultPrice (InvoiceLine l) += WHEN salesPrice(item(l)) THEN salesPrice(item(l)); 

calcAmount (InvoiceLine l) = NUMERIC[14,2](quantity(l) * price(l));

@defineDocDiscount(invoice);

@defineTaxCalc(invoice, i, sales, resultPrice);
taxIncluded (InvoiceLine l) += taxIncluded(type(invoice(l)));

discountAmount 'Discount amount' (InvoiceLine l) = calcAmount(l) (-) untaxedAmount(l);

// Line properties
type (InvoiceLine l) = type(invoice(l));
nameType 'Type' (InvoiceLine l) = nameType(invoice(l)) IN id;
imagedNameStatus 'Status' (InvoiceLine l) = imagedNameStatus(invoice(l));
number 'Number' (InvoiceLine l) = number(invoice(l)) IN id;
numberDate 'Description' (InvoiceLine l) = numberDate(invoice(l));
dateTime 'Date' (InvoiceLine l) = dateTime(invoice(l)) IN id;
date 'Date' (InvoiceLine l) = date(invoice(l));
customer (InvoiceLine l) = customer(invoice(l));
nameCustomer 'Customer' (InvoiceLine l) = nameCustomer(invoice(l));
nameCompany 'Company' (InvoiceLine l) = nameCompany(invoice(l));

FORM invoiceLines 'Invoice lines'
    OBJECTS l = InvoiceLine
    PROPERTIES(l) READONLY dateTime, number, index, nameItem, quantity, price
    PROPERTIES(l) NEWSESSION EDIT
    
    LIST InvoiceLine OBJECT l
;

edit (InvoiceLine l) + { edit(invoice(l)); } 

FORM invoice 'Invoice'
    OBJECTS  i = Invoice PANEL 
    PROPERTIES(i) READONLYIF readonly(i)
                  nameType, dateTime, number, 
                  nameCustomer, nameDepartment SHOWIF countDepartment(customer(i)), nameCompany,
                  namePaymentTerms, dueDateTime, nameCustomerAccount, nameCompanyAccount,
                  deliveryAddress, nameRepresentative, customerReference, note,
                  details
        
    OBJECTS l = InvoiceLine
    PROPERTIES(l) READONLYIF readonly(i)
                  index, nameItem, description, nameUom, idBarCodeItem, idItem, referenceItem, 
                  quantity, price, taxes, NEW, DELETE 
    FILTERS invoice(l) = i

    EDIT Invoice OBJECT i
;

DESIGN invoice {
    caption = badged('Invoice', number(i) + '(' + dateTime(i) + ')');
    OBJECTS {
        NEW header {
            horizontal = TRUE;
            alignment = STRETCH;
            NEW headerLeft {
                MOVE PROPERTY(nameType(i)) { notNull = TRUE; }
                MOVE PROPERTY(dateTime(i));
                MOVE PROPERTY(number(i));
            }
            NEW headerRight {
                MOVE PROPERTY(nameCustomer(i));
                MOVE PROPERTY(nameDepartment(i));
                MOVE PROPERTY(nameCompany(i)) { notNull = TRUE; }           
            }
            NEW relatedDoc {
                fill = 1;
                tabbed = TRUE;
            }
        }
        NEW details {
            fill = 5;
            tabbed = TRUE;
            NEW lines {
                caption = 'Lines';
                MOVE BOX(l) { 
                    fill = 3;
                    caption = '';
                    PROPERTY(nameItem(l)) { notNull = TRUE; } 
                }
                NEW linesFooter {                     
                    horizontal = TRUE;
                    alignment = STRETCH;
                }
            }
            NEW otherInformation {
                caption = 'Other information';
                lines = 2;
                NEW payment {
                    caption = 'Payment';
                    alignment = STRETCH;
                    MOVE PROPERTY(namePaymentTerms(i)); 
                    MOVE PROPERTY(dueDateTime(i)); 
                    MOVE PROPERTY(nameCompanyAccount(i));
                    MOVE PROPERTY(nameCustomerAccount(i));              
                }
                NEW shippingInformation {
                    caption = 'Shipping information';
                    MOVE PROPERTY(deliveryAddress(i));
                }           
                NEW invoiceInformat {
                    caption = 'Others';
                    alignment = STRETCH;
                    MOVE PROPERTY(nameRepresentative(i));
                    MOVE PROPERTY(customerReference(i)); 
                    MOVE PROPERTY(note(i));
                }
            }
            NEW detailsInformation {
                caption = 'Details';
                MOVE PROPERTY(details(i)) {
                    caption = '';
                    fill = 1;
                    height = 300;
                }
            }
        }
    }
    TOOLBARBOX {
        NEW footer FIRST {
            horizontal = TRUE;
        }
    }
}

@defineDocSearch(invoice, item, quantity, 'Quantity', i, canBeSold);
@defineBarCodeSearch(invoice, i, l, quantity);

@defineDocDiscountForm(invoice, i);

background = ABSTRACT CASE COLOR (Invoice);
FORM invoices 'Invoices'
    OBJECTS i = Invoice BACKGROUND background(i)
    PROPERTIES(i) READONLYIF isReadonly()
                           number, dateTime, nameCustomer, 
                           nameType, nameCompany,
                           namePaymentTerms, dueDateTime, nameCustomerAccount, nameCompanyAccount,
                           customerReference, note         
    PROPERTIES(i) NEWSESSION NEW, EDIT, DELETE
           
    LIST Invoice OBJECT i
;

@extendFormEditable(invoices);

@defineDocHistory(invoice, i, item);
@defineDocHistoryLineProperty(invoice, InvoiceLine, quantity, 'Qty', nameItem);
@defineDocHistoryLineProperty(invoice, InvoiceLine, untaxedAmount, '{Amount}', nameItem);


@defineDocObjectsForm(invoices, i, 'Invoices');
@defineDocTaxForm(invoice, i);
@defineDocStatusForm(invoice, i);
@defineDocLinesCount(invoice, i);

@defineObjectComments(invoice, i, details);

@defineObjectFiles(invoice, i, 'Invoice file');

NAVIGATOR {
    operations {
        NEW invoices;
    }
}

// copy
clone ABSTRACT LIST (Invoice, Invoice);
clone (Invoice to, Invoice from) + {
    type(to) <- type(from);
    customer(to) <- customer(from);
    company(to) <- company(from);
    note(to) <- note(from);
    FOR invoice(InvoiceLine l) = from INLINE NEW nl = InvoiceLine DO {
        invoice(nl) <- to;
        item(nl) <- item(l);
        
        quantity(nl) <- quantity(l);
        
        price(nl) <- price(l);
        discount(nl) <- discount(l);
        discountPrice(nl) <- discountPrice(l);
    }
}

copy 'Copy' (Invoice from)  { 
    NEWSESSION {
        NEW to = Invoice {
            clone(to, from);
            SHOW invoice OBJECTS i = to DOCKED;
        }
    }
}
EXTEND FORM invoice PROPERTIES(i) copy;

DESIGN invoice {
    secondaryActions {
        MOVE PROPERTY(copy(i)) { valueClass = 'btn-secondary'; } 
    }
}
