MODULE Invoice;

REQUIRE InvoicingSettings, TaxItem, BankAccount, 
        MetaTax, PaymentTermsSales,  
        ItemSales, PartnerSales, Company, 
        BarCode, MetaNumerator, Doc,
        InvoiceType, Product;

NAMESPACE Invoicing;

CLASS Invoice 'Реализация';

@defineStatus(invoice, 'счета');

// type
type 'Тип' = DATA InvoiceType (Invoice) NONULL;
nameType 'Тип' (Invoice s) = name(type(s));

WHEN LOCAL SET(Invoice s IS Invoice) AND NOT CHANGED(type(s)) DO type(s) <- defaultInvoiceType(); 

// dateTime
dateTime 'Дата' = DATA DATETIME (Invoice) NONULL IN id;
WHEN LOCAL SET (Invoice b IS Invoice) DO dateTime(b) <- currentDateTime();

@defineNumberType(invoice);

numberDate 'Описание' (Invoice i) = number(i) + ' от ' + dateTime(i) IN id;

// customer
customer = DATA Partner (Invoice);
nameCustomer 'Покупатель' (Invoice b) = name(customer(b));
CONSTRAINT customer(Invoice b) AND NOT isCustomer(customer(b)) 
                CHECKED BY customer
                MESSAGE 'Контрагент должен быть покупателем';

// company
company 'Компания' = DATA Company (Invoice) NONULL;
nameCompany 'Компания' (Invoice b) = name(company(b));
WHEN LOCAL SET(Invoice b IS Invoice) AND NOT CHANGED(company(b)) DO company(b) <- defaultCompany(); 

// payment
paymentTerms = DATA PaymentTerm (Invoice); 
namePaymentTerms 'Условия оплаты' (Invoice i) = name(paymentTerms(i));

dueDateTime 'Оплатить до' = DATA DATETIME (Invoice);

WHEN LOCAL CHANGED(customer(Invoice b)) AND NOT CHANGED(paymentTerms(b)) DO paymentTerms(b) <- customerPaymentTerms(customer(b)); 

WHEN LOCAL (SETCHANGED(paymentTerms(Invoice i)) OR SETCHANGED(dateTime(i))) AND paymentTerms(i) AND NOT CHANGED(dueDateTime(i)) DO {
    dueDateTime(i) <- sumDay(dateTime(i), days(paymentTerms(i)));
}

// partner account
customerAccount 'Счет покупателя' = DATA Account (Invoice);
nameCustomerAccount 'Счет покупателя' (Invoice b) = name(customerAccount(b));
WHEN LOCAL CHANGED (customer(Invoice b)) DO customerAccount(b) <- defaultAccount(customer(b));

CONSTRAINT customerAccount(Invoice b) AND NOT customer(b) = holder(customerAccount(b))
    CHECKED BY customerAccount
    MESSAGE 'Счет должен принадлежать выбранному контрагенту';

// company account
companyAccount 'Счет компании' = DATA Account (Invoice);
nameCompanyAccount 'Счет компании' (Invoice b) = name(companyAccount(b));
WHEN LOCAL CHANGED(company(Invoice b)) DO companyAccount(b) <- defaultAccount(company(b));

CONSTRAINT companyAccount(Invoice b) AND NOT company(b) = holder(companyAccount(b))
    CHECKED BY companyAccount
    MESSAGE 'Счет должен принадлежать выбранной компании';

customerReference 'Код покупателя' = DATA STRING[30] (Invoice);
note 'Примечание' = DATA ISTRING[50] (Invoice);

// lines
CLASS InvoiceLine 'Строка реализации';

invoice 'Реализация' = DATA Invoice (InvoiceLine) NONULL DELETE;

index '№' = PARTITION SUM 1 ORDER InvoiceLine l BY invoice(l) IN id MATERIALIZED CHARWIDTH 3;

item 'Номенклатура' = DATA Item (InvoiceLine) NONULL;
nameItem 'Номенклатура' (InvoiceLine l) = name(item(l)) IN id;
idBarCodeItem 'Штрихкод' (InvoiceLine l) = idBarCode(item(l));
idItem 'Код' (InvoiceLine l) = id(item(l));

CONSTRAINT item(InvoiceLine l) AND NOT canBeSold(item(l))
            CHECKED BY item 
            MESSAGE 'Номенклатура не предназначена для продажи';

countProductLines 'Кол-во строк с товарами' (Invoice i) = GROUP SUM 1 IF invoice(InvoiceLine l) = i AND item(l) IS Product;

uom = DATA Uom (InvoiceLine);
nameUom 'Ед. изм.' (InvoiceLine l) = name(uom(l));
WHEN LOCAL CHANGED(item(InvoiceLine l)) DO uom(l) <- uom(item(l)); 

description 'Описание' = DATA STRING (InvoiceLine); 

quantity 'Кол-во' = DATA NUMERIC[16,3] (InvoiceLine) NONULL CHARWIDTH 7;

weight 'Вес' (InvoiceLine l) = NUMERIC[16,3](quantity(l) * weight(item(l)));

price 'Цена' = DATA NUMERIC[10,2] (InvoiceLine) NONULL;
WHEN LOCAL SETCHANGED(item(InvoiceLine l)) AND NOT CHANGED(price(l)) DO price(l) <- salesPrice(item(l));

@defineDocDiscount(invoice);

@defineTaxCalc(invoice, i, sales, resultPrice);
taxIncluded (InvoiceLine l) += taxIncluded(type(invoice(l)));

// Line properties
nameStatus 'Статус' (InvoiceLine l) = nameStatus(invoice(l));
type (InvoiceLine l) = type(invoice(l));
number 'Номер' (InvoiceLine l) = number(invoice(l));
numberDate 'Описание' (InvoiceLine l) = numberDate(invoice(l));
dateTime 'Дата' (InvoiceLine l) = dateTime(invoice(l));
customer (InvoiceLine l) = customer(invoice(l));
nameCustomer 'Покупатель' (InvoiceLine l) = nameCustomer(invoice(l));
nameCompany 'Компания' (InvoiceLine l) = nameCompany(invoice(l));

FORM invoiceLines 'Строки реализаций'
    OBJECTS l = InvoiceLine
    PROPERTIES(l) READONLY dateTime, number, index, nameItem, quantity, price
    PROPERTIES(l) EDIT
    
    LIST InvoiceLine OBJECT l
;

edit (InvoiceLine l) + { edit(invoice(l)); } 

FORM invoice 'Реализация'
    OBJECTS  i = Invoice PANEL 
    PROPERTIES(i) nameType, dateTime, number, nameCustomer, nameCompany,
                  namePaymentTerms, dueDateTime, nameCustomerAccount, nameCompanyAccount,
                  customerReference, note
        
    OBJECTS l = InvoiceLine
    PROPERTIES(l) index, nameItem, description, nameUom, idBarCodeItem, idItem, 
                  quantity, price, taxes ON CHANGE changeTax(l), NEW, DELETE 
    FILTERS invoice(l) = i

    EDIT Invoice OBJECT i
;

DESIGN invoice {
    OBJECTS {
        NEW header {
            type = CONTAINERH;
            alignment = STRETCH;
            NEW headerLeft {
                MOVE PROPERTY(nameType(i)) { notNull = TRUE; }
                MOVE PROPERTY(dateTime(i));
                MOVE PROPERTY(number(i));
            }
            NEW headerRight {
                MOVE PROPERTY(nameCustomer(i));
                MOVE PROPERTY(nameCompany(i)) { notNull = TRUE; }           
            }
            NEW relatedDoc {
                fill = 1;
                type = TABBED;
            }
        }
        NEW details {
            fill = 5;
            type = TABBED;
            NEW lines {
                caption = 'Строки';
                MOVE BOX(l) { 
                    fill = 3;
                    PROPERTY(nameItem(l)) { notNull = TRUE; } 
                }
                NEW linesFooter {                     
                    type = CONTAINERH;
                    alignment = STRETCH;
                }
            }
            NEW otherInformation {
                caption = 'Прочая информация';
                type = COLUMNS;
                columns = 2;
                NEW payment {
                    caption = 'Оплата';
                    alignment = STRETCH;
                    MOVE PROPERTY(namePaymentTerms(i)); 
                    MOVE PROPERTY(dueDateTime(i)); 
                    MOVE PROPERTY(nameCompanyAccount(i));
                    MOVE PROPERTY(nameCustomerAccount(i));              
                }           
                NEW invoiceInformat {
                    caption = 'Прочие';
                    alignment = STRETCH;
                    MOVE PROPERTY(customerReference(i)); 
                    MOVE PROPERTY(note(i));
                }
            }
        }
    }
    TOOLBARBOX {
        NEW footer FIRST {
            type = CONTAINERH;
        }
    }
}

@defineDocHistory(invoice, i, item, quantity);
@defineDocSearch(invoice, item, quantity, 'Кол-во', i, canBeSold);
@defineBarCodeSearch(invoice, i, item, quantity);

@defineDocDiscountForm(invoice);

FORM invoices 'Реализации'
    OBJECTS i = Invoice
    PROPERTIES(i) READONLY nameType, dateTime, number, nameCustomer, nameCompany,
                           namePaymentTerms, dueDateTime, nameCustomerAccount, nameCompanyAccount,
                           customerReference, note         
    PROPERTIES(i) NEWSESSION NEW, EDIT, DELETE
           
    LIST Invoice OBJECT i
;

@defineTaxForm(invoice, i);
@defineStatusForm(invoice, i);
@defineDocLinesCount(invoice, i);

NAVIGATOR {
    operations {
        NEW invoices;
    }
}

// copy
copy 'Копировать' (Invoice i)  { 
    NEWSESSION {
        NEW ni = Invoice {
            customer(ni) <- customer(i);
            note(ni) <- note(i);
            FOR invoice(InvoiceLine l) = i INLINE NEW nl = InvoiceLine DO {
                invoice(nl) <- ni;
                item(nl) <- item(l);
                
                quantity(nl) <- quantity(l);
                
                price(nl) <- price(l);
                discount(nl) <- discount(l);
                discountPrice(nl) <- discountPrice(l);
            }
            SHOW invoice OBJECTS i = ni DOCKED;
        }
    }
}
EXTEND FORM invoice PROPERTIES(i) copy;

DESIGN invoice {
    secondaryActions {
        MOVE PROPERTY(copy(i)); 
    }
}
