MODULE CreditNote;

REQUIRE InvoiceDone, BillCanceled;

NAMESPACE Invoicing;

// types
isCreditNote 'Return' = DATA BOOLEAN (BillType);
EXTEND FORM billType PROPERTIES(o) isCreditNote;

isCreditNote (Bill r) = isCreditNote(type(r));
isVendor(Bill b) += isCreditNote(b) AND isCustomer(vendor(b));

billType = DATA BillType (InvoiceType);
nameBillType 'Return type' (InvoiceType t) = name(billType(t));
EXTEND FORM invoiceType PROPERTIES(o) nameBillType;

// lines
@defineDocLineRelation(invoice, bill, 'Invoice', 'Return', i, b);

numberInvoiceLine 'Invoice' (BillLine l) = number(invoiceLine(l)); 

CONSTRAINT invoiceLine(BillLine l) AND NOT 
                (customer(invoiceLine(l)) = vendor(l) OR (NOT customer(invoiceLine(l)) AND NOT vendor(l)))
    CHECKED BY invoiceLine
    MESSAGE 'The sales partner must be the same as the return partner';

CONSTRAINT invoiceLine(BillLine l) AND NOT item(invoiceLine(l)) = item(l)
    CHECKED BY invoiceLine
    MESSAGE 'The sales item must match the return item';

// events
WHEN LOCAL SETCHANGED(invoiceLine(BillLine l)) DO {
    price(l) <- resultPrice(invoiceLine(l));
    in(l, Tax t) <- in(invoiceLine(l), t);
}

EXTEND FORM bill
    PROPERTIES(l) numberInvoiceLine SHOWIF isCreditNote(b) READONLYIF readonly(b)
;

// add
fill ABSTRACT LIST (BillLine, InvoiceLine);
fill ABSTRACT LIST (Bill, Invoice);
 
create (Bill b, Invoice i) {
    type(b) <- billType(type(i));
        
    vendor(b) <- customer(i);
    vendorAccount(b) <- customerAccount(i);
    
    company(b) <- company(i);
    companyAccount(b) <- companyAccount(i);
    
    note(b) <- note(i);
    
    FOR invoice(InvoiceLine l) = i INLINE NEW bl = BillLine DO {
        invoiceLine(bl) <- l; 
        bill(bl) <- b;

        item(bl) <- item(l);

        quantity(bl) <- quantity(l);
        
        fill(bl, l);
    }
    
    fill(b, i);
}

addCreditNote 'Return' (Invoice i) {
    APPLY; 
    IF canceled() THEN RETURN;
    
    NEWSESSION { 
        NEW b = Bill {
            create(b, i);
            SHOW bill OBJECTS b = b DOCKED;
        }
        
    }
}

EXTEND FORM invoice
    PROPERTIES(i) addCreditNote SHOWIF ready(i)
;

DESIGN invoice {
    secondaryActions {
        MOVE PROPERTY(addCreditNote(i)) { valueClass = 'btn-warning'; }
    }               
}

// returned quantity
checkReturnedQuantity 'Check returned quantity' = DATA BOOLEAN (InvoiceType);
EXTEND FORM invoiceType PROPERTIES(o) checkReturnedQuantity;

returned 'Returned' (InvoiceLine il) = 
    GROUP SUM quantity(BillLine bl) IF invoiceLine(bl) = il AND active(bill(bl));

CONSTRAINT SET(returned(InvoiceLine il) > OVERRIDE quantity(il), 0.0) AND checkReturnedQuantity(type(il))
    MESSAGE 'The returned quantity on the invoice line exceeds the original quantity';

FORM invoiceBillShow 'Refunds'
    OBJECTS il = InvoiceLine
    
    OBJECTS bl = BillLine
    PROPERTIES(bl) READONLY number, dateTime, imagedNameStatus, quantity
    FILTERS invoiceLine(bl) = il,
            active(bill(bl))
;
    
EXTEND FORM invoice
    PROPERTIES(l) returned ON CHANGE { SHOW invoiceBillShow OBJECTS il = l; } SHOWIF countBillLine(i)
;