MODULE Debt;

REQUIRE Partner, Company, Contract, Currency, ExchangeRate, DateUtils, InvoicingSettings;

NAMESPACE Invoicing;

CLASS ABSTRACT Debt 'Debt';
active '{Active}' = ABSTRACT BOOLEAN (Debt) MATERIALIZED;
number 'Number' = ABSTRACT STRING[50] (Debt) CHARWIDTH 10 MATERIALIZED;

dateTime 'Date' = ABSTRACT DATETIME (Debt) MATERIALIZED;
@defineDateTimeAggregation(Debt);

dueDateTime 'Pay before' = ABSTRACT DATETIME(Debt) MATERIALIZED;

partner = ABSTRACT Partner (Debt) MATERIALIZED;
namePartner 'Partner' (Debt d) = name(partner(d));

INDEX partner(Debt d), dateTime(d), d;

company = ABSTRACT Company (Debt) MATERIALIZED;
nameCompany 'Company' (Debt d) = name(company(d));

contract = ABSTRACT Contract (Debt) MATERIALIZED; 

sourceCurrency = ABSTRACT Currency (Debt) MATERIALIZED;
nameSourceCurrency 'Source currency' (Debt d) = name(sourceCurrency(d));

sourceAmount 'Source amount' = ABSTRACT VALUE NUMERIC[14,2] (Debt) MATERIALIZED;

skipConvertingDebtToDefaultCurrency 'Skip converting debt to default currency' = DATA BOOLEAN ();
EXTEND FORM options PROPERTIES() skipConvertingDebtToDefaultCurrency;
DESIGN options { commons { MOVE PROPERTY(skipConvertingDebtToDefaultCurrency()); } }

currency = ABSTRACT VALUE Currency (Debt) MATERIALIZED;
currency (Debt d) += defaultCurrency() IF d IS Debt AND NOT skipConvertingDebtToDefaultCurrency();

rate1 (Debt d, DATE dt) = rate1(currency(d), (OVERRIDE sourceCurrency(d), defaultCurrency()), dt);
rate1 'Rate' (Debt d) = rate1(d, date(d));
currentRate1 (Debt d) = rate1(d, currentDate());

amount '{Amount}' (Debt d) = NUMERIC[14,2](sourceAmount(d) * rate1(d)) MATERIALIZED;

class 'Type' (Debt d) = objectClassName(d) IF d IS Debt CHARWIDTH 15;

type 'Type' = ABSTRACT ISTRING[100] (Debt) CHARWIDTH 20 MATERIALIZED;

// incoming
CLASS ABSTRACT IncomingDebt 'Incoming debt' : Debt;

// outgoing
CLASS ABSTRACT OutgoingDebt 'Outgoing debt' : Debt;

signedAmount '{Amount}' (Debt d) = IF d IS OutgoingDebt THEN amount(d) ELSE -amount(d) MATERIALIZED;

// match
paid 'Paid' = DATA NUMERIC[14,2] (IncomingDebt, OutgoingDebt);

WHEN CHANGED(amount(IncomingDebt id)) AND amount(id) < paid(id, OutgoingDebt od) DO
    paid(id, od) <- amount(id);

WHEN CHANGED(amount(OutgoingDebt od)) AND amount(od) < paid(IncomingDebt id, od) DO
    paid(id, od) <- amount(od);

skipMatched = ABSTRACT BOOLEAN (IncomingDebt, OutgoingDebt);
canBeMatched (IncomingDebt id, OutgoingDebt od) =
    id IS IncomingDebt AND od IS OutgoingDebt AND partner(id) = partner(od) AND company(id) = company(od) AND NOT skipMatched(id, od);

paid 'Paid' (IncomingDebt id) = GROUP SUM paid(id, OutgoingDebt od) IF active(od) MATERIALIZED;
paid 'Paid' (OutgoingDebt od) = GROUP SUM paid(IncomingDebt id, od) IF active(id) MATERIALIZED;  
paid 'Paid' (Debt d) = MULTI paid[IncomingDebt](d), paid[OutgoingDebt](d);

left 'Left' (IncomingDebt id) = (amount(id) IF id IS IncomingDebt) (-) paid(id);
left 'Left' (OutgoingDebt od) = (amount(od) IF od IS OutgoingDebt) (-) paid(od);
left 'Left' (Debt d) = MULTI left[IncomingDebt](d), left[OutgoingDebt](d);
signedLeft 'Left' (Debt d) = IF d IS OutgoingDebt THEN left(d) ELSE -left(d);

left 'Left' (IncomingDebt id, OutgoingDebt od) = min(left(id), left(od));

sourceLeft (IncomingDebt id) = NUMERIC[14,2] (left(id) / currentRate1(id)); 
sourceLeft (OutgoingDebt od) = NUMERIC[14,2] (left(od) / currentRate1(od)); 

canBePaid (IncomingDebt id, OutgoingDebt od) = canBeMatched(id, od) AND left(id, od) > 0 AND active(id) AND active(od);

skipCheckLeft = ABSTRACT BOOLEAN (Debt);
CONSTRAINT left(IncomingDebt id) < 0 AND amount(id) > 0 AND NOT skipCheckLeft(id) MESSAGE 'Incoming debt is posted more than the amount owed';
CONSTRAINT left(OutgoingDebt od) < 0 AND amount(od) > 0 AND NOT skipCheckLeft(od) MESSAGE 'Outgoing debt has posted more than the outstanding amount';
