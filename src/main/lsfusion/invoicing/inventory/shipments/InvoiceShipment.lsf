MODULE InvoiceShipment;

REQUIRE InvoiceCanceled, InvoiceReady, ShipmentCanceled, LocationEmployee, ProductSku;

NAMESPACE Invoicing;

shipmentType = DATA ShipmentType (InvoiceType);
nameShipmentType 'Shipment type' (InvoiceType t) = name(shipmentType(t));

EXTEND FORM invoiceType PROPERTIES nameShipmentType(o);

// location
location 'Location' = DATA Location (Invoice);
nameLocation 'Location' (Invoice i) = name(location(i));
CONSTRAINT SETCHANGED(location(Invoice o)) AND internalUse(location(o)) CHECKED BY location[Invoice]
    MESSAGE 'The selected location is for internal use';

location (InvoiceLine l) = location(invoice(l));
nameLocation 'Location' (InvoiceLine l) = name(location(l));

EXTEND FORM invoice 
    PROPERTIES(i) nameLocation SHOWIF shipmentType(type(i))
;
 
DESIGN invoice {
    headerLeft {
        MOVE PROPERTY(nameLocation(i));
    }
}

EXTEND FORM invoices
    PROPERTIES(i) READONLYIF isReadonly() nameLocation
;

@defineDocLocationAccess(invoice, i);

// lines
@defineDocLineRelation(invoice, shipment, 'Invoice', 'Shipment', i, s);

shippedQuantity (InvoiceLine l) = NUMERIC[16,3](quantity(l) * skuCoeff(item(l)));
shippedProduct (InvoiceLine l) = sku(item(l));

fill ABSTRACT LIST (Shipment, Invoice);
fill ABSTRACT LIST (ShipmentLine, InvoiceLine);
invoiceShipmentCreated = DATA LOCAL Shipment ();
newShipment (Invoice i) {
    NEW r = Shipment { 
        customer(r) <- customer(i);
        department(r) <- department(i);

        type(r) <- shipmentType(type(i));
        location(r) <- location(i);
        
        deliveryAddress(r) <- deliveryAddress(i);

        immediate(r) <- TRUE;
        done(r) <- TRUE;
        
        fill(r, i);
    
        FOR invoice(InvoiceLine l) = i AND item(l) IS Product INLINE NEW rl = ShipmentLine DO {            
            shipment(rl) <- r;
            product(rl) <- shippedProduct(l);
            done(rl) <- shippedQuantity(l);
            invoiceLine(rl) <- l;
            fill(rl, l);
        }
        
        invoiceShipmentCreated() <- r;
    }
}

createShipment 'Create Shipment' (Invoice b) {
    APPLY;
    IF canceled() THEN RETURN;
    
    NEWSESSION {
        newShipment(b);
        SHOW shipment OBJECTS s = invoiceShipmentCreated() DOCKED;
    }
}

EXTEND FORM invoice
    PROPERTIES(i) createShipment SHOWIF active(i) AND shipmentType(type(i)) AND NOT countShipmentLine(i) 

    OBJECTS s = Shipment
    PROPERTIES(s) READONLY number, scheduledDateTime, imagedNameStatus BACKGROUND colorStatus(s), nameType, executionDateTime
    PROPERTIES(s) NEWSESSION EDIT GRID   
    FILTERS in(i, s)
;

DESIGN invoice {
    primaryActions {
        MOVE PROPERTY(createShipment(i)) { valueClass = 'btn-primary'; }
    }
    relatedDoc {
        MOVE BOX(s) {
            caption = badged('Shipments', countShipments(i));
            GRID(s) {
                width = 100;
                autoSize = TRUE;
            }
        }
        REMOVE TOOLBARSYSTEM(s);
    }
}

clone (Invoice to, Invoice from) + {
    location(to) <- location(from);
}

// auto create
autoCreateShipment 'Automatically create shipment' = DATA BOOLEAN (InvoiceType);
EXTEND FORM invoiceType PROPERTIES autoCreateShipment(o) SHOWIF shipmentType(o);

WHEN (SET(ready(Invoice i)) OR SET(countProductLines(i))) AND ready(i) AND autoCreateShipment(type(i)) AND countProductLines(i) DO 
    newShipment(i);
WHEN SET(canceled(Invoice i)) AND in(i, Shipment s) AND countInvoice(s) = 1 AND autoCreateShipment(type(i)) DO 
    canceled(s) <- TRUE; 
WHEN CHANGED(customer(Invoice i)) AND in(i, Shipment s) AND countInvoice(s) = 1 AND autoCreateShipment(type(i)) DO 
    customer(s) <- customer(i); 
WHEN (CHANGED(quantity(invoiceLine(ShipmentLine l))) OR CHANGED(item(invoiceLine(l)))) AND autoCreateShipment(type(invoice(invoiceLine(l)))) DO 
    done(l) <- NUMERIC[16,3](quantity(invoiceLine(l)) * skuCoeff(item(invoiceLine(l))));
WHEN CHANGED(item(invoiceLine(ShipmentLine l))) AND autoCreateShipment(type(invoice(invoiceLine(l)))) DO 
    product(l) <- shippedProduct(invoiceLine(l));
