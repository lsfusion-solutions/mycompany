MODULE BillReceipt;

REQUIRE BillCanceled, BillReady, ReceiptCanceled,
        CreditNote, ShipmentReceipt, ProductSku;

NAMESPACE Invoicing;

receiptType = DATA ReceiptType (BillType);
nameReceiptType 'Receipt type' (BillType t) = name(receiptType(t));

EXTEND FORM billType PROPERTIES nameReceiptType(o);

// location
location 'Location' = DATA Location (Bill);
nameLocation 'Location' (Bill b) = name(location(b));
CONSTRAINT SETCHANGED(location(Bill o)) AND internalUse(location(o)) CHECKED BY location[Bill]
    MESSAGE 'The selected location is for internal use';

EXTEND FORM bill 
    PROPERTIES(b) nameLocation SHOWIF receiptType(type(b)) READONLYIF readonly(b)
;
DESIGN bill {
    headerLeft {
        MOVE PROPERTY(nameLocation(b));
    }
}

EXTEND FORM bills
    PROPERTIES(b) READONLYIF isReadonly() nameLocation
;

@defineDocLocationAccess(bill, b);

// lines
@defineDocLineRelation(bill, receipt, 'Bill', 'Receipt', b, r);

receivedQuantity (BillLine l) = NUMERIC[16,3](quantity(l) * skuCoeff(item(l)));
receivedProduct (BillLine l) = sku(item(l));

fill ABSTRACT LIST (Receipt, Bill);
fill ABSTRACT LIST (ReceiptLine, BillLine);
billReceiptCreated = DATA LOCAL Receipt ();
newReceipt (Bill b) {
    NEW r = Receipt {
        scheduledDateTime(r) <- OVERRIDE deliveryDateTime(b), currentDateTime();
        
        vendor(r) <- vendor(b);
        type(r) <- receiptType(type(b));
        location(r) <- location(b);

        immediate(r) <- TRUE;
        done(r) <- TRUE;
        
        fill(r, b);
        
        FOR bill(BillLine l) = b AND item(l) IS Product INLINE NEW rl = ReceiptLine DO {            
            receipt(rl) <- r;
            product(rl) <- receivedProduct(l);
            done(rl) <- receivedQuantity(l);
            billLine(rl) <- l;
            fill(rl, l);
        }
        
        billReceiptCreated() <- r;
    }
}

createReceipt 'Create Receipt' (Bill b) {
    APPLY;
    IF canceled() THEN RETURN;
    
    NEWSESSION {
        newReceipt(b);
        SHOW receipt OBJECTS r = billReceiptCreated() DOCKED;
    }
} 

EXTEND FORM bill
    PROPERTIES(b) createReceipt SHOWIF ready(b) AND receiptType(type(b)) AND NOT countReceiptLine(b) 

    OBJECTS r = Receipt
    PROPERTIES(r) READONLY number, scheduledDateTime, imagedNameStatus BACKGROUND colorStatus(r), nameType, executionDateTime
    PROPERTIES(r) NEWSESSION EDIT GRID   
    FILTERS in(b, r)
;

DESIGN bill {
    primaryActions {
        MOVE PROPERTY(createReceipt(b)) { valueClass = 'btn-primary'; }
    }
    relatedDoc {
        MOVE BOX(r) {
            caption = badged('Receipts', countReceipts(b));
            GRID(r) { size = (100, -1); }
        }
        REMOVE TOOLBARSYSTEM(r);
    }
}

clone (Bill to, Bill from) + {
    location(to) <- location(from);
}

// auto create
autoCreateReceipt 'Automatically create receipt' = DATA BOOLEAN (BillType);
EXTEND FORM billType PROPERTIES autoCreateReceipt(o) SHOWIF receiptType(o);

WHEN (SET(ready(Bill b)) OR SET(countProductLines(b))) AND ready(b) AND autoCreateReceipt(type(b)) AND countProductLines(b) DO 
    newReceipt(b);
WHEN SET(canceled(Bill b)) AND in(b, Receipt r) AND countBill(r) = 1 AND autoCreateReceipt(type(b)) DO 
    canceled(r) <- TRUE; 
WHEN CHANGED(vendor(Bill b)) AND in(b, Receipt r) AND countBill(r) = 1 AND autoCreateReceipt(type(b)) DO 
    vendor(r) <- vendor(b); 
WHEN (CHANGED(quantity(billLine(ReceiptLine l))) OR CHANGED(item(billLine(l)))) AND autoCreateReceipt(type(bill(billLine(l)))) DO 
    done(l) <- receivedQuantity(billLine(l));
WHEN CHANGED(item(billLine(ReceiptLine l))) AND autoCreateReceipt(type(bill(billLine(l)))) DO 
    product(l) <- receivedProduct(billLine(l));