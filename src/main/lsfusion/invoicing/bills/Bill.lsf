MODULE Bill;

REQUIRE InvoicingSettings, TaxItem, BankAccount, FileUtils, 
        MetaTax, PaymentTermsPurchase, DateUtils, 
        ItemPurchase, ItemCost, PartnerPurchase, Company,
        BarCode, MetaNumerator, Doc, LocationEmployee,
        BillType, Product, ServiceP;

NAMESPACE Invoicing;

CLASS Bill 'Bill';

@defineDocStatus(bill, 'Bill status');

// type
type 'Type' = DATA BillType (Bill) NONULL;
nameType 'Type' (Bill s) = name(type(s));

WHEN LOCAL SET(Bill s IS Bill) AND NOT CHANGED(type(s)) DO type(s) <- defaultBillType(); 

// dateTime
dateTime 'Date' = DATA DATETIME (Bill) NONULL IN id;
WHEN LOCAL SET (Bill b IS Bill) AND NOT CHANGED(dateTime(b)) DO dateTime(b) <- currentDateTime();
@defineDateTimeAggregation(Bill);

@defineNumberType(bill);

numberDate 'Description' (Bill b) = number(b) + ' (' + dateTime(b) + ')' IN id;

// vendor
vendor 'Vendor' = DATA Partner (Bill);
nameVendor 'Vendor' (Bill b) = name(vendor(b));

WHEN LOCAL SETCHANGED(type(Bill b)) AND vendor(type(b)) AND NOT CHANGED(vendor(b)) DO vendor(b) <- vendor(type(b));  

isVendor = ABSTRACT VALUE BOOLEAN (Bill);
isVendor(Bill b) += isVendor(vendor(b));
CONSTRAINT vendor(Bill b) AND NOT isVendor(b) 
                CHECKED BY vendor[Bill]
                MESSAGE 'The partner must be a vendor';

// company
company 'Company' = DATA Company (Bill) NONULL;
nameCompany 'Company' (Bill b) = name(company(b));
WHEN LOCAL SET(Bill b IS Bill) AND NOT CHANGED(company(b)) DO company(b) <- defaultCompany(); 

// payment
paymentTerms = DATA PaymentTerm (Bill); 
namePaymentTerms 'Payment terms' (Bill b) = name(paymentTerms(b));

dueDateTime 'Pay before' = DATA DATETIME (Bill);
@defineDateTimeAggregation(Bill, due, );

WHEN LOCAL CHANGED(vendor(Bill b)) AND NOT CHANGED(paymentTerms(b)) DO paymentTerms(b) <- vendorPaymentTerms(vendor(b)); 

WHEN LOCAL (SETCHANGED(paymentTerms(Bill b)) OR SETCHANGED(dateTime(b))) AND paymentTerms(b) AND NOT CHANGED(dueDateTime(b)) DO {
    dueDateTime(b) <- sumDay(dateTime(b), days(paymentTerms(b)));
}

// partner account
vendorAccount 'Vendor account' = DATA Account (Bill);
nameVendorAccount 'Vendor account' (Bill b) = name(vendorAccount(b));
WHEN LOCAL CHANGED (vendor(Bill b)) DO vendorAccount(b) <- defaultAccount(vendor(b));

CONSTRAINT vendorAccount(Bill b) AND NOT vendor(b) = holder(vendorAccount(b))
    CHECKED BY vendorAccount
    MESSAGE 'The account must belong to the selected partner';

// company account
companyAccount 'Company account' = DATA Account (Bill);
nameCompanyAccount 'Company account' (Bill b) = name(companyAccount(b));
WHEN LOCAL CHANGED(company(Bill b)) DO companyAccount(b) <- defaultAccount(company(b));

CONSTRAINT companyAccount(Bill b) AND NOT company(b) = holder(companyAccount(b))
    CHECKED BY companyAccount
    MESSAGE 'The account must belong to the selected company';

// representative
representative 'Our representative' = DATA Employee (Bill);
nameRepresentative 'Our representative' (Bill o)= MasterData.name(representative(o));

representative(Bill o) <- currentUser() IF currentUser() IS Employee WHEN SET(o IS Bill);

vendorReference 'Vendor reference' = DATA STRING[30] (Bill) INDEXED;
note 'Note' = DATA ISTRING (Bill) CHARWIDTH 20;

details 'Details' = DATA RICHTEXT (Bill);

// lines
CLASS BillLine 'Bill line';
TABLE billLine (BillLine);

bill 'Bill' = DATA Bill (BillLine) NONULL DELETE;

index 'â„–' = PARTITION SUM 1 ORDER BillLine l BY bill(l) IN id MATERIALIZED CHARWIDTH 3;

item '{Item}' = DATA Item (BillLine) NONULL;
nameItem '{Item}' (BillLine l) = name(item(l)) IN id;
idBarCodeItem 'Barcode' (BillLine l) = idBarCode(item(l));
idItem '{ID}' (BillLine l) = id(item(l));
referenceItem 'Reference' (BillLine l) = reference(item(l));

nameCategoryItem 'Category' (BillLine l) = nameCategory(item(l));
level1Item 'Category 1' (BillLine l) = level1(item(l));
level2Item 'Category 2' (BillLine l) = level2(item(l));
level3Item 'Category 3' (BillLine l) = level3(item(l));
level4Item 'Category 4' (BillLine l) = level4(item(l));

countProductLines 'Number of lines with goods' (Bill b) = GROUP SUM 1 IF bill(BillLine l) = b AND item(l) IS Product;
countServiceLine 'Number of lines with services' (Bill b) = GROUP SUM 1 IF b = bill(BillLine bl) AND item(bl) IS Service;

items '{Items}' (Bill b) = GROUP CONCAT nameItem(BillLine l) IF bill(l) = b, ',' ORDER l CHARWIDTH 30;

CONSTRAINT item(BillLine l) AND NOT canBePurchased(item(l))
            CHECKED BY item 
            MESSAGE 'The item is not for purchase';

uom (BillLine l) = uom(item(l));
nameUom 'UoM' (BillLine l) = name(uom(l));

description 'Description' = DATA STRING (BillLine); 

quantity 'Qty' = DATA NUMERIC[16,3] (BillLine);
price 'Price' = DATA NUMERIC[10,2] (BillLine);

defaultPrice = ABSTRACT CASE NUMERIC[10,2] (BillLine);
WHEN LOCAL SETCHANGED(item(BillLine l)) AND NOT CHANGED(price(l)) DO price(l) <- defaultPrice(l);

defaultPrice (BillLine l) += WHEN cost(item(l), DATE(dateTime(bill(l)))) THEN cost(item(l)); 

// taxes
@defineTaxCalc(bill, b, purchase);
taxIncluded (BillLine l) += taxIncluded(type(bill(l)));

// Line properties
type (BillLine l) = type(bill(l));
nameType 'Type' (BillLine l) = nameType(bill(l)) IN id;
imagedNameStatus 'Status' (BillLine l) = imagedNameStatus(bill(l));
dateTime 'Date' (BillLine l) = dateTime(bill(l)) IN id;
date 'Date' (BillLine l) = date(bill(l));
number 'Number' (BillLine l) = number(bill(l)) IN id;
numberDate 'Description' (BillLine l) = numberDate(bill(l));
vendor (BillLine l) = vendor(bill(l));
nameVendor 'Vendor' (BillLine l) = nameVendor(bill(l));
nameCompany 'Company' (BillLine l) = nameCompany(bill(l));

FORM billLines 'Bill lines'
    OBJECTS l = BillLine
    PROPERTIES(l) READONLY dateTime, number, index, nameItem, quantity, price
    PROPERTIES(l) NEWSESSION EDIT
    
    LIST BillLine OBJECT l
;

edit (BillLine l) + { edit(bill(l)); } 

FORM bill 'Bill'
    OBJECTS  b = Bill PANEL 
    PROPERTIES(b) READONLYIF readonly(b)
                  nameType, dateTime, number, 
                  nameVendor, nameCompany,
                  namePaymentTerms, dueDateTime, nameVendorAccount, nameCompanyAccount,
                  nameRepresentative, vendorReference, note,
                  details
        
    OBJECTS l = BillLine
    PROPERTIES(l) READONLYIF readonly(b)
                  index, nameItem, description, nameUom, idBarCodeItem, idItem, referenceItem, 
                  quantity, price, taxes, NEW, DELETE 
    FILTERS bill(l) = b

    EDIT Bill OBJECT b
;

DESIGN bill {
    caption = badged('Bill', number(b) + '(' + dateTime(b) + ')');
    OBJECTS {
        NEW header {
            alignment = STRETCH;    
            horizontal = TRUE;
            NEW headerLeft {
                MOVE PROPERTY(nameType(b)) { notNull = TRUE; }
                MOVE PROPERTY(dateTime(b));
                MOVE PROPERTY(number(b));
            }
            NEW headerRight {
                MOVE PROPERTY(nameVendor(b));
                MOVE PROPERTY(nameCompany(b)) { notNull = TRUE; }
            }
            NEW relatedDoc {
                fill = 1;
                tabbed = TRUE;
            }
        }
        NEW details {
            fill = 5;
            tabbed = TRUE;
            NEW lines {
                caption = 'Lines';
                MOVE BOX(l) { 
                    fill = 3;
                    caption = '';
                    PROPERTY(nameItem(l)) { notNull = TRUE; } 
                }
                NEW linesFooter {                     
                    horizontal = TRUE;
                    alignment = STRETCH;
                }
            }
            NEW otherInformation {
                caption = 'Other information';
                lines = 2;
                NEW payment {
                    caption = 'Payment';
                    alignment = STRETCH;
                    MOVE PROPERTY(namePaymentTerms(b)); 
                    MOVE PROPERTY(dueDateTime(b)); 
                    MOVE PROPERTY(nameCompanyAccount(b));
                    MOVE PROPERTY(nameVendorAccount(b));              
                }           
                NEW billInformat {
                    caption = 'Others';
                    alignment = STRETCH;
                    MOVE PROPERTY(nameRepresentative(b));
                    MOVE PROPERTY(vendorReference(b)); 
                    MOVE PROPERTY(note(b));
                }
            }
            NEW detailsInformation {
                caption = 'Details';
                MOVE PROPERTY(details(b)) {
                    caption = '';
                    fill = 1;
                    height = 300;
                }
            }
        }
    }
    TOOLBARBOX {
        NEW footer FIRST {
            horizontal = TRUE;
        }
    }
}

@defineDocSearch(bill, item, quantity, 'Quantity', b, canBePurchased);
@defineBarCodeSearch(bill, b, l, quantity);

background = ABSTRACT CASE COLOR (Bill);
FORM bills 'Bills'
    OBJECTS b = Bill BACKGROUND background(b)
    PROPERTIES(b) READONLYIF isReadonly()
                           number, dateTime, nameVendor,
                           nameType, nameCompany,
                           namePaymentTerms, dueDateTime, nameVendorAccount, nameCompanyAccount,
                           vendorReference, note
    PROPERTIES(b) NEWSESSION NEW, EDIT, DELETE
           
    LIST Bill OBJECT b
;

@extendFormEditable(bills);

@defineDocHistory(bill, b, item);
@defineDocHistoryLineProperty(bill, BillLine, quantity, 'Qty', nameItem);
@defineDocHistoryLineProperty(bill, BillLine, untaxedAmount, '{Amount}', nameItem);

@defineDocObjectsForm(bills, b, 'Bills');
@defineDocTaxForm(bill, b);
@defineDocStatusForm(bill, b);
@defineDocLinesCount(bill, b);

@defineObjectComments(bill, b, details);

@defineObjectFiles(bill, b, 'Bill file');

NAVIGATOR {
    operations {
        NEW bills FIRST;
    }
}

// copy
clone ABSTRACT LIST (Bill, Bill);
clone (Bill to, Bill from) + {
    type(to) <- type(from);
    vendor(to) <- vendor(from);
    company(to) <- company(from);
    note(to) <- note(from);
    FOR bill(BillLine l) = from INLINE NEW nl = BillLine DO {
        bill(nl) <- to;
        item(nl) <- item(l);
        quantity(nl) <- quantity(l);
        price(nl) <- price(l);
    }
}

copy 'Copy' (Bill from)  { 
    NEWSESSION {
        NEW to = Bill {
            clone(to, from);
            SHOW bill OBJECTS b = to DOCKED;
        }
    }
}
EXTEND FORM bill PROPERTIES(b) copy;

DESIGN bill {
    secondaryActions {
        MOVE PROPERTY(copy(b)) { valueClass = 'btn-secondary'; }
    }
}