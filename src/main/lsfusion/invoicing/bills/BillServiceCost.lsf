MODULE BillServiceCost;

REQUIRE MasterData, BillReceipt, ServiceP, BarCode, Utils;

NAMESPACE Invoicing;

checkedBillLine 'Распределять' = DATA BOOLEAN (BillLine, BillLine);
checkedBill 'Распределять' (Bill b, BillLine bsl) = GROUP MAX checkedBillLine(BillLine bl, bsl) IF bill(bl) = b;

@defineStaticObject(CostAllocationBase, 'База распределения');

EXTEND CLASS CostAllocationBase {
    ammount 'Стоимость приобретения',
    cost 'Плановая себестоимость',
    salesPrice 'Сумма по ценам продажи',
    weight 'Масса',
    volume 'Объем',
    volumetric 'Габаритный вес'
}

costAllocationBase 'База распределения' = DATA CostAllocationBase (Service);
nameCostAllocationBase 'База распределения' (Service s) = name(costAllocationBase(s));

EXTEND FORM item PROPERTIES nameCostAllocationBase(i); 

DESIGN item {
    column2 {
        MOVE PROPERTY(nameCostAllocationBase(i));
    }
}

allocationBase 'База распределения' (bl, bsl) = ABSTRACT CASE NUMERIC[14,3] (BillLine, BillLine);

allocationBase (BillLine bl, BillLine bsl) += WHEN item(bl) IS Product AND costAllocationBase(item(bsl)) = CostAllocationBase.ammount THEN NUMERIC[14,3](subtotal(bl));  
allocationBase (BillLine bl, BillLine bsl) += WHEN item(bl) IS Product AND costAllocationBase(item(bsl)) = CostAllocationBase.cost THEN NUMERIC[14,3](cost(item(bl)) * quantity(bl)); 
allocationBase (BillLine bl, BillLine bsl) += WHEN item(bl) IS Product AND costAllocationBase(item(bsl)) = CostAllocationBase.salesPrice THEN NUMERIC[14,3](salesPrice(item(bl)) * quantity(bl));
allocationBase (BillLine bl, BillLine bsl) += WHEN item(bl) IS Product AND costAllocationBase(item(bsl)) = CostAllocationBase.weight THEN NUMERIC[14,3](weight(item(bl)) * quantity(bl));
allocationBase (BillLine bl, BillLine bsl) += WHEN item(bl) IS Product AND costAllocationBase(item(bsl)) = CostAllocationBase.volume THEN NUMERIC[14,3](volume(item(bl)) * quantity(bl));
allocationBase (BillLine bl, BillLine bsl) += WHEN item(bl) IS Product AND costAllocationBase(item(bsl)) = CostAllocationBase.volumetric THEN NUMERIC[14,3](max(volume(item(bl)) * 200, weight(item(bl))) * quantity(bl));

costAllocated 'Распределено' (BillLine rl, BillLine bsl) = PARTITION UNGROUP subtotal
    PROPORTION STRICT ROUND(2) allocationBase(rl, bsl) IF checkedBillLine(rl, bsl)
    ORDER rl BY bsl MATERIALIZED;

costBillLine (BillLine bl) = GROUP SUM costAllocated(bl, BillLine bsl);

checkBill (Bill b, BillLine bsl) {
    LOCAL checked = BOOLEAN ();
    checked() <- NOT checkedBill(b,bsl);
    FOR bill(BillLine bl) == b DO
        checkedBillLine(bl, bsl) <- checked();
}

EXTEND FORM bill
    OBJECTS bsl = BillLine PANEL
    PROPERTIES(bsl) READONLY nameItem, subtotal
    FILTERS bsl = l

    OBJECTS bc = Bill
    PROPERTIES(bc) READONLY numberDate, nameVendor
    PROPERTIES checkedBill(bc, l) ON CHANGE checkBill(bc, l)
    
    OBJECTS bl = BillLine
    PROPERTIES(bl) READONLY nameItem, nameUom, quantity
    PROPERTIES(bl, l) READONLY allocationBase, costAllocated
    PROPERTIES checkedBillLine(bl, l)
    FILTERS checkedBill(bill(bl), l)
    FILTERS item(bl) IS Product
;

DESIGN bill {
    OBJECTS {
        details {
            NEW cost {
                caption = 'Распределение на себестоимость';
                showIf = costAllocationBase(item(l));
                NEW info {
                    type = CONTAINERH;
                    MOVE PROPERTY(nameItem(bsl)) { caption = 'Распределить стоимость услуги'; }
                    MOVE PROPERTY(subtotal(bsl));
                }
                NEW receipts {
                    fill = 1;
                    MOVE BOX(bc);
                }
                NEW receiptLines {
                    fill = 1;
                    MOVE BOX(bl);                
                }
            }
        }
    }
}