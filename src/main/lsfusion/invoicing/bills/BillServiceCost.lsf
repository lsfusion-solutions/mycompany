MODULE BillServiceCost;

REQUIRE MasterData, BillReceiptCost, BarCode, Utils;

NAMESPACE Invoicing;

serviceLine 'Распределять' = DATA BOOLEAN (BillLine, BillLine);
service 'Распределять' (Bill b, BillLine bsl) = GROUP MAX serviceLine(BillLine bl, bsl) IF bill(bl) = b;

CLASS CostAllocationBase 'База распределения';
TABLE CostAllocationBase (CostAllocationBase);

name 'Наименование' (CostAllocationBase o) = staticCaption(o) IF o IS CostAllocationBase CHARWIDTH 15;

FORM dialogCostAllocationBases 'База распределения'
    OBJECTS o = CostAllocationBase
    PROPERTIES(o) READONLY name
    
    LIST CostAllocationBase OBJECT o
;

EXTEND CLASS CostAllocationBase {
    ammount 'Стоимость приобретения',
    cost 'Плановая себестоимость',
    salesPrice 'Сумма по ценам продажи',
    weight 'Масса',
    volume 'Объем',
    volumetric 'Габаритный вес'
}

costAllocationBase 'База распределения' = DATA CostAllocationBase (Service);
nameCostAllocationBase 'База распределения' (Service s) = name(costAllocationBase(s));

EXTEND FORM item PROPERTIES nameCostAllocationBase(i); 

DESIGN item {
    column2 {
        MOVE PROPERTY(nameCostAllocationBase(i));
    }
}

costAllocationBase 'База распределения' = DATA CostAllocationBase (BillLine);
nameCostAllocationBase 'База распределения' (BillLine bsl) = name(costAllocationBase(bsl));

WHEN LOCAL CHANGED(item(BillLine bsl)) DO costAllocationBase(bsl) <- costAllocationBase(item(bsl) AS Service);

allocationBase 'База распределения' (bl, bsl) = ABSTRACT CASE NUMERIC[14,3] (BillLine, BillLine);

allocationBase (BillLine bl, BillLine bsl) += WHEN item(bl) IS Product AND costAllocationBase(bsl) = CostAllocationBase.ammount THEN NUMERIC[14,3](subtotal(bl));  
allocationBase (BillLine bl, BillLine bsl) += WHEN item(bl) IS Product AND costAllocationBase(bsl) = CostAllocationBase.cost THEN NUMERIC[14,3](cost(item(bl)) * quantity(bl)); 
allocationBase (BillLine bl, BillLine bsl) += WHEN item(bl) IS Product AND costAllocationBase(bsl) = CostAllocationBase.salesPrice THEN NUMERIC[14,3](salesPrice(item(bl)) * quantity(bl));
allocationBase (BillLine bl, BillLine bsl) += WHEN item(bl) IS Product AND costAllocationBase(bsl) = CostAllocationBase.weight THEN NUMERIC[14,3](weight(item(bl)) * quantity(bl));
allocationBase (BillLine bl, BillLine bsl) += WHEN item(bl) IS Product AND costAllocationBase(bsl) = CostAllocationBase.volume THEN NUMERIC[14,3](volume(item(bl)) * quantity(bl));
allocationBase (BillLine bl, BillLine bsl) += WHEN item(bl) IS Product AND costAllocationBase(bsl) = CostAllocationBase.volumetric THEN NUMERIC[14,3](max(volume(item(bl)) * 200, weight(item(bl))) * quantity(bl));

costAllocated 'Распределено' = DATA NUMERIC[14,2] (BillLine, BillLine);

calcCostAllocated 'Распределено' (BillLine bl, BillLine bsl) = PARTITION UNGROUP subtotal
    PROPORTION STRICT ROUND(2) allocationBase(bl, bsl) IF serviceLine(bl, bsl)
    ORDER bl BY bsl;

costAllocated (BillLine bsl) = GROUP SUM costAllocated(BillLine bl, bsl) IF serviceLine(bl, bsl);

CONSTRAINT costAllocated(BillLine bsl) AND NOT costAllocated(bsl) <= subtotal(bsl)
    MESSAGE 'Распределенная сумма не может превышать стоимость услуги';  

allocate 'Распределить' (BillLine bsl) {
    costAllocated (BillLine bl, bsl) <- calcCostAllocated(bl, bsl);
}

extraCost (ReceiptLine rl) += GROUP SUM costAllocated(billLine(rl), BillLine bsl)  IF serviceLine(billLine(rl), bsl);

checkBill (Bill b, BillLine bsl) {
    LOCAL checked = BOOLEAN ();
    checked() <- NOT service(b,bsl);
    FOR bill(BillLine bl) == b DO
        serviceLine(bl, bsl) <- checked();
}

EXTEND FORM bill
    OBJECTS bsl = BillLine
    PROPERTIES(bsl) READONLY nameItem, subtotal
    PROPERTIES(bsl) nameCostAllocationBase, allocate 
    FILTERS b = bill(bsl)
    FILTERS item(bsl) IS Service

    OBJECTS bc = Bill
    PROPERTIES(bc) READONLY numberDate, nameVendor
    PROPERTIES service(bc, bsl) ON CHANGE checkBill(bc, bsl)
    
    OBJECTS bl = BillLine
    PROPERTIES(bl) READONLY nameItem, nameUom, quantity
    PROPERTIES(bl, bsl) READONLY allocationBase
    PROPERTIES(bl, bsl) costAllocated, serviceLine
    FILTERS service(bill(bl), bsl)
    FILTERS item(bl) IS Product
;

DESIGN bill {
    OBJECTS {
        details {
            NEW cost {
                showIf = countServiceLine(b);
                caption = 'Распределение на себестоимость';
                NEW info {
                    fill = 0.3;
                    MOVE BOX(bsl);
                }
                NEW receipts {
                    fill = 1;
                    MOVE BOX(bc);
                }
                NEW receiptLines {
                    fill = 1;
                    MOVE BOX(bl);                
                }
            }
        }
    }
}