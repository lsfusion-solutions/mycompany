MODULE IncomingPaymentInitial;

REQUIRE IncomingPaymentType,
        IncomingPaymentOutgoing;

NAMESPACE Invoicing;

loadInitialData () + {
    NEW i = IncomingPaymentType {
        name(i) <- 'Оплата на счет покупателем';
        id(i) <- 'customerbank';
        bank(i) <- TRUE;
        NEW n = Numerator {
            name(n) <- 'Оплата на счет покупателем';
            series(n) <- 'ПБ';
            minValue(n) <- 1;
            maxValue(n) <- 999999;
            stringLength(n) <- 6;
            numerator(i) <- n;
        }
    }
    NEW i = IncomingPaymentType {
        name(i) <- 'Оплата наличными покупателем';
        id(i) <- 'customercash';
        cash(i) <- TRUE;
        NEW n = Numerator {
            name(n) <- 'Оплата наличными покупателем';
            series(n) <- 'ПН';
            minValue(n) <- 1;
            maxValue(n) <- 999999;
            stringLength(n) <- 6;
            numerator(i) <- n;
        }
    }
    NEW i = IncomingPaymentType {
        name(i) <- 'Возврат на счет поставщику';
        id(i) <- 'vendorbank';
        bank(i) <- TRUE;
        NEW n = Numerator {
            name(n) <- 'Возврат на счет поставщику';
            series(n) <- 'ВБ';
            minValue(n) <- 1;
            maxValue(n) <- 999999;
            stringLength(n) <- 6;
            numerator(i) <- n;
        }
    }
    NEW i = IncomingPaymentType {
        name(i) <- 'Возврат наличных поставщику';
        id(i) <- 'vendorcash';
        cash(i) <- TRUE;
        NEW n = Numerator {
            name(n) <- 'Возврат наличных поставщику';
            series(n) <- 'ВН';
            minValue(n) <- 1;
            maxValue(n) <- 999999;
            stringLength(n) <- 6;
            numerator(i) <- n;
        }
    }

    // outgoing
    NEW i = IncomingPaymentType {
        name(i) <- 'Перемещение с другого счета';
        id(i) <- 'transfer';
        interpay(i) <- TRUE;
        bank(i) <- TRUE;
        NEW n = Numerator {
            name(n) <- 'Перемещение с другого счета';
            series(n) <- 'ПР';
            minValue(n) <- 1;
            maxValue(n) <- 999999;
            stringLength(n) <- 6;
            numerator(i) <- n;
        }
    }
    NEW i = OutgoingPaymentType {
        name(i) <- 'Перемещение на другой счет';
        id(i) <- 'transfer';
        bank(i) <- TRUE;
        NEW n = Numerator {
            name(n) <- 'Перемещение на другой счет';
            series(n) <- 'ПР';
            minValue(n) <- 1;
            maxValue(n) <- 999999;
            stringLength(n) <- 6;
            numerator(i) <- n;
        }
        incomingPaymentType(i) <- incomingPaymentType('transfer');
        autoCreateIncomingPayment(i) <- TRUE;
    }
}