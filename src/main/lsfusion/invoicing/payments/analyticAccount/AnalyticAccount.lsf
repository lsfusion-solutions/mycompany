MODULE AnalyticAccount;

REQUIRE InvoicingSettings;

NAMESPACE Invoicing;

CLASS AnalyticAccount 'Статья ДДС';

id 'Код' = DATA STRING[20] (AnalyticAccount);
name 'Наименование' = DATA ISTRING[50] (AnalyticAccount) NONULL;

parent 'Родитель' = DATA AnalyticAccount (AnalyticAccount);
parent 'Родитель' (STRING[20] s) = GROUP AGGR AnalyticAccount a BY id(a);

level 'Уровень' (AnalyticAccount p, AnalyticAccount c) = RECURSION 1l IF c IS AnalyticAccount AND p == c
    STEP 2l IF p == parent($p) MATERIALIZED ;

canonicalName 'Каноническое имя' (AnalyticAccount a) = GROUP CONCAT name(AnalyticAccount p), '/' ORDER DESC level(a, p) IN id;
canonicalNameParent 'Родитель' (AnalyticAccount a) = canonicalName(parent(a));

CONSTRAINT DROPPED(AnalyticAccount a IS AnalyticAccount) AND PREV(parent(AnalyticAccount c) = a)
        MESSAGE 'Запрещено удалять статьи, на которые ссылаются другие статьи';

FORM analyticAccount 'Статья ДДС'
    OBJECTS a = AnalyticAccount PANEL 
    PROPERTIES (a) id, name, canonicalNameParent
    
    EDIT AnalyticAccount OBJECT a
;

FORM analyticAccounts 'Статьи ДДС'
    OBJECTS a = AnalyticAccount
    PROPERTIES(a) READONLY id, name, canonicalNameParent
    PROPERTIES(a) NEWSESSION NEW, EDIT, DELETE 
    
    TREE tree aa = AnalyticAccount PARENT parent(aa)
    PROPERTIES(aa) READONLY name
    PROPERTIES(aa) NEWSESSION EDIT, DELETE
    
    LIST AnalyticAccount OBJECT a
    
    EVENTS ON CHANGE aa {SEEK analyticAccounts.a = aa;} 
;

newAnalyticAccount 'Добавить' (AnalyticAccount a) {
    NEWSESSION {
        NEW na = AnalyticAccount {
            parent(na) <- a;
            SHOW analyticAccount OBJECTS a = na;
        }
    }
} IMAGE 'add.png' CHANGEKEY 'INSERT' HIDE;

EXTEND FORM analyticAccounts PROPERTIES newAnalyticAccount(aa) DRAW aa TOOLBAR;

DESIGN analyticAccounts {
    OBJECTS {
        NEW tabbedPane {
            type = TABBED;
            fill = 1;
            NEW list {
                caption = 'Список';
                MOVE BOX(a);
            }
            NEW tree {
                caption = 'Дерево';
                MOVE BOX(TREE tree);
            }
        }
    }
}

NAVIGATOR {
    settings {
        NEW analyticAccounts;
    }
}

META definePaymentTypeAnalytic(pay)
    in 'Вкл.' = DATA BOOLEAN (###pay###PaymentType, AnalyticAccount);

    EXTEND FORM ##pay###PaymentType
        OBJECTS a = AnalyticAccount
        PROPERTIES READONLY canonicalName(a)
        PROPERTIES in(o, a)
    
        TREE tree aa = AnalyticAccount PARENT parent(aa)
        PROPERTIES READONLY name(aa)
        PROPERTIES in(o, aa)
    ;
    DESIGN ##pay###PaymentType {
        OBJECTS {
            NEW tabbedPane {
                type = TABBED;
                fill = 1;
                NEW list {
                    caption = 'Список';
                    MOVE BOX(a);
                }
                NEW tree {
                    caption = 'Дерево';
                    MOVE BOX(TREE tree);
                }
            }
        }
    }
END    

META definePaymentAnalytic(pay)
    analiticAccount (###pay###PaymentType t) = GROUP MAX AnalyticAccount a IF in(t, a);
    countAnalyticAccount (###pay###PaymentType t) = GROUP SUM 1 IF in(t, a);

    WHEN LOCAL CHANGED(type(###pay###Payment p)) AND countAnalyticAccount(type(p)) == 1 DO
        analyticAccount(p) <- analiticAccount(type(p)); 

    EXTEND FORM ##pay###Payment PROPERTIES(p) nameAnalyticAccount READONLYIF  countAnalyticAccount(type(p)) == 1;

    CONSTRAINT type(###pay###Payment p) AND analyticAccount(p) AND NOT in(type(p), analyticAccount(p)) AND countAnalyticAccount(type(p))
        CHECKED MESSAGE 'Статья ДДС должна соответствовать типу платежа';

    DESIGN ##pay###Payment {
        params {
            MOVE PROPERTY(nameAnalyticAccount(p)) AFTER PROPERTY (nameType(p));
        }
    }
END