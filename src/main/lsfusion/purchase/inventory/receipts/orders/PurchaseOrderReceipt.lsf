MODULE PurchaseOrderReceipt;

REQUIRE PurchaseOrder, PurchaseOrderConfirmed, PurchaseOrderCanceled, PurchaseOrderLocked, 
        ReceiptCanceled;

NAMESPACE Purchase;

// options
receiptType = DATA ReceiptType (OrderType);
nameReceiptType 'Receipt type' (OrderType t) = name(receiptType(t));
EXTEND FORM orderType PROPERTIES nameReceiptType(o);

// relation
@defineDocLineRelation(order, receipt, '{Order}', 'Receipt', o, r);

done '{Received}' (OrderLine ol) = 
    GROUP SUM done(ReceiptLine rl) IF orderLine(rl) = ol AND active(receipt(rl));
toReceive 'Ready' (OrderLine ol) = 
    max(quantity(ol) (-) done(ol), 0) IF item(ol) IS Product;

toReceive 'Ready' (Order o) = GROUP SUM toReceive(OrderLine ol) IF order(ol) = o;

CONSTRAINT (quantity(OrderLine ol) (-) done(ol)) < 0 AND confirmed(order(ol)) 
    MESSAGE 'For the goods, the receipt exceeds the quantity in the order';

reserveReceipt = DATA Receipt (Order);

WHEN ([GROUP SUM 1 IF CHANGED(toReceive(OrderLine l)) BY order(l)](Order o) OR SET(confirmed(o)) OR DROPPED(locked(o)) OR  
      CHANGED(vendor(o)) OR CHANGED(scheduledDateTime(o)) OR CHANGED(location(o)) OR CHANGED(number(o))) AND 
      status(o) = OrderStatus.confirmed AND location(o) AND receiptType(type(o)) DO {

    IF reserveReceipt(o) AND NOT status(reserveReceipt(o)) = ReceiptStatus.ready THEN
        reserveReceipt(o) <- NULL;

    IF NOT reserveReceipt(o) THEN
        reserveReceipt(o) <- GROUP LAST Receipt r ORDER r WHERE in(o, r) AND status(r) = ReceiptStatus.ready;   

    IF NOT reserveReceipt(o) AND toReceive(o) > 0 THEN   
        NEW r = Receipt { 
            type(r) <- receiptType(type(o));
            ready(r) <- TRUE;
            
            reserveReceipt(o) <- r;           
        }
        
    FOR Receipt r = reserveReceipt(o) DO {
        vendor(r) <- vendor(o);
        scheduledDateTime(r) <- scheduledDateTime(o);
        
        location(r) <- location(o);
    }

    FOR order(OrderLine ol) = o AND toReceive(ol) > 0 AND 
        NOT (GROUP SUM 1 IF receipt(ReceiptLine l) = reserveReceipt(o) AND orderLine(l) = ol) 
            NEW rl = ReceiptLine DO {            
        receipt(rl) <- reserveReceipt(o);
        product(rl) <- item(ol);
        orderLine(rl) <- ol;
    }
    initialDemand(ReceiptLine l) <- toReceive(orderLine(l)) IF toReceive(orderLine(l)) > 0 WHERE receipt(l) = reserveReceipt(o);  
    DELETE ReceiptLine l WHERE receipt(l) = reserveReceipt(o) AND NOT initialDemand(l);
    IF NOT countLines(reserveReceipt(o)) THEN
        DELETE Receipt r WHERE r = reserveReceipt(o); 
}

forbidLockActiveReceipts 'Forbid to lock orders with active receipts' = DATA BOOLEAN (OrderType);
EXTEND FORM orderType PROPERTIES(o) forbidLockActiveReceipts;

WHEN SET(locked(Order o)) AND NOT forbidLockActiveReceipts(type(o)) DO {
    DELETE Receipt r WHERE r = reserveReceipt(o) AND status(reserveReceipt(o)) = ReceiptStatus.ready;
}

CONSTRAINT SET(locked(Order o)) AND status(reserveReceipt(o)) = ReceiptStatus.ready AND forbidLockActiveReceipts(type(o))
    MESSAGE 'It is forbidden to lock orders with active receipts';

FORM orderReceiptShow '{Received}'
    OBJECTS ol = OrderLine
    
    OBJECTS rl = ReceiptLine
    PROPERTIES(rl) READONLY number, scheduledDateTime, imagedNameStatus, initialDemand, done
    FILTERS orderLine(rl) = ol
;

EXTEND FORM order
    PROPERTIES(l) SHOWIF confirmed(o) done ON CHANGE { DIALOG orderReceiptShow OBJECTS ol = l; } BACKGROUND NOT done(l) = quantity(l)
        
    OBJECTS rc = Receipt
    PROPERTIES(rc) READONLY number, scheduledDateTime, imagedNameStatus BACKGROUND colorStatus(rc), nameType, executionDateTime
    PROPERTIES(rc) NEWSESSION EDIT GRID   
    FILTERS in(o, rc)
;

DESIGN order {
    relatedDoc {
        MOVE BOX(rc) {
            caption = badged('Receipts', countReceipts(o));
            GRID(rc) { size = (100, -1); }
        }
        REMOVE TOOLBARSYSTEM(rc);
    }
}
