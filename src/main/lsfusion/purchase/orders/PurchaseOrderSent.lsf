MODULE PurchaseOrderSent;

REQUIRE PurchaseOrder, PurchaseOrderPrint, Email;

NAMESPACE Purchase;

// order type
defaultMailTemplate 'Шаблон по умолчанию' = DATA OrderTemplate (OrderType);
nameDefaultMailTemplate 'Шаблон по умолчанию' (OrderType o) = name(defaultMailTemplate(o)) IN id;

mailSendCopyTo 'Копия адресату' = DATA STRING[50] (OrderType);
mailSubject 'Тема' = DATA STRING (OrderType);
mailBody '' = DATA TEXT (OrderType);

CONSTRAINT defaultMailTemplate(OrderType o) AND NOT in(defaultMailTemplate(o),  o) CHECKED 
    MESSAGE 'Шаблон должен быть включен для данного типа заказа';  

EXTEND FORM orderType
    PROPERTIES(o) mailSendCopyTo, mailSubject, mailBody, nameDefaultMailTemplate 
;

DESIGN orderType {
    OBJECTS {
        NEW tabbedPane {
            type = TABBED;
            fill = 1;
            NEW orderTemplate {
                caption = 'Шаблон';
                MOVE BOX(tm); 
            }
            NEW mail {
                caption = 'Почта';
                type = CONTAINERV;
                MOVE PROPERTY(mailSendCopyTo(o));
                MOVE PROPERTY(mailSubject(o));
                MOVE PROPERTY(mailBody(o));
                MOVE PROPERTY(nameDefaultMailTemplate(o));
            }
        }
    }   
}

// order
EXTEND CLASS OrderStatus {
    sent 'Отправлен'
}
sent 'Отправлен'  = DATA BOOLEAN (Order);

status(Order o) += WHEN sent(o) THEN OrderStatus.sent;
colorStatus(Order i) += WHEN status(i) = OrderStatus.sent THEN RGB(252,247,149);

send 'Отправить' (Order o) {
    APPLY;
    IF canceled() THEN RETURN;
    
    LOCAL attachFile = FILE();
    LOCAL nameFile = STRING();
    nameFile() <- 'Заказ №' + numberDate(o) + ' (' + OVERRIDE nameCompany(o), name(defaultCompany()) + ')';
    orderTemplate() <- defaultMailTemplate(type(o));
    IF defaultMailTemplate(type(o)) THEN {
        CASE EXCLUSIVE
            WHEN format(orderTemplate()) = TemplateFormat.pdf THEN
                PRINT printOrder OBJECTS o = o PDF TO attachFile;
            WHEN format(orderTemplate()) = TemplateFormat.docx THEN
                PRINT printOrder OBJECTS o = o DOCX TO attachFile;
            WHEN format(orderTemplate()) = TemplateFormat.xlsx THEN
                PRINT printOrder OBJECTS o = o XLSX TO attachFile;
            WHEN format(orderTemplate()) = TemplateFormat.rtf THEN
                PRINT printOrder OBJECTS o = o RTF TO attachFile;
            WHEN format(orderTemplate()) = TemplateFormat.html THEN
                PRINT printOrder OBJECTS o = o HTML TO attachFile;
            ELSE
                RETURN;

        EMAIL
            SUBJECT mailSubject(type(o))
            TO email(vendor(o))
            BCC mailSendCopyTo(type(o))
            BODY mailBody(type(o))
            ATTACH attachFile() NAME nameFile(); 
        ;
    }
    NEWSESSION {
        sent(o) <- TRUE;
        APPLY;
    }
}

EXTEND FORM order
     PROPERTIES(o) send SHOWIF status(o) = OrderStatus.draft, sent
;

DESIGN order {
    primaryActions {
        MOVE PROPERTY(send(o)) { fontStyle = 'bold'; };
    }
    status {
        MOVE PROPERTY(sent(o));    
    }
}

EXTEND FORM orders    
    EXTEND FILTERGROUP status
        FILTER 'Отправлен' status(o) = OrderStatus.sent    
;